["```py\n    import numpy as np\n    import pandas as pd\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import matplotlib.pyplot as plt\n    from causalimpact import CausalImpact\n    df = pd.read_csv('https://raw.githubusercontent.com/flyandlure/datasets/master/causal_impact_dataset.csv')\n    ```", "```py\n    pre_period = ['2021-07-04', '2021-07-17']\n    post_period = ['2021-07-18', '2021-07-31']\n    ```", "```py\nmodel = CausalImpact(df['clicks'], pre_period, post_period)\n```", "```py\n    print(model.summary(output='report'))\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    from causalml.optimize import get_pns_bounds\n    ```", "```py\nnum_samples = 5000\nhalf = int(num_samples / 2)\ntreatment = np.tile([0, 1], half)\nrecovery = np.zeros(num_samples)\ndf_expt = pd.DataFrame({'treatment': treatment, 'death': recovery})\ndf_obsv = pd.DataFrame({'treatment': treatment, 'death': recovery})\n```", "```py\n    df_expt.loc[df_expt.loc[df_expt['treatment'] == 1].sample(n=16).index, 'death'] = 1\n    df_expt.loc[df_expt.loc[df_expt['treatment'] == 0].sample(n=14).index, 'death'] = 1\n    df_obsv.loc[df_obsv.loc[df_obsv['treatment'] == 1].sample(n=2).index, 'death'] = 1\n    df_obsv.loc[df_obsv.loc[df_obsv['treatment'] == 0].sample(n=2).index, 'death'] = 1 df_obsv.loc[df_obs.loc[df_obsv['treatment'] == 0].sample(n=28).index, 'death'] = 1\n    ```", "```py\n    pns_lb, pns_ub = get_pns_bounds(df_expt, df_obsv, 'treatment', 'death', type='PNS')\n    pn_lb, pn_ub = get_pns_bounds(df_expt, df_obsv, 'treatment','death', type='PN')\n    ps_lb, ps_ub = get_pns_bounds(df_expt, df_obsv, 'treatment', 'death', type='PS')\n    ```", "```py\n    import dice_ml\n    from dice_ml.utils import helpers\n    from sklearn.pipeline import Pipeline\n    from sklearn.ensemble import RandomForestClassifier\n    dataset = helpers.load_adult_income_dataset()\n    d = dice_ml.Data(dataframe=dataset, continuous_features=['age', 'hours_per_week'], outcome_name='income')\n    ```", "```py\n    clf = Pipeline(steps=[('preprocessor', transformations),('classifier', RandomForestClassifier())])\n    model = clf.fit(x_train, y_train)\n    ```", "```py\n    backend = 'sklearn'\n    m = dice_ml.Model(model=model, backend=backend)\n    exp_random = dice_ml.Dice(d, m, method=\"random\")\n    dice_exp_random = exp_random.generate_counterfactuals(query_instances, total_CFs=2, desired_class=\"opposite\", verbose=False)\n    ```", "```py\n    dice_exp_random = exp_random.generate_counterfactuals(\n    query_instances, total_CFs=4, desired_class=\"opposite\",permitted_range={'age': [22, 50], 'hours_per_week': [40, 60]})\n    ```", "```py\nquery_instance = pd.DataFrame({'age': 25, 'workclass': 'Private', 'education': 'HS-grad', 'marital_status': 'Single','occupation': 'Service', 'race': 'White', 'gender': 'Female',\n'hours_per_week': 45}, index=[0])\nr_exp = dice_ml.Dice(d, m)\ndice_exp = r_exp.generate_counterfactuals(query_instance, total_CFs=4, desired_class=\"opposite\", proximity_weight=1.5, diversity_weight=1.0)\ndice_exp.visualize_as_dataframe(show_only_changes=True)\n```", "```py\n    from auton_survival.estimators import SurvivalModel\n    from auton_survival.metrics import survival_regression_metric\n    from sklearn.model_selection import ParameterGrid\n    from estimators_demo_utils import plot_performance_metrics\n    ```", "```py\n    param_grid = {'bs': [100, 200],\n                  'learning_rate': [ 1e-4, 1e-3],\n                  'layers': [ [100], [100, 100]]\n         }\n    params = ParameterGrid(param_grid)\n    times = np.quantile(y_tr['time'][y_tr['event']==1], np.linspace(0.1, 1, 10)).tolist()\n    model = SurvivalModel('dcph', random_seed=0, bs=param['bs'], learning_rate=param['learning_rate'], layers=param['layers'])\n    model.fit(x_tr, y_tr)\n    ```", "```py\n    predictions_val = model.predict_survival(x_val, times)\n    metric_val = survival_regression_metric('ibs', y_val, predictions_val, times, y_tr)\n    ```", "```py\n    predictions_te = model.predict_survival(x_te, times)\n    ```", "```py\n    results = dict()\n    results['Brier Score'] = survival_regression_metric('brs', outcomes=y_te, predictions=predictions_te, times=times, outcomes_train=y_tr)\n    results['Concordance Index'] = survival_regression_metric('ctd', outcomes=y_te, predictions=predictions_te, times=times, outcomes_train=y_tr)\n    plot_performance_metrics(results, times)\n    ```"]