["```py\nlibrary(MASS)\n```", "```py\nset.seed(5)\n```", "```py\nInputData = Boston\n```", "```py\nInputData = subset(InputData, select = -c(12) )\n```", "```py\nstr(InputData)\n```", "```py\n'data.frame':  506 obs. of  13 variables:\n $ crim   : num  0.00632 0.02731 0.02729 0.03237 0.06905 ...\n $ zn     : num  18 0 0 0 0 0 12.5 12.5 12.5 12.5 ...\n $ indus  : num  2.31 7.07 7.07 2.18 2.18 2.18 7.87 7.87 7.8 ...\n $ chas   : int  0 0 0 0 0 0 0 0 0 0 ...\n $ nox    : num  0.538 0.469 0.469 0.458 0.458 0.458 0.524 ...\n $ rm     : num  6.58 6.42 7.18 7 7.15 ...\n $ age    : num  65.2 78.9 61.1 45.8 54.2 58.7 66.6 96.1 100...\n $ dis    : num  4.09 4.97 4.97 6.06 6.06 ...\n $ rad    : int  1 2 2 3 3 3 5 5 5 5 ...\n $ tax    : num  296 242 242 222 222 222 311 311 311 311 ...\n $ ptratio: num  15.3 17.8 17.8 18.7 18.7 18.7 15.2 15.2 15\\. ...\n $ lstat  : num  4.98 9.14 4.03 2.94 5.33 ...\n $ medv   : num  24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5...\n```", "```py\nsummary(InputData)\n```", "```py\nMaxData <- apply(InputData, 2, max)\n```", "```py\nMinData <- apply(InputData, 2, min)\n```", "```py\nDataScaled <- scale(InputData,center = MinData, scale = MaxData - MinData)\n```", "```py\nsummary(DataScaled)\n```", "```py\nboxplot(BHDataScaled)\n```", "```py\nIndexData = sample(1:nrow(InputData),round(0.70*nrow(InputData)))\nTrainData <- as.data.frame(DataScaled[IndexData,])\nTestData <- as.data.frame(DataScaled[-IndexData,])\n```", "```py\nn = names(InputData)\nf = as.formula(paste(\"medv ~\",\n                     paste(n[!n %in% \"medv\"],\n                           collapse = \" + \")))\n```", "```py\nlibrary(\"neuralnet\")\n```", "```py\nNetDataModel = neuralnet(f,data=TrainData,hidden=10,linear.output=T)\n```", "```py\nsummary(NetDataModel)\n```", "```py\n> summary(NetDataModel)\n Length Class      Mode   ca\nll                   5   -none-     call \nresponse             354   -none-     numeric\ncovariate           4248   -none-     numeric\nmodel.list             2   -none-     list \nerr.fct                1   -none-     function\nact.fct                1   -none-     function\nlinear.output          1   -none-     logical\ndata                  13   data.frame list \nnet.result             1   -none-     list \nweights                1   -none-     list \nstartweights           1   -none-     list \ngeneralized.weights    1   -none-     list \nresult.matrix        144   -none-     numeric\n```", "```py\nplot(NetDataModel)\n```", "```py\nPredNetTest <- compute(NetDataModel,TestData[,1:12])\n```", "```py\nPredNetTestStart <- PredNetTest$net.result*(max(InputData$medv)-\n                                                         min(InputData$medv))+min(InputData$medv)\nTestStart <- as.data.frame((TestData$medv)*(max(InputData$medv)-\n                                                min(InputData$medv))+min(InputData$medv))\nMSENetData <- sum((TestStart -\n                     PredNetTestStart)^2)/nrow(TestStart)\n```", "```py\nRegressionModel <- lm(medv~., data=InputData)\n```", "```py\nsummary(RegressionModel)\n```", "```py\nTestDataComp <- InputData[-IndexData,]\nPredictLm <- predict(RegressionModel,TestDataComp)\nMSERegrData <- sum((PredictLm - TestDataComp$medv)^2)/nrow(TestDataComp)\n```", "```py\ncat(\"MSE for Neural Network Model =\",MSENetData,\"\\n\")\ncat(\"MSE for Regression Model =\",MSERegrData,\"\\n\")\n```", "```py\n> cat(\"MSE for Neural Network Model =\",MSENetData,\"\\n\")\nMSE for Neural Network Model = 19.41977332\n> cat(\"MSE for Regression Model =\",MSERegrData,\"\\n\")\nMSE for Regression Model = 34.83062039\n```", "```py\nInitialize Replay Memory D\nInitialize Q (s, a) with random weights\nrepeat Observe initial state s1\n    for t = 1 to T do\n        Select an action using Q (greedy)\n        Perform the action at\n        Look at the reward rt and the new state st+1\n        Save the observation (st, at, rt, s+ 1) in the Replay Memory D\n        Take a sample (sj, aj, rj, sj+1) from D\n        Calculate the target T for each observation\n        if sj + 1 is Terminal state then\n            T = rj\n        else\n            T = rj + Î³ maxa Q (sj+1, aj)\n        end if\n        trains the Q network by minimizing (T - Q (sj, aj))2\n    end for\nuntil\n```"]