["```py\n$ git clone https://github.com/PacktPublishing/Neural-Network-Projects-with-Python.git\n```", "```py\n$ cd Neural-Network-Projects-with-Python\n```", "```py\n$ conda env create -f environment.yml\n```", "```py\n$ conda activate neural-network-projects-python\n```", "```py\n$ cd Chapter03\n```", "```py\n$ python main.py\n```", "```py\n$ python visualize.py\n```", "```py\nimport pandas as pd\n\ndf = pd.read_csv('NYC_taxi.csv', parse_dates=['pickup_datetime'], nrows=500000)\n```", "```py\nprint(df.head())\n```", "```py\n# range of longitude for NYC\nnyc_min_longitude = -74.05\nnyc_max_longitude = -73.75\n\n# range of latitude for NYC\nnyc_min_latitude = 40.63\nnyc_max_latitude = 40.85\n\ndf2 = df.copy(deep=True)\nfor long in ['pickup_longitude', 'dropoff_longitude']:\n    df2 = df2[(df2[long] > nyc_min_longitude) & (df2[long] <\n                                                 nyc_max_longitude)]\n\nfor lat in ['pickup_latitude', 'dropoff_latitude']:\n    df2 = df2[(df2[lat] > nyc_min_latitude) & (df2[lat] < \n                                               nyc_max_latitude)]\n```", "```py\nlandmarks = {'JFK Airport': (-73.78, 40.643),\n             'Laguardia Airport': (-73.87, 40.77),\n             'Midtown': (-73.98, 40.76),\n             'Lower Manhattan': (-74.00, 40.72),\n             'Upper Manhattan': (-73.94, 40.82),\n             'Brooklyn': (-73.95, 40.66)}\n```", "```py\nimport matplotlib.pyplot as plt\n\ndef plot_lat_long(df, landmarks, points='Pickup'):\n    plt.figure(figsize = (12,12)) # set figure size\n    if points == 'pickup':\n        plt.plot(list(df.pickup_longitude), list(df.pickup_latitude), \n                 '.', markersize=1)\n    else:\n        plt.plot(list(df.dropoff_longitude), list(df.dropoff_latitude), \n                 '.', markersize=1)\n\n    for landmark in landmarks:\n        plt.plot(landmarks[landmark][0], landmarks[landmark][1], \n                '*', markersize=15, alpha=1, color='r') \n        plt.annotate(landmark, (landmarks[landmark][0]+0.005, \n                     landmarks[landmark][1]+0.005), color='r', \n                     backgroundcolor='w') \n\n    plt.title(\"{} Locations in NYC Illustrated\".format(points))\n    plt.grid(None)\n    plt.xlabel(\"Latitude\")\n    plt.ylabel(\"Longitude\")\n    plt.show()\n```", "```py\nplot_lat_long(df2, landmarks, points='Pickup')\n```", "```py\nplot_lat_long(df2, landmarks, points='Drop Off')\n```", "```py\ndf['year'] = df['pickup_datetime'].dt.year\ndf['month'] = df['pickup_datetime'].dt.month\ndf['day'] = df['pickup_datetime'].dt.day\ndf['day_of_week'] = df['pickup_datetime'].dt.dayofweek\ndf['hour'] = df['pickup_datetime'].dt.hour\n```", "```py\nimport numpy as np\ndf['day_of_week'].plot.hist(bins=np.arange(8)-0.5, ec='black', \n                            ylim=(60000,75000))\nplt.xlabel('Day of Week (0=Monday, 6=Sunday)')\nplt.title('Day of Week Histogram')\nplt.show()\n```", "```py\ndf['hour'].plot.hist(bins=24, ec='black')\nplt.title('Pickup Hour Histogram')\nplt.xlabel('Hour')\nplt.show()\n```", "```py\nprint(df.isnull().sum())\n```", "```py\ndf = df.dropna()\n```", "```py\nprint(df.describe())\n```", "```py\ndf['fare_amount'].hist(bins=500)\nplt.xlabel(\"Fare\")\nplt.title(\"Histogram of Fares\")\nplt.show()\n```", "```py\ndf = df[(df['fare_amount'] >=0) & (df['fare_amount'] <= 100)]\n```", "```py\ndf['passenger_count'].hist(bins=6, ec='black')\nplt.xlabel(\"Passenger Count\")\nplt.title(\"Histogram of Passenger Count\")\nplt.show()\n```", "```py\ndf.loc[df['passenger_count']==0, 'passenger_count'] = 1\n```", "```py\ndf.plot.scatter('pickup_longitude', 'pickup_latitude')\nplt.show()\n```", "```py\n# range of longitude for NYC\nnyc_min_longitude = -74.05\nnyc_max_longitude = -73.75\n\n# range of latitude for NYC\nnyc_min_latitude = 40.63\nnyc_max_latitude = 40.85\n\n# only consider locations within NYC\nfor long in ['pickup_longitude', 'dropoff_longitude']:\n    df = df[(df[long] > nyc_min_longitude) & (df[long] <\n                                              nyc_max_longitude)]\n\nfor lat in ['pickup_latitude', 'dropoff_latitude']:\n    df = df[(df[lat] > nyc_min_latitude) & (df[lat] < \n                                            nyc_max_latitude)]\n```", "```py\ndef preprocess(df): \n    # remove missing values in the dataframe\n    def remove_missing_values(df):\n        df = df.dropna()\n        return df\n\n    # remove outliers in fare amount\n    def remove_fare_amount_outliers(df, lower_bound, upper_bound):\n        df = df[(df['fare_amount'] >= lower_bound) & \n                (df['fare_amount'] <= upper_bound)]\n        return df\n\n    # replace outliers in passenger count with the mode\n    def replace_passenger_count_outliers(df):\n        mode = df['passenger_count'].mode()\n        df.loc[df['passenger_count'] == 0, 'passenger_count'] = mode\n        return df\n\n    # remove outliers in latitude and longitude\n    def remove_lat_long_outliers(df):\n        # range of longitude for NYC\n        nyc_min_longitude = -74.05\n        nyc_max_longitude = -73.75\n        # range of latitude for NYC\n        nyc_min_latitude = 40.63\n        nyc_max_latitude = 40.85\n        # only consider locations within New York City\n        for long in ['pickup_longitude', 'dropoff_longitude']:\n            df = df[(df[long] > nyc_min_longitude) & \n                    (df[long] < nyc_max_longitude)]\n        for lat in ['pickup_latitude', 'dropoff_latitude']:\n            df = df[(df[lat] > nyc_min_latitude) & \n                    (df[lat] < nyc_max_latitude)]\n        return df\n\n    df = remove_missing_values(df)\n    df = remove_fare_amount_outliers(df, lower_bound = 0, \n                                     upper_bound = 100)\n    df = replace_passenger_count_outliers(df)\n    df = remove_lat_long_outliers(df)\n    return df\n```", "```py\nprint(df.head()['pickup_datetime'])\n```", "```py\ndf['year'] = df['pickup_datetime'].dt.year\ndf['month'] = df['pickup_datetime'].dt.month\ndf['day'] = df['pickup_datetime'].dt.day\ndf['day_of_week'] = df['pickup_datetime'].dt.dayofweek\ndf['hour'] = df['pickup_datetime'].dt.hour\n```", "```py\nprint(df.loc[:5,['pickup_datetime', 'year', 'month', \n                 'day', 'day_of_week', 'hour']])\n```", "```py\ndf = df.drop(['pickup_datetime'], axis=1)\n```", "```py\ndef euc_distance(lat1, long1, lat2, long2):\n    return(((lat1-lat2)**2 + (long1-long2)**2)**0.5)\n```", "```py\ndf['distance'] = euc_distance(df['pickup_latitude'],\n                              df['pickup_longitude'], \n                              df['dropoff_latitude'],\n                              df['dropoff_longitude'])\n```", "```py\ndf.plot.scatter('fare_amount', 'distance')\nplt.show()\n```", "```py\nairports = {'JFK_Airport': (-73.78,40.643),\n            'Laguardia_Airport': (-73.87, 40.77),\n            'Newark_Airport' : (-74.18, 40.69)}\n\nfor airport in airports:\n    df['pickup_dist_' + airport] = euc_distance(df['pickup_latitude'],\n                                                df['pickup_longitude'], \n                                                airports[airport][1], \n                                                airports[airport][0])\n    df['dropoff_dist_' + airport] = euc_distance(df['dropoff_latitude'], \n                                                 df['dropoff_longitude'],\n                                                 airports[airport][1], \n                                                 airports[airport][0])\n```", "```py\nprint(df[['key', 'pickup_longitude', 'pickup_latitude', \n          'dropoff_longitude', 'dropoff_latitude', \n          'pickup_dist_JFK_Airport',\n          'dropoff_dist_JFK_Airport']].head())\n```", "```py\ndf = df.drop(['key'], axis=1)\n```", "```py\ndef feature_engineer(df):\n    # create new columns for year, month, day, day of week and hour\n    def create_time_features(df):\n        df['year'] = df['pickup_datetime'].dt.year\n        df['month'] = df['pickup_datetime'].dt.month\n        df['day'] = df['pickup_datetime'].dt.day\n        df['day_of_week'] = df['pickup_datetime'].dt.dayofweek\n        df['hour'] = df['pickup_datetime'].dt.hour\n        df = df.drop(['pickup_datetime'], axis=1)\n        return df\n\n    # function to calculate euclidean distance\n    def euc_distance(lat1, long1, lat2, long2):\n        return(((lat1-lat2)**2 + (long1-long2)**2)**0.5)\n\n    # create new column for the distance travelled\n    def create_pickup_dropoff_dist_features(df):\n        df['travel_distance'] = euc_distance(df['pickup_latitude'], \n                                             df['pickup_longitude'], \n                                             df['dropoff_latitude'],\n                                             df['dropoff_longitude'])\n        return df\n\n    # create new column for the distance away from airports\n    def create_airport_dist_features(df):\n        airports = {'JFK_Airport': (-73.78,40.643),\n                    'Laguardia_Airport': (-73.87, 40.77),\n                    'Newark_Airport' : (-74.18, 40.69)}\n        for k in airports:\n            df['pickup_dist_'+k]=euc_distance(df['pickup_latitude'], \n                                              df['pickup_longitude'],\n                                              airports[k][1],\n                                              airports[k][0])\n            df['dropoff_dist_'+k]=euc_distance(df['dropoff_latitude'], \n                                               df['dropoff_longitude'],\n                                               airports[k][1],\n                                               airports[k][0]) \n        return df\n\n    df = create_time_features(df)\n    df = create_pickup_dropoff_dist_features(df)\n    df = create_airport_dist_features(df)\n    df = df.drop(['key'], axis=1)\n    return df\n```", "```py\ndf_prescaled = df.copy()\n```", "```py\ndf_scaled = df.drop(['fare_amount'], axis=1)\n```", "```py\nfrom sklearn.preprocessing import scale\n\ndf_scaled = scale(df_scaled)\n```", "```py\ncols = df.columns.tolist()\ncols.remove('fare_amount')\ndf_scaled = pd.DataFrame(df_scaled, columns=cols, index=df.index)\ndf_scaled = pd.concat([df_scaled, df['fare_amount']], axis=1)\ndf = df_scaled.copy()\n```", "```py\nX = df.loc[:, df.columns != 'fare_amount'] \ny = df.loc[:, 'fare_amount']\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n```", "```py\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(Dense(128, activation= 'relu', input_dim=X_train.shape[1]))\nmodel.add(Dense(64, activation= 'relu'))\nmodel.add(Dense(32, activation= 'relu'))\nmodel.add(Dense(8, activation= 'relu'))\nmodel.add(Dense(1))\n```", "```py\nmodel.summary()\n```", "```py\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\nmodel.fit(X_train, y_train, epochs=1)\n```", "```py\ndef predict_random(df_prescaled, X_test, model):\n    sample = X_test.sample(n=1, random_state=np.random.randint(low=0, \n                                                              high=10000))\n    idx = sample.index[0]\n\n    actual_fare = df_prescaled.loc[idx,'fare_amount']\n    day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', \n                 'Saturday', 'Sunday']\n    day_of_week = day_names[df_prescaled.loc[idx,'day_of_week']]\n    hour = df_prescaled.loc[idx,'hour']\n    predicted_fare = model.predict(sample)[0][0]\n    rmse = np.sqrt(np.square(predicted_fare-actual_fare))\n\n    print(\"Trip Details: {}, {}:00hrs\".format(day_of_week, hour))  \n    print(\"Actual fare: ${:0.2f}\".format(actual_fare))\n    print(\"Predicted fare: ${:0.2f}\".format(predicted_fare))\n    print(\"RMSE: ${:0.2f}\".format(rmse))\n```", "```py\npredict_random(df_prescaled, X_test, model)\n```", "```py\nTrip Details: Sunday, 10:00hrs\nActual fare: $4.90\nPredicted fare: $5.60\nRMSE: $0.70\n\n```", "```py\nTrip Details: Wednesday, 7:00hrs\nActual fare: $6.10\nPredicted fare: $6.30\nRMSE: $0.20\n```", "```py\nTrip Details: Monday, 10:00hrs\nActual fare: $35.80\nPredicted fare: $38.11 \nRMSE: $2.31\n```", "```py\nTrip Details: Saturday, 23:00hrs\nActual fare: $52.00\nPredicted fare: $53.55 \nRMSE: $1.55\n```", "```py\nfrom sklearn.metrics import mean_squared_error\n\ntrain_pred = model.predict(X_train)\ntrain_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n\ntest_pred = model.predict(X_test)\ntest_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n\nprint(\"Train RMSE: {:0.2f}\".format(train_rmse))\nprint(\"Test RMSE: {:0.2f}\".format(test_rmse))\n```", "```py\nfrom utils import preprocess, feature_engineer\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import scale\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.metrics import mean_squared_error\n```", "```py\ndf = pd.read_csv('NYC_taxi.csv', parse_dates=['pickup_datetime'], \n                                               nrows=500000)\n```", "```py\ndf = preprocess(df)\ndf = feature_engineer(df)\n```", "```py\ndf_prescaled = df.copy()\ndf_scaled = df.drop(['fare_amount'], axis=1)\ndf_scaled = scale(df_scaled)\ncols = df.columns.tolist()\ncols.remove('fare_amount')\ndf_scaled = pd.DataFrame(df_scaled, columns=cols, index=df.index)\ndf_scaled = pd.concat([df_scaled, df['fare_amount']], axis=1)\ndf = df_scaled.copy()\n```", "```py\nX = df.loc[:, df.columns != 'fare_amount'] \ny = df.fare_amount\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n```", "```py\nmodel=Sequential()\nmodel.add(Dense(128, activation= 'relu', input_dim=X_train.shape[1]))\nmodel.add(Dense(64, activation= 'relu'))\nmodel.add(Dense(32, activation= 'relu'))\nmodel.add(Dense(8, activation= 'relu'))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\nmodel.fit(X_train, y_train, epochs=1)\n```", "```py\ntrain_pred = model.predict(X_train)\ntrain_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\ntest_pred = model.predict(X_test)\ntest_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\nprint(\"Train RMSE: {:0.2f}\".format(train_rmse))\nprint(\"Test RMSE: {:0.2f}\".format(test_rmse))\n\ndef predict_random(df_prescaled, X_test, model):\n    sample = X_test.sample(n=1, random_state=np.random.randint(low=0, \n                                                              high=10000))\n    idx = sample.index[0]\n\n    actual_fare = df_prescaled.loc[idx,'fare_amount']\n    day_names = ['Monday','Tuesday','Wednesday','Thursday','Friday',\n                 'Saturday', 'Sunday']\n    day_of_week = day_names[df_prescaled.loc[idx,'day_of_week']]\n    hour = df_prescaled.loc[idx,'hour']\n    predicted_fare = model.predict(sample)[0][0]\n    rmse = np.sqrt(np.square(predicted_fare-actual_fare))\n\n    print(\"Trip Details: {}, {}:00hrs\".format(day_of_week, hour)) \n    print(\"Actual fare: ${:0.2f}\".format(actual_fare))\n    print(\"Predicted fare: ${:0.2f}\".format(predicted_fare))\n    print(\"RMSE: ${:0.2f}\".format(rmse))\n\npredict_random(df_prescaled, X_test, model)\n```", "```py\ndf = df[(df['height'] >= 160) & (df['height'] <= 180)]\n\n```"]