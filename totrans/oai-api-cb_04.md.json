["```py\n    !pip install openai\n    from openai import OpenAI\n    ```", "```py\n    api_key = \"<api-key>\"\n    client = OpenAI(api_key=api_key)\n    ```", "```py\n    completion = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {'role': 'system', 'content': 'You are an assistant that creates a slogan based on company description'},\n            {\"role\": \"user\", \"content\": \"A company that sells ice cream\"}\n        ],\n        n=1,\n        temperature=1\n    )\n    ```", "```py\n    import json\n    completion_json = json.loads(completion.json())\n    print(completion_json)\n    ```", "```py\n    print(completion_json['choices'][0]['message']['content'])\n    ```", "```py\n{\n```", "```py\n    \"model\": \"gpt-3.5-turbo\",\n```", "```py\n    \"messages\": [\n```", "```py\n      {\n```", "```py\n        \"role\": \"system\",\n```", "```py\n        \"content\": \"You are a helpful assistant.\"\n```", "```py\n      },\n```", "```py\n      {\n```", "```py\n        \"role\": \"user\",\n```", "```py\n        \"content\": \"Hello!\"\n```", "```py\n      }\n```", "```py\n    ]\n```", "```py\n  }\n```", "```py\ncompletion = client.chat.completions.create (\n```", "```py\n  model=\"gpt-3.5-turbo\",\n```", "```py\n  messages=[\n```", "```py\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n```", "```py\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n```", "```py\n  ]\n```", "```py\n)\n```", "```py\n{\n```", "```py\n    \"prompt\": \"A cute baby sea otter\",\n```", "```py\n    \"n\": 2,\n```", "```py\n    \"size\": \"1024x1024\"\n```", "```py\n  }\n```", "```py\nclient.images.generate(\n```", "```py\n  prompt=\"A cute baby sea otter\",\n```", "```py\n  n=2,\n```", "```py\n  size=\"1024x1024\"\n```", "```py\n)\n```", "```py\n-F file=\"@/path/to/file/audio.mp3\" \\\n```", "```py\n  -F model=\"whisper-1\"\n```", "```py\naudio_file = open(\"audio.mp3\", \"rb\")\n```", "```py\ntranscript = client.audio.transcriptions.create (\"whisper-1\", audio_file)\n```", "```py\n    !pip install openai\n    from openai import OpenAI\n    from numpy import dot\n    from numpy.linalg import norm\n    ```", "```py\n    api_key = \"<Insert your API-key here>\"\n    client = OpenAI(api_key=api_key)\n    ```", "```py\n    def create_embeddings(text):\n      embedding = client.embeddings.create(input=text, model=\"text-embedding-ada-002\").data[0].embedding\n      return embedding\n    def compare_two_embeddings(a, b):\n      cos_sim = dot(a, b)/(norm(a)*norm(b))\n      return cos_sim\n    ```", "```py\n    text_1 = \"I like apples\"\n    text_2 = \"I like bananas\"\n    round(compare_two_embeddings(create_embeddings(text_1), create_embeddings(text_2)), 2)\n    ```", "```py\n    text_1 = \"I like apples\"\n    text_2 = \"All legislative Powers herein granted shall be vested in a Congress of the United States, which shall consist of a Senate and House of Representatives.\"\n    round(compare_two_embeddings(create_embeddings(text_1), create_embeddings(text_2)), 2)\n    ```", "```py\n    text_1 = \"Birds like to fly\"\n    text_2 = \"Airplanes can soar above the ground\"\n    Output = 0.88\n    text_1 = \"Birds like to fly\"\n    text_2 = \"A fly can irritate me\"\n    Output = 0.84\n    ```", "```py\ndef compare_two_embeddings(a, b):\n  cos_sim = dot(a, b)/(norm(a)*norm(b))\n  return cos_sim\n```", "```py\n    !pip install openai\n    from openai import OpenAI\n    import os\n    ```", "```py\n    api_key = \"<Insert your API-key here>\"\n    client = OpenAI(api_key=api_key)\n    ```", "```py\n    training_data = client.files.create(\n      file=open(\"chapter4trainingdata.json\", \"rb\"),\n      purpose='fine-tune'\n    )\n    file_id = training_data.id\n    ```", "```py\n    fine_tune_job = client.fine_tuning.jobs.create(training_file=file_id, model=\"gpt-3.5-turbo\")\n    ```", "```py\n    client.fine_tuning.jobs.retrieve(fine_tune_job.id).status\n    ```", "```py\n    fine_tuned_model = client.fine_tuning.jobs.retrieve(fine_tune_job.id).fine_tuned_model\n    ```", "```py\n    Completion = client.chat.completions.create(\n      model=fine_tuned_model,\n      messages=[\n        {\"role\": \"system\", \"content\": \"You are an assistant that creates funny one-line jokes based on a given scenario.\"},\n         {\"role\": \"user\", \"content\": \"A man walking across the road\"}\n      ]\n    )\n    print(completion.choices[0].message)\n    ```", "```py\n    {\"messages\": [{\"role\": \"system\", \"content\": \"You are an assistant that creates funny one-line jokes based on a given scenario.\"}, {\"role\": \"user\", \"content\": \"A student in a library\"}, {\"role\": \"assistant\", \"content\": \"Why did the student bring a ladder to the library? Because they heard the knowledge was on the top shelf! Haha\"}]}\n    ```", "```py\n    training_data = client.files.create(\n      file=open(\"chapter4trainingdata.json\", \"rb\"),\n      purpose='fine-tune'\n    )\n    ```", "```py\n    file_id = training_data.id\n    ```", "```py\n    fine_tune_job = client.fine_tuning.jobs.create(training_file=file_id, model=\"gpt-3.5-turbo\")\n    client.fine_tuning.jobs.retrieve(fine_tune_job.id).status\n    ```", "```py\n    fine_tuned_model = client.fine_tuning.jobs.retrieve(fine_tune_job.id).fine_tuned_model\n    ```", "```py\n    completion = client.chat.completions.create(\n      model=fine_tuned_model,\n      messages=[\n        {\"role\": \"system\", \"content\": \"You are an assistant that creates funny one-line jokes based on a given scenario.\"},\n         {\"role\": \"user\", \"content\": \"A man walking across the road\"}\n      ]\n    )\n    print(completion.choices[0].message.content)\n    ```"]