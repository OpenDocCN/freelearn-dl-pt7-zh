["```py\nfibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n# Min-Max normalization:\n[(float(i)-min(fibonacci))/(max(fibonacci)-min(fibonacci)) \\\nfor i in fibonacci]\n```", "```py\n[0.0,\n 0.006944444444444444,\n 0.006944444444444444,\n 0.013888888888888888,\n 0.020833333333333332,\n 0.034722222222222224,\n 0.05555555555555555,\n 0.09027777777777778,\n 0.14583333333333334,\n 0.2361111111111111,\n 0.3819444444444444,\n 0.6180555555555556,\n 1.0]\n```", "```py\n# Mean normalization:\navg = sum(fibonacci) / len(fibonacci)\n# 28.923076923076923\n[(float(i)-avg)/(max(fibonacci)-min(fibonacci)) \\\nfor i in fibonacci]\n```", "```py\n[-0.20085470085470086,\n -0.19391025641025642,\n -0.19391025641025642,\n -0.18696581196581197,\n -0.18002136752136752,\n -0.16613247863247863,\n -0.1452991452991453,\n -0.11057692307692307,\n -0.05502136752136752,\n 0.035256410256410256,\n 0.18108974358974358,\n 0.4172008547008547,\n 0.7991452991452992]\n```", "```py\nimport numpy as np\nfrom sklearn import preprocessing\npreprocessing.scale(fibonacci)\n```", "```py\narray([-0.6925069 , -0.66856384, -0.66856384, -0.64462079,\n       -0.62067773-0.57279161, -0.50096244, -0.38124715,\n       -0.18970269,  0.12155706, 0.62436127,  1.43842524,\n       2.75529341]\n```", "```py\nfeatures = preprocessing.scale(fibonacci)\nlabel = np.array(range(13))\n```", "```py\nfrom sklearn import model_selection\n(x_train, x_test, y_train, y_test) = \\\nmodel_selection.train_test_split(features, \\\n                                 label, test_size=0.1, \\\n                                 random_state=8)\n```", "```py\nx_train\n```", "```py\narray([ 1.43842524, -0.18970269, -0.50096244,  2.75529341,\n       -0.6925069 , -0.66856384, -0.57279161,  0.12155706,\n       -0.66856384, -0.62067773, -0.64462079])\n```", "```py\nx_test\n```", "```py\narray([-0.38124715, 0.62436127])\n```", "```py\ny_train\n```", "```py\narray([11, 8, 6, 12, 0, 2, 5, 9, 1, 4, 3])\n```", "```py\ny_test\n```", "```py\narray([7, 10])\n```", "```py\nx_train = x_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n```", "```py\nfrom sklearn import linear_model\nlinear_regression = linear_model.LinearRegression()\nmodel = linear_regression.fit(x_train, y_train)\nmodel.predict(x_test)\n```", "```py\narray([4.46396931, 7.49212796])\n```", "```py\nmodel.score(x_test, y_test)\n```", "```py\n-1.8268608450379087\n```", "```py\n[2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62]\n```", "```py\n[-0.6925069, -0.66856384, -0.66856384, -0.64462079, -0.62067773, -0.57279161, -0.50096244, -0.38124715, -0.18970269, 0.12155706, 0.62436127, 1.43842524, 2.75529341]\n```", "```py\nimport numpy as np\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\nx_2 = x**2\nxy = x*y\n```", "```py\narray([  1,   4,   9,  16,  25,  36,  49,  64,  81, \n       100, 121, 144, 169],  dtype=int32)\n```", "```py\narray([2, 16, 24, 72, 125, 126, 224, \n       352, 288, 480, 671, 540, 806])\n```", "```py\nsum_x = sum(x)\nsum_y = sum(y)\nsum_x_2 = sum(x_2)\nsum_xy = sum(xy)\n```", "```py\n91\n```", "```py\n406\n```", "```py\n819\n```", "```py\n3726\n```", "```py\nN = len(x)\na = (N*sum_xy - (sum_x*sum_y))/(N*sum_x_2-(sum_x)**2)\n```", "```py\n13\n```", "```py\n4.857142857142857\n```", "```py\nb = (sum_y - a*sum_x)/N\n```", "```py\n-2.7692307692307647\n```", "```py\nimport numpy as np\nx = np.array(range(1, 14))\ny = np.array([-0.6925069, -0.66856384, -0.66856384, \\\n              -0.64462079, -0.62067773, -0.57279161, \\\n              -0.50096244, -0.38124715, -0.18970269, \\\n              0.12155706, 0.62436127, 1.43842524, 2.75529341])\nx_2 = x**2\nxy = x*y\nsum_x = sum(x)\nsum_y = sum(y)\nsum_x_2 = sum(x_2)\nsum_xy = sum(xy)\nN = len(x)\na = (N*sum_xy - (sum_x*sum_y))/(N*sum_x_2-(sum_x)**2)\nb = (sum_y - a*sum_x)/N\n```", "```py\n0.21838173510989017\n```", "```py\n-1.528672146538462\n```", "```py\nimport numpy as np\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\nx_2 = x**2\nxy = x*y\nsum_x = sum(x)\nsum_y = sum(y)\nsum_x_2 = sum(x_2)\nsum_xy = sum(xy)\nN = len(x)\na = (N*sum_xy - (sum_x*sum_y))/(N*sum_x_2-(sum_x)**2)\nb = (sum_y - a*sum_x)/N\n```", "```py\nimport numpy as np\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\n[a,b] = np.polyfit(x, y, 1)\n```", "```py\n[4.857142857142858, -2.769230769230769]\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plot\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\nx_2 = x**2\nxy = x*y\nsum_x = sum(x)\nsum_y = sum(y)\nsum_x_2 = sum(x_2)\nsum_xy = sum(xy)\nN = len(x)\na = (N*sum_xy - (sum_x*sum_y))/(N*sum_x_2-(sum_x)**2)\nb = (sum_y - a*sum_x)/N\n# Plotting the points\nplot.scatter(x, y)\n# Plotting the line\nplot.plot([0, 15], [b, 15*a+b])\nplot.show()\n```", "```py\ndef fitY( arr ):\n    return [4.857142857142859 * x - 2.7692307692307843 for x in arr]\n```", "```py\nplot.plot(x, y, 'go',x, fitY(x), 'r--o')\n```", "```py\nimport numpy as np\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\nnp.polyfit(x, y, 1)\n```", "```py\n[4.857142857142857, -2.769230769230768]\n```", "```py\nimport numpy as np\nx = np.array(range( -10, 10, 1 ))\nf = np.poly1d([-1,3,-2])\n```", "```py\nf(5)\n```", "```py\n-12\n```", "```py\nf(x)\n```", "```py\narray ([-132\\. -110, -90, -72, -56, -42, -30, -20, -12, -6, -2,\n        0, 0, -2, -6, -12, -20, -30, -42, -56])\n```", "```py\nimport matplotlib.pyplot as plot\nplot.plot(x, f(x))\n```", "```py\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\n# Plotting the points\nplot.scatter(x, y)\n# Plotting the prediction belonging to x = 20\nplot.scatter(20, a * 20 + b, color='red')\n# Plotting the line\nplot.plot([0, 25], [b, 25*a+b])\n```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plot\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/The-Applied-Artificial-'\\\n               'Intelligence-Workshop/master/Datasets/'\\\n               'population.csv'\n    df = pd.read_csv(file_url)\n    df\n    ```", "```py\n    x = np.array(range(1, 19))\n    y = np.array(df['population'])\n    ```", "```py\n    array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    ```", "```py\n    array([147026, 144272, 140020, 143801, 146233,\n           144539, 141273, 135389, 142500, 139452,\n           139722, 135300, 137289, 136511, 132884,\n           125683, 127255, 124275], dtype=int64)\n    ```", "```py\n    [a, b] = np.polyfit(x, y, 1)\n    ```", "```py\n    [-1142.0557275541803, 148817.5294117647]\n    ```", "```py\n    plot.scatter( x, y ) \n    plot.plot( [0, 30], [b, 30*a+b] )\n    plot.show()\n    ```", "```py\n    population_2025 = 25*a+b\n    population_2030 = 30*a+b\n    ```", "```py\n    120266.1362229102\n    ```", "```py\n    114555.85758513928\n    ```", "```py\ny = np.dot(np.array([a1, a2, a3]), np.array([x1, x2, x3])) + b\n```", "```py\ny = np.dot(np.array([b, a1, a2, a3]) * np.array([1, x1, x2, x3]))\n```", "```py\nimport numpy as np\nv1 = [1, 2, 3]\nv2 = [4, 5, 6]\nnp.dot(v1, v2)\n```", "```py\n!pip install yfinance\n```", "```py\nimport yfinance as yahoo\nspx_data_frame = yahoo.download(“^GSPC”, “2015-01-01”, “2020-01-01”)\n```", "```py\nspx_data_frame.Close.plot()\n```", "```py\nspx_data_frame.to_csv(“yahoo_spx.csv”)\n```", "```py\n    !pip install quandl\n    ```", "```py\n    import quandl\n    data_frame = quandl.get(“YALE/SPCOMP”)\n    ```", "```py\n    data_frame.head()\n    ```", "```py\n    import quandl\n    import numpy as np\n    from sklearn import preprocessing\n    from sklearn import model_selection\n    data_frame = quandl.get(“YALE/SPCOMP”, \\\n                            start_date=”1950-01-01”, \\\n                            end_date=”2019-12-31”)\n    ```", "```py\n    data_frame.head()\n    ```", "```py\n    data_frame = data_frame[['Long Interest Rate', \\\n                             'Real Price', 'Real Dividend']]\n    data_frame\n    ```", "```py\n    data_frame.fillna(method='ffill', inplace=True)\n    data_frame\n    ```", "```py\n    data_frame['Real Price Label'] = data_frame['Real Price'].shift(-3)\n    data_frame\n    ```", "```py\n    features = np.array(data_frame.drop('Real Price Label', 1))\n    scaled_features = preprocessing.scale(features)\n    scaled_features\n    ```", "```py\n    array([[-1.14839975, -1.13009904, -1.19222544],\n           [-1.14114523, -1.12483455, -1.18037146],\n           [-1.13389072, -1.12377394, -1.17439424],\n           ...,\n           [-1.360812  ,  2.9384288 ,  3.65260385],\n           [-1.32599032,  3.12619329,  3.65260385],\n           [-1.29116864,  3.30013894,  3.65260385]])\n    ```", "```py\n    scaled_features_latest_3 = scaled_features[-3:]\n    scaled_features = scaled_features[:-3]\n    scaled_features\n    ```", "```py\n    array([[-1.14839975, -1.13009904, -1.19222544],\n           [-1.14114523, -1.12483455, -1.18037146],\n           [-1.13389072, -1.12377394, -1.17439424],\n           ...,\n           [-1.38866935,  2.97846643,  3.57443947],\n           [-1.38866935,  2.83458633,  3.6161088 ],\n           [-1.36429417,  2.95488131,  3.65260385]])\n    ```", "```py\n    data_frame.dropna(inplace=True)\n    data_frame\n    ```", "```py\n    label = np.array(data_frame['Real Price Label'])\n    label\n    ```", "```py\n    from sklearn import model_selection\n    (features_train, features_test, \\\n    label_train, label_test) = model_selection\\\n                               .train_test_split(scaled_features, \\\n                                                 label, test_size=0.1, \\\n                                                 random_state=8)\n    ```", "```py\nfrom sklearn import linear_model\nmodel = linear_model.LinearRegression()\nmodel.fit(features_train, label_train)\n```", "```py\nlabel_predicted = model.predict(features_test)\nmodel.score(features_test, label_test)\n```", "```py\n0.9847223874806746\n```", "```py\nlabel_predicted = model.predict(scaled_features_latest_3) \n```", "```py\narray ([3046.2347327, 3171.47495182, 3287.48258298])\n```", "```py\n    import numpy as np\n    from matplotlib import pyplot as plot\n    ```", "```py\n    x1 = np.array(range(1, 14))\n    y1 = np.array([2, 8, 8, 18, 25, 21, 32, \\\n                   44, 32, 48, 61, 45, 62])\n    ```", "```py\n    x2 = np.array(range(1, 14))\n    y2 = np.array([0, 1, 1, 2, 3, 5, 8, 13, \\\n                   21, 34, 55, 89, 144])\n    ```", "```py\n    f1 = np.poly1d(np.polyfit(x1, y1, 1))\n    f2 = np.poly1d(np.polyfit(x1, y1, 2))\n    f3 = np.poly1d(np.polyfit(x1, y1, 3))\n    ```", "```py\n    poly1d([ 4.85714286, -2.76923077])\n    ```", "```py\n    poly1d([-0.03196803, 5.3046953, -3.88811189])\n    ```", "```py\n    poly1d([-0.01136364, 0.20666833, -3.91833167, -1.97902098])\n    ```", "```py\n    import matplotlib.pyplot as plot\n    plot.plot(x1, y1, 'ko', # black dots \\\n              x1, f1(x1),'k-',  # straight line \\\n              x1, f2(x1),'k--',  # black dashed line \\\n              x1, f3(x1),'k-.' # dot line\n    )\n    plot.show()\n    ```", "```py\n    g1 = np.poly1d(np.polyfit(x2, y2, 1))\n    g2 = np.poly1d(np.polyfit(x2, y2, 2))\n    g3 = np.poly1d(np.polyfit(x2, y2, 3))\n    ```", "```py\n    poly1d([ 9.12087912, -34.92307692])\n    ```", "```py\n    poly1d([ 1.75024975, -15.38261738, 26.33566434])\n    ```", "```py\n    poly1d([ 0.2465035, -3.42632368, 14.69080919, -15.07692308])\n    ```", "```py\n    plot.plot(x2, y2, 'ko', # black dots \\\n              x2, g1(x2),'k-',  # straight line \\\n              x2, g2(x2),'k--',  # black dashed line \\\n              x2, g3(x2),'k-.' # dot line\n    )\n    plot.show()\n    ```", "```py\n!pip install quandl\nimport quandl\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import linear_model\nfrom matplotlib import pyplot as plot\nfrom sklearn.preprocessing import PolynomialFeatures\ndata_frame = quandl.get(“YALE/SPCOMP”, \\\n                        start_date=”1950-01-01”, \\\n                        end_date=”2019-12-31”)\ndata_frame = data_frame[['Long Interest Rate', \\\n                         'Real Price', 'Real Dividend']]\ndata_frame.fillna(method='ffill', inplace=True)\ndata_frame['Real Price Label'] = data_frame['Real Price'].shift(-3)\nfeatures = np.array(data_frame.drop('Real Price Label', 1))\nscaled_features = preprocessing.scale(features)\nscaled_features_latest_3 = scaled_features[-3:]\nscaled_features = scaled_features[:-3]\ndata_frame.dropna(inplace=True)\nlabel = np.array(data_frame['Real Price Label'])\n```", "```py\npoly_regressor = PolynomialFeatures(degree=3)\npoly_scaled_features = poly_regressor.fit_transform(scaled_features)\npoly_scaled_features\n```", "```py\narray([[ 1\\.        , -1.14839975, -1.13009904, ..., -1.52261953,\n        -1.60632446, -1.69463102],\n       [ 1\\.        , -1.14114523, -1.12483455, ..., -1.49346824,\n        -1.56720585, -1.64458414],\n       [ 1\\.        , -1.13389072, -1.12377394, ..., -1.48310475,\n        -1.54991107, -1.61972667],\n       ...,\n       [ 1\\.        , -1.38866935,  2.97846643, ..., 31.70979016,\n        38.05472653, 45.66924612],\n       [ 1\\.        , -1.38866935,  2.83458633, ..., 29.05499915,\n        37.06573938, 47.28511704],\n       [ 1\\.        , -1.36429417,  2.95488131, ..., 31.89206605,\n        39.42259303, 48.73126873]])\n```", "```py\n(poly_features_train, poly_features_test, \\\npoly_label_train, poly_label_test) = \\\nmodel_selection.train_test_split(poly_scaled_features, \\\n                                 label, test_size=0.1, \\\n                                 random_state=8)\n```", "```py\nmodel = linear_model.LinearRegression()\nmodel.fit(poly_features_train, poly_label_train)\nmodel.score(poly_features_test, poly_label_test)\n```", "```py\n0.988000620369118\n```", "```py\nimport quandl\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import linear_model\nfrom matplotlib import pyplot as plot\n\ndata_frame = quandl.get(“YALE/SPCOMP”, \\\n                        start_date=”1950-01-01”, \\\n                        end_date=”2019-12-31”)\ndata_frame = data_frame[['Long Interest Rate', \\\n                         'Real Price', 'Real Dividend']]\ndata_frame.fillna(method='ffill', inplace=True)\ndata_frame['Real Price Label'] = data_frame['Real Price'].shift(-3)\nfeatures = np.array(data_frame.drop('Real Price Label', 1))\nscaled_features = preprocessing.scale(features)\nscaled_features_latest_3 = scaled_features[-3:]\nscaled_features = scaled_features[:-3]\ndata_frame.dropna(inplace=True)\nlabel = np.array(data_frame['Real Price Label'])\n(features_train, features_test, label_train, label_test) = \\\nmodel_selection.train_test_split(scaled_features, label, \\\n                                 test_size=0.1, \\\n                                 random_state=8)\n```", "```py\nfrom sklearn import svm\nmodel = svm.SVR()\nmodel.fit(features_train, label_train)\n```", "```py\nlabel_predicted = model.predict(features_test)\nmodel.score(features_test, label_test)\n```", "```py\n0.03262153550014424\n```", "```py\nmodel = svm.SVR(kernel='poly') \nmodel.fit(features_train, label_train) \nlabel_predicted = model.predict(features_test) \nmodel.score(features_test, label_test)\n```", "```py\n0.44465054598560627\n```"]