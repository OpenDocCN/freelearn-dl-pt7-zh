["```py\n    openai\n    PyPDF2\n    requests\n    ```", "```py\n    import functions_framework\n    from openai import OpenAI\n    from PyPDF2 import PdfReader\n    import io\n    import requests\n    @functions_framework.http\n    def get_answer_from_pdf(request):\n    request_json = request.get_json(silent=True)\n    pdf_url = request_json['pdf_url']\n      question = request_json['question']\n      client = OpenAI(api_key = '<API-key here>')\n      # Send a GET request to the URL\n      response = requests.get(pdf_url, stream=True)\n    response.raise_for_status()  # Ensure the request was successful\n      # save text\n      text = ''\n      # Create a PDF reader object using the byte stream from the response\n      with io.BytesIO(response.content) as pdf_file:\n    pdf_reader = PdfReader(pdf_file)\n        # Iterate over each page and print the text\n        for page_num in range(len(pdf_reader.pages)):\n          page = pdf_reader.pages[0]\n          text = text + page.extract_text()\n      response = client.chat.completions.create(\n      model=\"gpt-4\",\n      messages=[\n        {\n          \"role\": \"system\",\n          \"content\": \"You are a helpful assistant that goes through text file and answers questions\"\n        },\n        {\n          \"role\": \"user\",\n          \"content\": '\\n\\n TEXT: ' + text + ' \\n\\n QUESTION: ' + question\n        }\n      ],\n      temperature=0.64,\n    max_tokens=1000,\n    top_p=1,\n    frequency_penalty=0,\n    presence_penalty=0\n      )\n      answer = response.choices[0].message.content\n      result = {\n        'answer': answer\n      }\n      return result\n    ```", "```py\n    {\n        \"pdf_url\": \"https://bookpackt67.blob.core.windows.net/test/XDroneManual.pdf?sp=r&st=2024-01-12T00:52:16Z&se=2024-12-31T08:52:16Z&spr=https&sv=2022-11-02&sr=b&sig=IEXLlGXVXCilEg0ffqW8ItXc4LX2YkbRWuZIpSxfP8Y%3D\",\n        \"question\": \"for safety, what's the highest you should fly the drone?\"\n    }\n    ```", "```py\n  # Send a GET request to the URL\n  response = requests.get(pdf_url, stream=True)\nresponse.raise_for_status()  # Ensure the request was successful\n```", "```py\n  # save text\n  text = ''\n  # Create a PDF reader object using the byte stream from the response\n  with io.BytesIO(response.content) as pdf_file:\npdf_reader = PdfReader(pdf_file)\n    # Iterate over each page and print the text\n    for page_num in range(len(pdf_reader.pages)):\n      page = pdf_reader.pages[0]\n      text = text + page.extract_text()\n```", "```py\n  response = client.chat.completions.create(\n  model=\"gpt-4\",\n  messages=[\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful assistant that goes through text file and answers questions\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": '\\n\\n TEXT: ' + text + ' \\n\\n QUESTION: ' + question\n    }\n  ],\n  temperature=0.64,\nmax_tokens=1000,\ntop_p=1,\nfrequency_penalty=0,\npresence_penalty=0\n  )\n  answer = response.choices[0].message.content\n```", "```py\n    openai\n    ```", "```py\n    import functions_framework\n    import time\n    from openai import OpenAI\n    @functions_framework.http\n    def get_answer(request):\n      # declare assistant id\n    assistant_id = '<assistant-id-here>'\n      # get inputs\n    request_json = request.get_json(silent=True)\n      question = request_json['question']\n      # initializeopenai\n      client = OpenAI(api_key = '<api-key here>')\n      # create a thread\n      thread = client.beta.threads.create()\n      # create message question in thread\n      message = client.beta.threads.messages.create(\n    thread_id=thread.id,\n        role=\"user\",\n        content=question\n        )\n      # run assistant\n      run = client.beta.threads.runs.create(\n    thread_id=thread.id,\n    assistant_id=assistant_id,\n      instructions=\"\"\n      )\n      # wait 30 seconds for response\n    time.sleep(30)\n      # get answer\n    thread_messages = client.beta.threads.messages.list(thread.id)\n      answer = thread_messages.data[0].content[0].text.value\n      # return answer\n      result = {\n        'answer': answer\n      }\n      return result\n    ```", "```py\n    {\n        \"question\": \"How many senators are there?\"\n    }\n    ```", "```py\n    The Senate of the United States shall be composed of two Senators from each state, and each Senator shall have one vote.\n    ```", "```py\n# create a thread\n  thread = client.beta.threads.create()\n# create message question in thread\nmessage = client.beta.threads.messages.create(\nthread_id=thread.id,\n    role=\"user\",\n    content=question\n    )\n```", "```py\n# run assistant\nrun = client.beta.threads.runs.create(\nthread_id=thread.id,\nassistant_id=assistant_id,\n  instructions=\"\"\n  )\n# wait 30 seconds for response\ntime.sleep(30)\n```", "```py\n# get answer\nthread_messages = client.beta.threads.messages.list(thread.id)\n  answer = thread_messages.data[0].content[0].text.value\n# return answer\nresult = {\n    'answer': answer\n  }\n```"]