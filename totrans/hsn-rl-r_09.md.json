["```py\nInitialize\n   arbitrary action-value function\nRepeat (for each episode)\n   Initialize s\n   choose a from s using policy from action-value function\n   Repeat (for each step in episode)\n      take action a\n      observe r, s'\n     choose a' from s' using policy from action-value function\n      update action-value function\n      update s,a\n```", "```py\nInitialize\n   arbitrary action-value function\nRepeat (for each episode)\n   Initialize s\n   choose a from s using policy from action-value function\n   Repeat (for each step in episode)\n      take action a\n      observe r, s'\n      update action-value function\n      update s\n```", "```py\nlibrary(igraph)\nGraph1 <- graph(edges=c(1,2, 2,3, 3, 1, 3,4), n=4, directed=F)\n```", "```py\nplot(Graph1)\n```", "```py\nGraph1\n```", "```py\nIGRAPH 143ffd1 U--- 4 4 --\n+ edges from 143ffd1:\n[1] 1--2 2--3 1--3 3--4\n```", "```py\nget.shortest.paths(Graph1, 1, 4)\n```", "```py\n$vpath\n$vpath[[1]]\n+ 3/4 vertices, from 1b5d9f3:\n[1] 1 3 4\n```", "```py\ndistances(Graph1, 1, 4)\n```", "```py\n[1,]    2\n```", "```py\nWeightsGraph1<- c(1,1,4,1)\nE(Graph1)$weight <- WeightsGraph1\n```", "```py\nget.shortest.paths(Graph1, 1, 4)\n```", "```py\n$vpath\n$vpath[[1]]\n+ 4/4 vertices, from 1b5d9f3:\n[1] 1 2 3 4\n```", "```py\ndistances(Graph1, 1, 4)\n```", "```py\n[1,]    3\n```", "```py\nN <- 1000\ngamma <- 0.9\nalpha <- 1\nFinalState <- 6\n\nRMatrix <- matrix(c(-1,50,1,-1,-1,-1,\n                      -1,-1,-1,1,50,-1,\n                      -1,-1,-1,1,-1,-1,\n                      -1,-1,-1,-1,-1,100,\n                      -1,-1,-1,50,-1,-1,\n                      -1,-1,-1,-1,-1,100),nrow=6,byrow = TRUE)\n\nprint(RMatrix)\n\nQMatrix <- matrix(rep(0,length(RMatrix)), nrow=nrow(RMatrix))\n\nfor (i in 1:N) {\n  CurrentState <- sample(1:nrow(RMatrix), 1)\n repeat {\n    AllNS <- which(RMatrix[CurrentState,] > -1)\n    if (length(AllNS)==1)\n      NextState <- AllNS\n    else\n      NextState <- sample(AllNS,1)\n    QMatrix[CurrentState,NextState] <- QMatrix[CurrentState,NextState] + alpha*(RMatrix[CurrentState,NextState] + gamma*max(QMatrix[NextState, which(RMatrix[NextState,] > -1)]) - QMatrix[CurrentState,NextState])\n\n    if (NextState == FinalState) break\n    CurrentState <- NextState\n  }\n}\n\nprint(QMatrix)\n```", "```py\nN <- 1000\ngamma <- 0.9\nalpha <- 1\nFinalState <- 6\n```", "```py\nRMatrix <- matrix(c(-1,50,1,-1,-1,-1,\n                      -1,-1,-1,1,50,-1,\n                      -1,-1,-1,1,-1,-1,\n                      -1,-1,-1,-1,-1,100,\n                      -1,-1,-1,50,-1,-1,\n                      -1,-1,-1,-1,-1,100),nrow=6,byrow = TRUE)\n```", "```py\nprint(RMatrix)\n```", "```py\n [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]   -1   50    1   -1   -1   -1\n[2,]   -1   -1   -1    1   50   -1\n[3,]   -1   -1   -1    1   -1   -1\n[4,]   -1   -1   -1   -1   -1  100\n[5,]   -1   -1   -1   50   -1   -1\n[6,]   -1   -1   -1   -1   -1  100\n```", "```py\nInitialize\n   arbitrary action-value function\nRepeat (for each episode)\n   Initialize s\n   choose a from s using policy from action-value function\n   Repeat (for each step in episode)\n      take action a\n      observe r, s'\n      update action-value function\n      update s\n```", "```py\n  QMatrix <- matrix(rep(0,length(RMatrix)), nrow=nrow(RMatrix))\n```", "```py\nfor (i in 1:N) {\n```", "```py\n  CurrentState <- sample(1:nrow(RMatrix), 1)\n```", "```py\n  repeat {\n```", "```py\n    AllNS <- which(RMatrix[CurrentState,] > -1)\n    if (length(AllNS)==1)\n      NextState <- AllNS\n    else\n      NextState <- sample(AllNS,1)\n```", "```py\n    QMatrix[CurrentState,NextState] <- QMatrix[CurrentState,NextState] + alpha*(RMatrix[CurrentState,NextState] + gamma*max(QMatrix[NextState, which(RMatrix[NextState,] > -1)]) - QMatrix[CurrentState,NextState])\n```", "```py\n    if (NextState == FinalState) break\n    CurrentState <- NextState\n  }\n}\n```", "```py\nprint(QMatrix)\n```", "```py\n [,1]  [,2]  [,3] [,4] [,5] [,6]\n[1,]    0 864.5 811.9    0    0    0\n[2,]    0   0.0   0.0  901  905    0\n[3,]    0   0.0   0.0  901    0    0\n[4,]    0   0.0   0.0    0    0 1000\n[5,]    0   0.0   0.0  950    0    0\n[6,]    0   0.0   0.0    0    0 1000\n```", "```py\nRowMaxPos<-apply(QMatrix, 1, which.max)\nShPath <- list(1)\ni=1\nwhile (i!=6) {\n IndRow<- RowMaxPos[i]\n ShPath<-append(ShPath,IndRow)\n i= RowMaxPos[i]\n}\n\nprint(ShPath)\n```", "```py\n[[1]]\n[1] 1\n[[2]]\n[1] 2\n[[3]]\n[1] 5\n[[4]]\n[1] 4\n[[5]]\n[1] 6\n```", "```py\nN <- 1000\ngamma <- 0.9\nalpha <- 1\nFinalState <- 6\n\nRMatrix <- matrix(c(-1,50,1,-1,-1,-1,\n                      -1,-1,-1,1,50,-1,\n                      -1,-1,-1,1,-1,-1,\n                      -1,-1,-1,-1,-1,100,\n                      -1,-1,-1,50,-1,-1,\n                      -1,-1,-1,-1,-1,100),nrow=6,byrow = TRUE)\n\nprint(RMatrix)\n\nQMatrix <- matrix(rep(0,length(RMatrix)), nrow=nrow(RMatrix))\n\nfor (i in 1:N) {\n  CurrentState <- sample(1:nrow(RMatrix), 1)\n repeat {\n    AllNS <- which(RMatrix[CurrentState,] > -1)\n    if (length(AllNS)==1)\n      NextState <- AllNS\n    else\n      NextState <- sample(AllNS,1)\n\n    AllNA <- which(RMatrix[NextState,] > -1)\n    if (length(AllNA)==1)\n      NextAction <- AllNA\n    else\n      NextAction <- sample(AllNA,1)\n\n    QMatrix[CurrentState,NextState] <- QMatrix[CurrentState,NextState] + alpha*(RMatrix[CurrentState,NextState] + gamma*QMatrix[NextState,NextAction]  - QMatrix[CurrentState,NextState])\n\n    if (NextState == FinalState) break\n    CurrentState <- NextState\n  }\n}\n\nprint(QMatrix)\n\nRowMaxPos<-apply(QMatrix, 1, which.max)\nShPath <- list(1)\ni=1\nwhile (i!=6) {\n IndRow<- RowMaxPos[i]\n ShPath<-append(ShPath,IndRow)\n i= RowMaxPos[i]\n}\n\nprint(ShPath)\n```", "```py\nN <- 1000\ngamma <- 0.9\nalpha <- 1\nFinalState <- 6\n\nRMatrix <- matrix(c(-1,50,1,-1,-1,-1,\n                      -1,-1,-1,1,50,-1,\n                      -1,-1,-1,1,-1,-1,\n                      -1,-1,-1,-1,-1,100,\n                      -1,-1,-1,50,-1,-1,\n                      -1,-1,-1,-1,-1,100),nrow=6,byrow = TRUE)\n\nprint(RMatrix)\n```", "```py\nQMatrix <- matrix(rep(0,length(RMatrix)), nrow=nrow(RMatrix))\n\nfor (i in 1:N) {\n  CurrentState <- sample(1:nrow(RMatrix), 1)\n\n repeat {\n    AllNS <- which(RMatrix[CurrentState,] > -1)\n    if (length(AllNS)==1)\n      NextState <- AllNS\n    else\n      NextState <- sample(AllNS,1)\n```", "```py\nInitialize\n   arbitrary action-value function\nRepeat (for each episode)\n   Initialize s\n   choose a from s using policy from action-value function\n   Repeat (for each step in episode)\n      take action a\n      observe r, s'\n      choose a' from s' using policy from action-value function\n      update action-value function\n      update s,a\n```", "```py\nAllNA <- which(RMatrix[NextState,] > -1)\n    if (length(AllNA)==1)\n      NextAction <- AllNA\n    else\n      NextAction <- sample(AllNA,1)\n```", "```py\n     QMatrix[CurrentState,NextState] <- QMatrix[CurrentState,NextState] + alpha*(RMatrix[CurrentState,NextState] + gamma*QMatrix[NextState,NextAction]  - QMatrix[CurrentState,NextState])\n```", "```py\n    if (NextState == FinalState) break\n    CurrentState <- NextState\n  }\n}\n\nprint(QMatrix)\n\nRowMaxPos<-apply(QMatrix, 1, which.max)\nShPath <- list(1)\ni=1\nwhile (i!=6) {\n IndRow<- RowMaxPos[i]\n ShPath<-append(ShPath,IndRow)\n i= RowMaxPos[i]\n}\nprint(ShPath)\n```", "```py\n [,1] [,2] [,3] [,4] [,5]     [,6]\n[1,]    0   50    1    0    0   0.0000\n[2,]    0    0    0    1   50   0.0000\n[3,]    0    0    0    1    0   0.0000\n[4,]    0    0    0    0    0 999.9999\n[5,]    0    0    0   50    0   0.0000\n[6,]    0    0    0    0    0 999.9999\n```", "```py\n[[1]]\n[1] 1\n[[2]]\n[1] 2\n[[3]]\n[1] 5\n[[4]]\n[1] 4\n[[5]]\n[1] 6\n```"]