["```py\n    documentName = \"bankstatement.png\"\n    display(Image(filename=documentName))\n    ```", "```py\n    client = boto3.client(service_name='textract',\n             region_name= 'us-east-1',\n             endpoint_url='https://textract.us-east-1.amazonaws.com')\n    with open(documentName, 'rb') as file:\n                img_test = file.read()\n                bytes_test = bytearray(img_test)\n                print('Image loaded', documentName)\n    response = client.detect_document_text(Document={'Bytes': bytes_test})\n    print(response)\n    ```", "```py\n    doc = Document(response)\n    page_string = ''\n    for page in doc.pages:\n            for line in page.lines:\n                page_string += str(line.text)\n    print(page_string)\n    ```", "```py\n    `comprehend = boto3.client('comprehend')\n    ```", "```py\n    piilist=comprehend.detect_pii_entities(Text = page_string, LanguageCode='en')\n    redacted_box_color='red'\n    dpi = 72\n    pii_detection_threshold = 0.00\n    print ('Finding PII text...')\n    not_redacted=0\n    redacted=0\n    for pii in piilist['Entities']:\n        print(pii['Type'])\n        if pii['Score'] > pii_detection_threshold:\n                        print (\"detected as type '\"+pii['Type']+\"' and will be redacted.\")\n                        redacted+=1\n\n        else:\n            print (\" was detected as type '\"+pii['Type']+\"', but did not meet the confidence score threshold and will not be redacted.\")\n            not_redacted+=1\n    print (\"Found\", redacted, \"text boxes to redact.\")\n    print (not_redacted, \"additional text boxes were detected, but did not meet the confidence score threshold.\")s3_entity_key = prefix + \"/train/entitylist.csv\"\n    ```", "```py\n    import uuid\n    InputS3URI= \"s3://\"+bucket+ \"/pii-detection-redaction/pii_data.txt\"\n    print(InputS3URI)\n    OutputS3URI=\"s3://\"+bucket+\"/pii-detection-redaction\"\n    print(OutputS3URI)\n    ```", "```py\n    response = comprehend.start_pii_entities_detection_job(\n        InputDataConfig={\n            'S3Uri': InputS3URI,\n            'InputFormat': 'ONE_DOC_PER_FILE'\n        },\n        OutputDataConfig={\n            'S3Uri': OutputS3URI\n\n        },\n        Mode='ONLY_REDACTION',\n        RedactionConfig={\n            'PiiEntityTypes': [\n               'ALL',\n            ],\n            'MaskMode': 'MASK',\n            'MaskCharacter': '*'\n        },\n        DataAccessRoleArn = role,\n        JobName=job_name,\n        LanguageCode='en',   \n    )\n    Mode='ONLY_REDACTION'|'ONLY_OFFSETS',\n        RedactionConfig={\n            'PiiEntityTypes': [\n                'BANK_ACCOUNT_NUMBER'|'BANK_ROUTING'|'CREDIT_DEBIT_NUMBER'|'CREDIT_DEBIT_CVV'|'CREDIT_DEBIT_EXPIRY'|'PIN'|'EMAIL'|'ADDRESS'|'NAME'|'PHONE'|'SSN'|'DATE_TIME'|'PASSPORT_NUMBER'|'DRIVER_ID'|'URL'|'AGE'|'USERNAME'|'PASSWORD'|'AWS_ACCESS_KEY'|'AWS_SECRET_KEY'|'IP_ADDRESS'|'MAC_ADDRESS'|'ALL',\n            ],\n            'MaskMode': 'MASK'|'REPLACE_WITH_PII_ENTITY_TYPE',\n            'MaskCharacter': 'string'\n    ```", "```py\n    from time import sleep\n    job = comprehend.describe_pii_entities_detection_job(JobId=events_job_id)\n    print(job)\n    waited = 0\n    timeout_minutes = 10\n    while job['PiiEntitiesDetectionJobProperties']['JobStatus'] != 'COMPLETED':\n        sleep(60)\n        waited += 60\n        assert waited//60 < timeout_minutes, \"Job timed out after %d seconds.\" % waited\n        job = comprehend.describe_pii_entities_detection_job(JobId=events_job_id)\n    ```", "```py\n    filename=\"pii_data.txt\"\n    s3_client = boto3.client(service_name='s3')\n    output_data_s3_file = job['PiiEntitiesDetectionJobProperties']['OutputDataConfig']['S3Uri'] + filename + '.out'\n    print(output_data_s3_file)\n    output_data_s3_filepath=output_data_s3_file.split(\"//\")[1].split(\"/\")[1]+\"/\"+output_data_s3_file.split(\"//\")[1].split(\"/\")[2]+\"/\"+output_data_s3_file.split(\"//\")[1].split(\"/\")[3]+\"/\"+output_data_s3_file.split(\"//\")[1].split(\"/\")[4]\n    print(output_data_s3_filepath)\n    f = BytesIO()\n    s3_client.download_fileobj(bucket, output_data_s3_filepath, f)\n    f.seek(0)\n    print(f.getvalue())\n    ```"]