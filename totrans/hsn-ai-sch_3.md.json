["```py\n...\n#connections between places\nconnections = {}\nconnections[\"Bus Stop\"] = {\"Library\"}\nconnections[\"Library\"] = {\"Bus Stop\", \"Car Park\", \"Student Center\"}\nconnections[\"Car Park\"] = {\"Library\", \"Maths Building\", \"Store\"}\nconnections[\"Maths Building\"] = {\"Car Park\", \"Canteen\"}\nconnections[\"Student Center\"] = {\"Library\", \"Store\" , \"Theater\"}\nconnections[\"Store\"] = {\"Student Center\", \"Car Park\", \"Canteen\", \"Sports Center\"}\nconnections[\"Canteen\"] = {\"Maths Building\", \"Store\", \"AI Lab\"}\nconnections[\"AI Lab\"] = {\"Canteen\"}\nconnections[\"Theater\"] = {\"Student Center\", \"Sports Center\"}\nconnections[\"Sports Center\"] = {\"Theater\", \"Store\"}\n...\n```", "```py\n...\n#location of all the places\n\nlocation = {}\nlocation[\"Bus Stop\"] = [2, 8]\nlocation[\"Library\"] = [4, 8]\nlocation[\"Car Park\"] = [1, 4]\nlocation[\"Maths Building\"] = [4, 1]\nlocation[\"Student Center\"] = [6, 8]\nlocation[\"Store\"] = [6, 4]\nlocation[\"Canteen\"] = [6, 1]\nlocation[\"AI Lab\"] = [6, 0]\nlocation[\"Theater\"] = [7, 7]\nlocation[\"Sports Center\"] = [7, 5]\n...\n```", "```py\n...\nimport Queue\n\npqueue = Queue.PriorityQueue()\nprint pqueue.qsize()\n\npqueue.put((5, 'A'))\npqueue.put((10, 'B'))\npqueue.put((1, 'C'))\npqueue.put((5, 'D'))\n\nprint pqueue.qsize()\n\nwhile not pqueue.empty(): \n    print pqueue.get()\n\nprint pqueue.qsize()\n...\n```", "```py\n...\nimport pydot \nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n\n#create graph object\ngraph = pydot.Dot(graph_type='graph', dpi = 300)\n\n#create and add root node\nrootNode = pydot.Node(\"0 Root\", style=\"filled\", fillcolor = \"#00ee11\", xlabel = \"0\")\ngraph.add_node(rootNode)\n...\n```", "```py\n...\nrootNode = pydot.Node(\"0 Root\", style=\"filled\", fillcolor = \"#00ee11\", xlabel = \"0\")\ngraph.add_node(rootNode)\n\nfor i in range(3):\n    #create node and add node\n    childNode = pydot.Node(\"%d Child\" % (i+1), style=\"filled\", \\\n        fillcolor = \"#ee0011\", xlabel = \"1\")\n    graph.add_node(childNode)\n\n    #create edge between two nodes\n    edge = pydot.Edge(rootNode, childNode)    \n    #add the edge to graph\n    graph.add_edge(edge)\n...\n```", "```py\n...\n#show the diagram\ngraph.write_png('graph.png')\nimg=mpimg.imread('graph.png')\nplt.imshow(img)\nplt.axis('off')\nmng = plt.get_current_fig_manager()\nmng.window.state('zoomed')\nplt.show()\n...\n```", "```py\n...\nfor i in range(3):\n    #create node and add node\n    childNode = pydot.Node(\"%d Child\", style=\"filled\", \\\n        fillcolor = \"#ee0011\", xlabel = \"1\")\n    graph.add_node(childNode)\n...\n```", "```py\n...\n def __init__(self, state, parentNode):\n        \"\"\"\n        Constructor\n        \"\"\"\n        self.state = state\n        self.depth = 0\n        self.children = []\n        #self.parent = None\n        self.setParent(parentNode)\n        self.fringe = True\n        #self.heuristic\n        self.computeHeuristic()\n\n    def setParent(self, parentNode):\n        \"\"\"\n        This method adds a node under another node\n        \"\"\"\n        if parentNode != None:\n            parentNode.children.append(self)\n            self.parent = parentNode\n            self.depth = parentNode.depth + 1\n        else:\n            self.parent = None\n...\n```", "```py\n...\ndef computeHeuristic(self):\n        \"\"\"\n        This function computes the heuristic value of node\n        \"\"\"\n        #find the distance of this state to goal state\n\n        #goal location\n        goalLocation = location[\"AI Lab\"]\n        #current location\n        currentLocation = location[self.state.place]\n        #difference in x coordinates\n        dx = goalLocation[0] - currentLocation[0]\n        #difference in y coordinates\n        dy = goalLocation[1] - currentLocation[1]\n   ...\n```", "```py\n...\nclass TreePlot:\n    \"\"\"\n    This class creates tree plot for search tree\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Constructor\n        \"\"\"\n        # create graph object\n        self.graph = pydot.Dot(graph_type='graph', dpi = 500)\n        #index of node\n        self.index = 0\n\n    def createGraph(self, node, currentNode):\n        \"\"\"\n        This method adds nodes and edges to graph object\n        Similar to printTree() of Node class\n        \"\"\"\n\n        # assign hex color\n        if node.state.place == currentNode.state.place:\n            color = \"#ee0011\"\n        elif node.fringe:\n            color = \"#0011ee\"\n        else:\n            color = \"#00ee11\"\n...\n```", "```py\n... \n#create node\n        parentGraphNode = pydot.Node(str(self.index) + \" \" + \\\n            node.state.place, style=\"filled\", \\\n            fillcolor = color, xlabel = node.heuristic)\n        self.index += 1\n#add node\n        self.graph.add_node(parentGraphNode)\n...\n```", "```py\n...\n#call this method for child nodes\n        for childNode in node.children:\n            childGraphNode = self.createGraph(childNode, currentNode)\n\n            #create edge\n            edge = pydot.Edge(parentGraphNode, childGraphNode)\n\n            #add edge\n            self.graph.add_edge(edge)\n\n        return parentGraphNode\n...\n```", "```py\n... \ndef generateDiagram(self, rootNode, currentNode):\n        \"\"\"\n        This method generates diagram\n        \"\"\"\n        #add nodes to edges to graph\n        self.createGraph(rootNode, currentNode)\n\n        #show the diagram\n        self.graph.write_png('graph.png')\n        img=mpimg.imread('graph.png')\n        plt.imshow(img)\n        plt.axis('off')\n        mng = plt.get_current_fig_manager()\n        mng.window.state('zoomed')\n        plt.show()\n...\n```", "```py\n...\nfrom Node import Node\nfrom State import State\nfrom TreePlot import TreePlot\n\ninitialState = State()\nroot = Node(initialState)\n\nchildStates = initialState.successorFunction()\nfor childState in childStates:\n    childNode = Node(State(childState))\n    root.addChild(childNode)\n\ntreeplot = TreePlot()\ntreeplot.generateDiagram(root, root)\n...\n```", "```py\n...\n#connections between places\nconnections = {}\nconnections[\"Bus Stop\"] = {\"Library\"}\nconnections[\"Library\"] = {\"Bus Stop\", \"Car Park\", \"Student Center\"}\nconnections[\"Car Park\"] = {\"Library\", \"Maths Building\", \"Store\"}\nconnections[\"Maths Building\"] = {\"Car Park\", \"Canteen\"}\nconnections[\"Student Center\"] = {\"Library\", \"Store\" , \"Theater\"}\n...\n```", "```py\n...\ndef computeHeuristic(self):\n        \"\"\"\n        This function computes the heuristic value of node\n        \"\"\"\n        #find the distance of this state to goal state\n\n        #goal location\n        goalLocation = location[\"AI Lab\"]\n        #current location\n        currentLocation = location[self.state.place]\n        #difference in x coordinates\n        dx = goalLocation[0] - currentLocation[0]\n        #difference in y coordinates\n        dy = goalLocation[1] - currentLocation[1]\n        #distance\n        distance = math.sqrt(dx ** 2 + dy ** 2)\n        print \"heuristic for\", self.state.place, \"=\", distance\n        self.heuristic = distance\n...\n```", "```py\n...\ndef performGreedySearch():\n    \"\"\"\n    This method performs greedy best first search\n    \"\"\"\n\n    #create queue\n    pqueue = Queue.PriorityQueue()\n\n    #create root node\n    initialState = State()\n    #parent node of root is None\n    root = Node(initialState, None)\n\n    #show the search tree explored so far\n    treeplot = TreePlot()\n    treeplot.generateDiagram(root, root)\n\n    #add to priority queue\n    pqueue.put((root.heuristic, root))\n        while not pqueue.empty(): \n\n        #get front node from the priority queue\n        _, currentNode = pqueue.get()\n\n        #remove from the fringe\n        #currently selected for exploration\n        currentNode.fringe = False\n\n        print \"-- current --\", currentNode.state.place\n\n...\n```", "```py\n...\n#check if this is goal state\n        if currentNode.state.checkGoalState():\n            print \"reached goal state\"\n            #print the path\n            print \"----------------------\"\n            print \"Path\"\n            currentNode.printPath()\n\n            #show the search tree explored so far\n            treeplot = TreePlot()\n            treeplot.generateDiagram(root, currentNode)\n            break\n#get the child nodes \n        childStates = currentNode.state.successorFunction()\n        for childState in childStates:\n\n            #create node \n            #and add to tree\n            childNode = Node(State(childState), currentNode)\n\n            #add to priority queue\n            pqueue.put((childNode.heuristic, childNode))\n\n        #show the search tree explored so far\n        treeplot = TreePlot()\n        treeplot.generateDiagram(root, currentNode)\n...\n```", "```py\n...\ndef computeDistance(self, location1, location2):\n        \"\"\"\n        This method computes distance between two places\n        \"\"\"\n        #difference in x coordinates\n        dx = location1[0] - location2[0]\n        #difference in y coordinates\n        dy = location1[1] - location2[1]\n        #distance\n        distance = math.sqrt(dx ** 2 + dy ** 2)\n        return distance\n...\n```", "```py\n...\ndef computeCost(self):\n        \"\"\"\n        This method computes distance of current node from root node\n        \"\"\"\n\n        if self.parent != None:\n            #find distance from current node to parent\n            distance = self.computeDistance(location[self.state.place], \\\n                location[self.parent.state.place])\n            #cost = parent cost + distance\n            self.costFromRoot = self.parent.costFromRoot + distance\n        else:\n            self.costFromRoot = 0\n...\n```", "```py\n...\ndef computeHeuristic(self):\n        \"\"\"\n        This function computes the heuristic value of node\n        \"\"\"\n\n        #find the distance of this state from goal state\n        goalLocation = location[\"AI Lab\"]\n        currentLocation = location[self.state.place]\n        distanceFromGoal = self.computeDistance(goalLocation,  \n        currentLocation)\n\n        #add them up to form heuristic value\n        heuristic = self.costFromRoot + distanceFromGoal\n\n        print \"heuristic for\", self.state.place, \"=\", \n        self.costFromRoot, distanceFromGoal, heuristic\n        self.heuristic = heuristic\n...\n```", "```py\n...\ndef performAStarSearch():\n    \"\"\"\n    This method performs A* Search\n    \"\"\"\n\n    #create queue\n    pqueue = Queue.PriorityQueue()\n\n    #create root node\n    initialState = State()\n    root = Node(initialState, None)\n\n    #show the search tree explored so far\n    treeplot = TreePlot()\n    treeplot.generateDiagram(root, root)\n\n    #add to priority queue\n    pqueue.put((root.heuristic, root))\n...\n```", "```py\nx2 < x1 \n```", "```py\nx2 =100 \nx1= 101 \nd12 >= 1 \n```", "```py\nh(1) =TC1 + x1 \n```", "```py\nh(2) = TC1 + d12 + x2 \n```"]