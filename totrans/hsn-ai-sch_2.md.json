["```py\n...\nfrom GraphData import *\nclass State:\n    '''\n    This class retrieves state information for social connection    \n    feature\n    '''\n\n    def __init__(self, name = None):\n        if name == None:\n            #create initial state\n            self.name = self.getInitialState()\n        else:\n            self.name = name\n\n    def getInitialState(self):\n        \"\"\"\n        This method returns me.\n        \"\"\"\n        initialState = \"Dev\"\n        return initialState\n   def successorFunction(self):\n        \"\"\"\n        This is the successor function. It finds all the persons     \n        connected to the current person\n        \"\"\"\n        return connections[self.name]\n...\n```", "```py\n    def checkGoalState(self):\n        \"\"\"\n        This method checks whether the person is Jill.\n        \"\"\" \n        #check if the person's name is Jill\n        return self.name == \"Jill\"\n```", "```py\n...\n#create a dictionary with all the mappings\nconnections = {}\nconnections[\"Dev\"] = {\"Ali\", \"Seth\", \"Tom\"}\nconnections[\"Ali\"] = {\"Dev\", \"Seth\", \"Ram\"}\nconnections[\"Seth\"] = {\"Ali\", \"Tom\", \"Harry\"}\nconnections[\"Tom\"] = {\"Dev\", \"Seth\", \"Kai\", 'Jill'}\nconnections[\"Ram\"] = {\"Ali\", \"Jill\"}\nconnections[\"Kai\"] = {\"Tom\"}\nconnections[\"Mary\"] = {\"Jill\"}\nconnections[\"Harry\"] = {\"Seth\"}\nconnections[\"Jill\"] = {\"Ram\", \"Tom\", \"Mary\"}\n...\n```", "```py\n... \ndef successorFunction(self):\n        \"\"\"\n        This is the successor function. It finds all the persons   \n        connected to the current person\n        \"\"\"\n        return connections[self.name]\n...\n```", "```py\n...\nfrom collections import deque\n\nqueue = deque([])\nprint queue\n\nqueue.append(\"1\") \nqueue.append(\"2\") \nqueue.append(\"3\") \nqueue.append(\"4\") \n\nprint queue\n...\n```", "```py\n...\ndef performQueueBFS():\n    \"\"\"\n    This function performs BFS search using a queue\n    \"\"\"\n    #create queue\n    queue = deque([])\n\n    #since it is a graph, we create visited list\n    visited = []\n\n    #create root node\n    initialState = State()\n    root = Node(initialState)\n    #add to queue and visited list\n    queue.append(root) \n    visited.append(root.state.name)\n...\n```", "```py\n...   \n        while len(queue) > 0:\n\n        #get first item in queue\n        currentNode = queue.popleft()\n\n        print \"-- dequeue --\", currentNode.state.name\n\n        #check if this is goal state\n        if currentNode.state.checkGoalState():\n            print \"reached goal state\"\n            #print the path\n            print \"----------------------\"\n            print \"Path\"\n            currentNode.printPath()\n            break\n...\n```", "```py\n visited.append(root.state.name)\n```", "```py\n...\n#check if node is not visited\n            if childNode.state.name not in visited:\n\n                #add this node to visited nodes\n                visited.append(childNode.state.name)\n\n                #add to tree and queue\n                currentNode.addChild(childNode)\n                queue.append(childNode)\n\n    #print tree\n    print \"----------------------\"\n    print \"Tree\"\n    root.printTree()\n...\n```"]