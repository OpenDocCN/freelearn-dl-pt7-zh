["```py\n    import pandas as pd\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/'\\\n               'The-Applied-Artificial-Intelligence-Workshop/'\\\n               'master/Datasets/german_credit.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    df.head()\n    ```", "```py\n    df.tail()\n    ```", "```py\n    df.dtypes\n    ```", "```py\n    df.fillna(-1000000, inplace=True)\n    ```", "```py\n    df.drop(['telephone'], 1, inplace=True)\n    ```", "```py\n    from sklearn import preprocessing\n    import numpy as np\n    data = np.array([[19, 65], \\\n                     [4, 52], \\\n                     [2, 33]])\n    preprocessing.MinMaxScaler(feature_range=(0,1)).fit_transform(data)\n    ```", "```py\n    array([[1\\.        , 1\\.        ],\n           [0.11764706, 0.59375   ],\n           [0\\.        , 0\\.        ]])\n    ```", "```py\n    preprocessing.Binarizer(threshold=10).transform(data)\n    ```", "```py\n    array([[1, 1],\n           [0, 1],\n           [0, 1]])\n    ```", "```py\nfrom sklearn import preprocessing\nlabels = ['Monday', 'Tuesday', 'Wednesday', \\\n          'Thursday', 'Friday']\nlabel_encoder = preprocessing.LabelEncoder()\nlabel_encoder.fit(labels)\n```", "```py\n[x for x in enumerate(label_encoder.classes_)]\n```", "```py\n[(0, 'Friday'),\n (1, 'Monday'),\n (2, 'Thursday'),\n (3, 'Tuesday'),\n (4, 'Wednesday')]\n```", "```py\nlabel_encoder.transform(['Wednesday', 'Friday'])\n```", "```py\narray([4, 0], dtype=int64)\n```", "```py\nlabel_encoder.inverse_transform([0, 4])\n```", "```py\narray(['Friday', 'Wednesday'], dtype='<U9')\n```", "```py\n    import pandas as pd\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/'\\\n               'The-Applied-Artificial-Intelligence-Workshop/'\\\n               'master/Datasets/german_credit.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    from sklearn import preprocessing\n    ```", "```py\n    def fit_encoder(dataframe, column):\n        encoder = preprocessing.LabelEncoder()\n        encoder.fit(dataframe[column].unique())\n        return encoder\n    ```", "```py\n    def encode(dataframe, column, encoder):\n        return encoder.transform(dataframe[column])\n    ```", "```py\n    cat_df = df.select_dtypes(exclude='number')\n    cat_df.head()\n    ```", "```py\n    cat_cols = cat_df.columns\n    cat_cols\n    ```", "```py\n    Index(['account_check_status', 'credit_history', 'purpose', \n           'savings', 'present_emp_since', 'other_debtors', \n           'property', 'other_installment_plans', 'housing', \n           'job', 'telephone', 'foreign_worker'], dtype='object')\n    ```", "```py\n    for col in cat_cols:\n        label_encoder = fit_encoder(df, col)\n        df[col] = encode(df, col, label_encoder)\n    ```", "```py\n    df.head()\n    ```", "```py\nlabel = df.pop('default')\nlabel\n```", "```py\n0      0\n1      1\n2      0\n3      0\n4      1\n      ..\n995    0\n996    0\n997    0\n998    1\n999    0\nName: default, Length: 1000, dtype: int64\n```", "```py\ndf.columns\n```", "```py\nIndex(['account_check_status', 'duration_in_month',\n       'credit_history', 'purpose', 'credit_amount',\n       'savings', 'present_emp_since',\n       'installment_as_income_perc', 'other_debtors',\n       'present_res_since', 'property', 'age',\n       'other_installment_plans', 'housing', \n       'credits_this_bank', 'job', 'people_under_maintenance',\n       'telephone', 'foreign_worker'],\n      dtype='object')\n```", "```py\nfrom sklearn import model_selection\nfeatures_train, features_test, \\\nlabel_train, label_test = \\\nmodel_selection.train_test_split(df, label, test_size=0.1, \\\n                                 random_state=8)\n```", "```py\nfrom sklearn.metrics.pairwise import euclidean_distances\nobservation = [4,4]\nneighbors = [[2,3], [3,7], [1,6]]\neuclidean_distances([observation], neighbors)\n```", "```py\narray([[2.23606798, 3.16227766, 3.60555128]])\n```", "```py\neuclidean_distances(neighbors)\n```", "```py\narray([[0\\.        , 4.12310563, 3.16227766],\n       [4.12310563, 0\\.        , 2.23606798],\n       [3.16227766, 2.23606798, 0\\.        ]])\n```", "```py\n    import pandas as pd\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/'\\\n               'The-Applied-Artificial-Intelligence-Workshop/'\\\n               'master/Datasets/employees_churned.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    df\n    ```", "```py\n    from sklearn import preprocessing\n    ```", "```py\n    scaler = preprocessing.MinMaxScaler(feature_range=(0,1))\n    ```", "```py\n    scaled_employees = scaler.fit_transform(df)\n    scaled_employees\n    ```", "```py\n    array([[0\\.        , 0.18518519, 0\\.        ],\n           [0.2       , 0\\.        , 0\\.        ],\n           [0.6       , 0.11111111, 0\\.        ],\n           [0.2       , 0.37037037, 0\\.        ],\n           [1\\.        , 0.18518519, 0\\.        ],\n           [1\\.        , 0.62962963, 1\\.        ],\n           [1\\.        , 0.11111111, 1\\.        ],\n           [0.6       , 0.37037037, 1\\.        ],\n           [1\\.        , 1\\.        , 1\\.        ],\n           [0.6       , 0.55555556, 1\\.        ]])\n    ```", "```py\n    hours_worked = scaled_employees[:, 0]\n    salary = scaled_employees[:, 1]\n    over_two_years = scaled_employees[:, 2]\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    plt.scatter(hours_worked[:5], salary[:5], marker='+')\n    plt.scatter(hours_worked[5:], salary[5:], marker='o')\n    plt.xlabel(\"hours_worked\")\n    plt.ylabel(\"salary\")\n    plt.show()\n    ```", "```py\n    + points represent the employees that stayed less than 2 years, while the o ones are for the employees who stayed for more than 2 years. \n    ```", "```py\n    observation = [0.5, 0.26]\n    ```", "```py\n    from sklearn.metrics.pairwise import euclidean_distances\n    ```", "```py\n    features = scaled_employees[:,:2]\n    ```", "```py\n    dist = euclidean_distances([observation], features)\n    dist\n    ```", "```py\n    array([[0.50556627, 0.39698866, 0.17935412, 0.3196586 ,\n            0.50556627, 0.62179262, 0.52169714, 0.14893495,\n            0.89308454, 0.31201456]])\n    ```", "```py\nclassifier = neighbors.KNeighborsClassifier(n_neighbors=50, p=2)\n```", "```py\nclassifier.fit(features, label)\n```", "```py\nclassifier.predict(new_data_point)\n```", "```py\n    import pandas as pd\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/'\\\n               'The-Applied-Artificial-Intelligence-Workshop/'\\\n               'master/Datasets/german_prepared.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    from sklearn import preprocessing\n    ```", "```py\n    scaler = preprocessing.MinMaxScaler(feature_range=(0,1))\n    ```", "```py\n    scaled_credit = scaler.fit_transform(df)\n    ```", "```py\n    label = scaled_credit[:, 0]\n    ```", "```py\n    features = scaled_credit[:, 1:]\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    features_train, features_test, \\\n    label_train, label_test = \\\n    train_test_split(features, label, test_size=0.2, \\\n                     random_state=7)\n    ```", "```py\n    from sklearn import neighbors\n    ```", "```py\n    classifier = neighbors.KNeighborsClassifier()\n    ```", "```py\n    classifier.fit(features_train, label_train)\n    ```", "```py\n    acc_train = classifier.score(features_train, label_train)\n    acc_train\n    ```", "```py\n    0.78625\n    ```", "```py\n    acc_test = classifier.score(features_test, label_test)\n    acc_test\n    ```", "```py\n    0.75\n    ```", "```py\n(0.775, 0.785)\n```", "```py\nnp.sqrt( 3 * 3 + 4 * 4 )\n```", "```py\n5.0\n```", "```py\nnp.arctan(-4/3) / 2 / np.pi * 360\n```", "```py\n-53.13010235415597\n```", "```py\nfeatures_train, features_test, \\\nlabel_train, label_test = \\\nmodel_selection.train_test_split(scaled_features, label,\\\n                                 test_size=0.2)\n```", "```py\nfrom sklearn import svm\nclassifier = svm.SVC()\nclassifier.fit(features_train, label_train)\nclassifier.score(features_test, label_test)\n```", "```py\n0.745\n```", "```py\nclassifier = svm.SVC(kernel=\"poly\", C=2, degree=4, gamma=0.05)\n```", "```py\n(0.78125, 0.775)\n```"]