["```py\n    # Install the Surprise library\n    !pip install scikit-surprise\n    import pandas as pd\n    from surprise import Dataset, Reader, SVD\n    from surprise.model_selection import train_test_split\n    from surprise import accuracy\n    import urllib.request\n    import zipfile\n    import os\n    ```", "```py\n    # Download the MovieLens dataset\n    url = 'https://files.grouplens.org/datasets/movielens/ml-latest-small.zip'\n    urllib.request.urlretrieve(url, 'ml-latest-small.zip')\n    # Unzip the downloaded file\n    with zipfile.ZipFile('ml-latest-small.zip', 'r') as zip_ref:\n        zip_ref.extractall()\n    # Full path to the files\n    movies_file = os.path.join('ml-latest-small', 'movies.csv')\n    ratings_file = os.path.join('ml-latest-small', 'ratings.csv')\n    # Load the data\n    movies = pd.read_csv(movies_file)\n    ratings = pd.read_csv(ratings_file)\n    ```", "```py\n    # Prepare the data for the Surprise library\n    reader = Reader(rating_scale=(0.5, 5.0))\n    data = Dataset.load_from_df(\n        ratings[['userId', 'movieId', 'rating']], \n        reader\n    )\n    ```", "```py\n    # Split the data into training and test sets\n    trainset, testset = train_test_split(data, test_size=0.2)\n    ```", "```py\n    # Train the SVD model\n    algo = SVD()\n    algo.fit(trainset)\n    ```", "```py\n    # Make predictions on the test set\n    predictions = algo.test(testset)\n    ```", "```py\n    # Evaluate the model's performance\n    rmse = accuracy.rmse(predictions)\n    mae = accuracy.mae(predictions)\n    print(f'RMSE: {rmse}')\n    print(f'MAE: {mae}')\n    ```", "```py\n    # Function to recommend movies in real-time using SVD model\n    def get_movie_recommendations(\n        algo, \n        movie_title, \n        movies, \n        ratings, \n        num_recommendations=5\n    ):\n    ```", "```py\n    movie_id = (\n        movies[movies['title'] == movie_title]['movieId'].\n        values[0]\n    )\n    ```", "```py\n    users_who_rated_movie = (\n        ratings[ratings['movieId'] == movie_id]['userId']\n        .unique()\n    )\n    ```", "```py\n    other_movie_ids = (\n        ratings[ratings['userId'].isin(users_who_rated_movie)]\n        ['movieId']\n        .unique()\n    )\n    ```", "```py\n    # Predict ratings for all other movies by these users\n    other_movie_ids = (\n        ratings[ratings['userId'].isin(users_who_rated_movie)]\n        ['movieId']\n        .unique()\n    )\n    ```", "```py\n        # Sort by predicted rating\n        predicted_ratings.sort(key=lambda x: x[1], reverse=True)\n    ```", "```py\n    # Get top N movie recommendations\n    top_n_movies = [\n        movie_id \n        for movie_id, rating in predicted_ratings[:num_recommendations]\n    ]\n    ```", "```py\n    # Get movie titles\n    recommended_movie_titles = movies[movies['movieId']\n        .isin(top_n_movies)]['title'].tolist()\n    ```", "```py\n        return recommended_movie_titles\n    ```", "```py\n    # Example usage\n    recommended_movies = get_movie_recommendations(\n        algo, 'Toy Story (1995)', \n        movies, \n        ratings\n    )\n    print(\"Recommended movies for 'Toy Story (1995)':\")\n    print(recommended_movies)\n    ```", "```py\n    RMSE: 0.8745\n    MAE: 0.6728\n    RMSE: 0.8745291344925908\n    MAE: 0.67281523909186\n    ```", "```py\n    ['Shawshank Redemption, The (1994)', 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb (1964)', '12 Angry Men (1957)', 'Cool Hand Luke (1967)', 'Boondock Saints, The (2000)']\n    ```"]