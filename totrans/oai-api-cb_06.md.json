["```py\n    import functions_framework\n    from openai import OpenAI\n    @functions_framework.http\n    def get_message(request):\n        request_json = request.get_json(silent=True)\n        email = request_json['email']\n        client = OpenAI(api_key = '<your-openai-api-key-here>')\n        ### Playground Code Here ###\n        result = {\n            'choice_1': response.choices[0].message.content,\n            'choice_2': response.choices[1].message.content,\n            'choice_3': response.choices[2].message.content,\n        }\n        return result\n    ```", "```py\n    import functions_framework\n    from openai import OpenAI\n    @functions_framework.http\n    def get_message(request):\n        request_json = request.get_json(silent=True)\n        email = request_json['email']\n        client = OpenAI(api_key = '<your-openai-api-key-here>')\n        response = client.chat.completions.create(\n          model=\"gpt-4\",\n          messages=[\n            {\n              \"role\": \"system\",\n              \"content\": \"You are a helpful assistant that creates replies to emails that politely says no to the task you have been asked to perform. Only return the reply to the email, nothing else.\"\n            },\n            {\n              \"role\": \"user\",\n              \"content\": email\n            }\n          ],\n          temperature=1.41,\n          max_tokens=1066,\n          top_p=1,\n          frequency_penalty=0,\n          presence_penalty=0,\n          n=3\n        )\n        result = {\n            'choice_1': response.choices[0].message.content,\n            'choice_2': response.choices[1].message.content,\n            'choice_3': response.choices[2].message.content,\n        }\n        return result\n    ```", "```py\n    {\n    \"email\": \"Hi Henry,\\n\\nSince Dave is out, could you please pick up the Henderson proposal and have it on my desk by tomorrow morning?\\n\\nBest,\\nRick\"\n    }\n    ```", "```py\n        Hi Henry,\\n\\nSince Dave is out, could you please pick up the Henderson proposal and have it on my desk by tomorrow morning?\\n\\nBest,\\nRick\n        ```", "```py\n    import functions_framework\n    from openai import OpenAI\n    @functions_framework.http\n    def get_travel_details(request):\n        request_json = request.get_json(silent=True)\n        city = request_json['city']\n        client = OpenAI(api_key = '<openai-api-key here>')\n        response = client.chat.completions.create(\n          model=\"gpt-4\",\n          messages=[\n        {\n          \"role\": \"system\",\n          \"content\": \"You are a helpful assistant that creates detailed one day itineraries based on the city that the user chooses. Create only 3 activities (morning, afternoon, evening). Only mention the itinerary, nothing else.\"\n        },\n        {\n          \"role\": \"user\",\n          \"content\": \"Rome, Italy\"\n        },\n        {\n          \"role\": \"assistant\",\n          \"content\": \"Morning: \\n\\nStart the day at the Colosseum, one of the most iconic sights of Rome. Take a guided tour to fully appreciate its history and significance. \\n\\nAfternoon: \\n\\nHead over to the Vatican City. Visit the Vatican Museums, home to a vast collection of art and historical artifacts. Don't miss the Sistine Chapel, famous for Michelangelo's ceiling.\\n\\nEvening: \\n\\nEnjoy a leisurely stroll to the Trevi Fountain. Make sure to throw a coin over your shoulder into the fountain for good luck. Then, end the day with a delicious Italian dinner at one of the local restaurants nearby.\"\n        },\n        {\n          \"role\": \"user\",\n          \"content\": \"Lisbon, Portugal\"\n        },\n        {\n          \"role\": \"assistant\",\n          \"content\": \"Morning: \\n\\nBegin your day with a visit to the iconic Belém Tower, a UNESCO World Heritage site offering panoramic views of Lisbon. \\n\\nAfternoon: \\n\\nExplore the historical neighborhood of Alfama. Wander its narrow, winding streets, visit the Se Cathedral and enjoy a traditional Portuguese lunch at a local tavern.\\n\\nEvening: \\n\\nHead to Bairro Alto, the city's bohemian district, for dinner. Afterwards, enjoy a Fado show - a traditional Portuguese music genre - at one of the local bars.\"\n        },\n        {\n          \"role\": \"user\",\n          \"content\": city\n        },\n      ],\n          temperature=0.64,\n          max_tokens=1024,\n          top_p=1,\n          frequency_penalty=0,\n          presence_penalty=0\n        )\n        itinerary = response.choices[0].message.content\n        response = client.chat.completions.create(\n          model=\"gpt-3.5-turbo-1106\",\n          messages=[\n            {\n              \"role\": \"system\",\n              \"content\": \"You are a helpful assistant that creates DALL-E prompts based itineraries. The prompts should be short. Create one prompt for Morning, one for Afternoon, and one for Evening. The DALL-E prompt should be separated by \\\"|\\\".\"\n            },\n            {\n              \"role\": \"user\",\n              \"content\": itinerary\n            }\n          ],\n          temperature=0.64,\n          max_tokens=1024,\n          top_p=1,\n          frequency_penalty=0,\n          presence_penalty=0\n        )\n        dalle_prompts = response.choices[0].message.content\n        dalle_prompts_list = response.choices[0].message.content.split('|')\n        image_urls = []\n        for prompt in dalle_prompts_list:\n          response = client.images.generate(\n                model=\"dall-e-3\",\n                prompt=prompt,\n                size=\"1024x1024\",\n                quality=\"standard\",\n                n=1\n            )\n          image_urls.append(response.data[0].url)\n        result = {\n            'itinerary': itinerary,\n            'morning_image': image_urls[0],\n            'afternoon_image': image_urls[1],\n            'evening_image': image_urls[2]\n        }\n        return result\n    ```", "```py\n    {\n        \"city\": \"Toronto, Canada\"\n    }\n    ```", "```py\nresponse = client.chat.completions.create(\n      model=\"gpt-4\",\n      messages=[\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful assistant that creates detailed one day itineraries based on the city that the user chooses. Create only 3 activities (morning, afternoon, evening). Only mention the itinerary, nothing else.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Rome, Italy\"\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": \"Morning: \\n\\nStart the day at the Colosseum, one of the most iconic sights of Rome. Take a guided tour to fully appreciate its history and significance. \\n\\nAfternoon: \\n\\nHead over to the Vatican City. Visit the Vatican Museums, home to a vast collection of art and historical artifacts. Don't miss the Sistine Chapel, famous for Michelangelo's ceiling.\\n\\nEvening: \\n\\nEnjoy a leisurely stroll to the Trevi Fountain. Make sure to throw a coin over your shoulder into the fountain for good luck. Then, end the day with a delicious Italian dinner at one of the local restaurants nearby.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Lisbon, Portugal\"\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": \"Morning: \\n\\nBegin your day with a visit to the iconic Belém Tower, a UNESCO World Heritage site offering panoramic views of Lisbon. \\n\\nAfternoon: \\n\\nExplore the historical neighborhood of Alfama. Wander its narrow, winding streets, visit the Se Cathedral and enjoy a traditional Portuguese lunch at a local tavern.\\n\\nEvening: \\n\\nHead to Bairro Alto, the city's bohemian district, for dinner. Afterwards, enjoy a Fado show - a traditional Portuguese music genre - at one of the local bars.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": city\n    },\n  ],\n      temperature=0.64,\n      max_tokens=1024,\n      top_p=1,\n      frequency_penalty=0,\n      presence_penalty=0\n    )\n    itinerary = response.choices[0].message.content\n```", "```py\nMorning:\n```", "```py\nStart the day at the Colosseum, one of the most iconic sights of Rome. Take a guided tour to fully appreciate its history and significance.\n```", "```py\nAfternoon: Head over to the Vatican City. Visit the Vatican Museums, home to a vast collection of art and historical artifacts. Don't miss the Sistine Chapel, famous for Michelangelo's ceiling.\n```", "```py\nEvening: Enjoy a leisurely stroll to the Trevi Fountain. Make sure to throw a coin over your shoulder into the fountain for good luck. Then, end the day with a delicious Italian dinner at one of the local restaurants nearby.\n```", "```py\nMorning:\n```", "```py\nBegin your day with a visit to the iconic Belém Tower, a UNESCO World Heritage site offering panoramic views of Lisbon. Afternoon:\n```", "```py\nExplore the historical neighborhood of Alfama. Wander its narrow, winding streets, visit the Se Cathedral and enjoy a traditional Portuguese lunch at a local tavern.\n```", "```py\nEvening: Head to Bairro Alto, the city's bohemian district, for dinner. Afterwards, enjoy a Fado show - a traditional Portuguese music genre - at one of the local bars.\n```", "```py\nresponse = client.chat.completions.create(\n      model=\"gpt-3.5-turbo-1106\",\n      messages=[\n        {\n          \"role\": \"system\",\n          \"content\": \"You are a helpful assistant that creates DALL-E prompts based itineraries. The prompts should be short. Create one prompt for Morning, one for Afternoon, and one for Evening. The DALL-E prompt should be separated by \\\"|\\\".\"\n        },\n        {\n          \"role\": \"user\",\n          \"content\": itinerary\n        }\n      ],\n      temperature=0.64,\n      max_tokens=1024,\n      top_p=1,\n      frequency_penalty=0,\n      presence_penalty=0\n    )\n    dalle_prompts = response.choices[0].message.content\n```", "```py\n…\ndalle_prompts_list = response.choices[0].message.content.split('|')\nimage_urls = []\nfor prompt in dalle_prompts_list:\n    response = client.images.generate(\n            model=\"dall-e-3\",\n            prompt=prompt,\n            size=\"1024x1024\",\n            quality=\"standard\",\n            n=1\n        )\nimage_urls.append(response.data[0].url)\n```", "```py\nresult = {\n        'itinerary': itinerary,\n        'morning_image': image_urls[0],\n        'afternoon_image': image_urls[1],\n        'evening_image': image_urls[2]\n    }\nreturn result\n```"]