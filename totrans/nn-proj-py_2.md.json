["```py\n$ git clone https://github.com/PacktPublishing/Neural-Network-Projects-with-Python.git\n```", "```py\n$ cd Neural-Network-Projects-with-Python\n```", "```py\n$ conda env create -f environment.yml\n```", "```py\n$ conda activate neural-network-projects-python\n```", "```py\n$ cd Chapter02\n```", "```py\n$ python main.py\n```", "```py\n$ python visualize.py\n```", "```py\nimport pandas as pd\n\ndf = pd.read_csv('diabetes.csv')\n```", "```py\nprint(df.head())\n```", "```py\nfrom matplotlib import pyplot as plt \n\ndf.hist()\nplt.show()\n```", "```py\nimport seaborn as sns\n\n# create a subplot of 3 x 3\nplt.subplots(3,3,figsize=(15,15))\n\n# Plot a density plot for each variable\nfor idx, col in enumerate(df.columns):\n    ax = plt.subplot(3,3,idx+1)\n    ax.yaxis.set_ticklabels([])\n    sns.distplot(df.loc[df.Outcome == 0][col], hist=False, axlabel= False, \n    kde_kws={'linestyle':'-',  \n    'color':'black', 'label':\"No Diabetes\"})\n    sns.distplot(df.loc[df.Outcome == 1][col], hist=False, axlabel= False, \n    kde_kws={'linestyle':'--', \n    'color':'black', 'label':\"Diabetes\"})\n    ax.set_title(col)\n\n# Hide the 9th subplot (bottom right) since there are only 8 plots\nplt.subplot(3,3,9).set_visible(False)\n\nplt.show()\n```", "```py\nprint(df.isnull().any())\n```", "```py\nprint(df.describe())\n```", "```py\nprint(\"Number of rows with 0 values for each variable\")\nfor col in df.columns:\n    missing_rows = df.loc[df[col]==0].shape[0]\n    print(col + \": \" + str(missing_rows))\n```", "```py\nimport numpy as np\n\ndf['Glucose'] = df['Glucose'].replace(0, np.nan)\ndf['BloodPressure'] = df['BloodPressure'].replace(0, np.nan)\ndf['SkinThickness'] = df['SkinThickness'].replace(0, np.nan)\ndf['Insulin'] = df['Insulin'].replace(0, np.nan)\ndf['BMI'] = df['BMI'].replace(0, np.nan)\n```", "```py\nprint(\"Number of rows with 0 values for each variable\")\nfor col in df.columns:\n    missing_rows = df.loc[df[col]==0].shape[0]\n    print(col + \": \" + str(missing_rows))\n```", "```py\ndf['Glucose'] = df['Glucose'].fillna(df['Glucose'].mean())\ndf['BloodPressure'] = df['BloodPressure'].fillna(df['BloodPressure'].mean())\ndf['SkinThickness'] = df['SkinThickness'].fillna(df['SkinThickness'].mean())\ndf['Insulin'] = df['Insulin'].fillna(df['Insulin'].mean())\ndf['BMI'] = df['BMI'].fillna(df['BMI'].mean())\n```", "```py\nfrom sklearn import preprocessing\n\ndf_scaled = preprocessing.scale(df)\n```", "```py\ndf_scaled = pd.DataFrame(df_scaled, columns=df.columns)\n```", "```py\ndf_scaled['Outcome'] = df['Outcome']\ndf = df_scaled\n```", "```py\nprint(df.describe().loc[['mean', 'std','max'],].round(2).abs())\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\nX = df.loc[:, df.columns != 'Outcome']\ny = df.loc[:, 'Outcome']\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n```", "```py\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2)\n```", "```py\nfrom keras.models import Sequential\n\nmodel = Sequential()\n```", "```py\nfrom keras.layers import Dense\n# Add the first hidden layer\nmodel.add(Dense(32, activation='relu', input_dim=8))\n```", "```py\n# Add the second hidden layer\nmodel.add(Dense(16, activation='relu'))\n```", "```py\n# Add the output layer\nmodel.add(Dense(1, activation='sigmoid'))\n```", "```py\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n```", "```py\n# Train the model for 200 epochs\nmodel.fit(X_train, y_train, epochs=200)\n```", "```py\nscores = model.evaluate(X_train, y_train)\nprint(\"Training Accuracy: %.2f%%\\n\" % (scores[1]*100))\n\nscores = model.evaluate(X_test, y_test)\nprint(\"Testing Accuracy: %.2f%%\\n\" % (scores[1]*100))\n```", "```py\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ny_test_pred = model.predict_classes(X_test)\nc_matrix = confusion_matrix(y_test, y_test_pred)\nax = sns.heatmap(c_matrix, annot=True, \n                 xticklabels=['No Diabetes','Diabetes'],\n                 yticklabels=['No Diabetes','Diabetes'], \n                 cbar=False, cmap='Blues')\nax.set_xlabel(\"Prediction\")\nax.set_ylabel(\"Actual\")\n```", "```py\nfrom sklearn.metrics import roc_curve\nimport matplotlib.pyplot as plt\n\ny_test_pred_probs = model.predict(X_test)\n```", "```py\nFPR, TPR, _ = roc_curve(y_test, y_test_pred_probs)\n```", "```py\nplt.plot(FPR, TPR)\nplt.plot([0,1],[0,1],'--', color='black') #diagonal line\nplt.title('ROC Curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n```"]