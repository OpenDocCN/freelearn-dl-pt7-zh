["```py\nage<-seq(from = 30,  to = 50, by=1)\n```", "```py\nProbA2U<-seq(0.0006,0.0060,length.out = 21)\nProbA2D<-seq(0.0005,0.0020,length.out = 21)\nProbA2A<-1-(ProbA2U+ProbA2D)\n```", "```py\nProbU2A<-seq(0,0,length.out = 21)\nProbU2D<-seq(0.1219,0.1879,length.out = 21)\nProbU2U<-1-(ProbU2A+ProbU2D)\n```", "```py\nProbD2A<-seq(0,0,length.out = 21)\nProbD2U<-seq(0,0,length.out = 21)\nProbD2D<-1-(ProbD2A+ProbD2U)\n```", "```py\nDecrementsTable<- data.frame(age,ProbA2A,ProbA2U,ProbA2D,ProbU2A,ProbU2D,ProbU2U,ProbD2A,ProbD2U,ProbD2A)\n```", "```py\nstr(DecrementsTable)\n```", "```py\n'data.frame':  21 obs. of  10 variables:\n $ age    : num  30 31 32 33 34 35 36 37 38 39 ...\n $ ProbA2A: num  0.999 0.999 0.998 0.998 0.998 ...\n $ ProbA2U: num  0.0006 0.00087 0.00114 0.00141 0.00168 0.00195 0.00222 0.00249 0.00276 0.00303 ...\n $ ProbA2D: num  0.0005 0.000575 0.00065 0.000725 0.0008 ...\n $ ProbU2A: num  0 0 0 0 0 0 0 0 0 0 ...\n $ ProbU2D: num  0.122 0.125 0.128 0.132 0.135 ...\n $ ProbU2U: num  0.878 0.875 0.871 0.868 0.865 ...\n $ ProbD2A: num  0 0 0 0 0 0 0 0 0 0 ...\n $ ProbD2U: num  0 0 0 0 0 0 0 0 0 0 ...\n $ ProbD2D: num  1 1 1 1 1 1 1 1 1 1 ...\n```", "```py\nsummary(TransMatrix)\n```", "```py\nhead(DecrementsTable)\n```", "```py\nWorkesStates<-c(\"Active\",\"Unable\",\"Dead\")\n```", "```py\nTransMatrix35<-matrix(as.numeric(DecrementsTable[DecrementsTable$age==35,2:10]),nrow = 3,ncol = 3, byrow = TRUE, dimnames = list(WorkesStates, WorkesStates))\n```", "```py\n Active   Unable  Dead \nActive 0.997175 0.00195 0.000875\nUnable 0        0.8616  0.1384 \nDead   0        0       1        \n```", "```py\nMCModel35<-new(\"markovchain\", transitionMatrix = TransMatrix35, states = WorkesStates , name=\"MCModel35\")\n```", "```py\nMCModel35\n```", "```py\nMCModel35\n A 3 - dimensional discrete Markov Chain defined by the following states:\n Active, Unable, Dead\n The transition matrix  (by rows)  is defined as follows:\n Active  Unable     Dead\nActive 0.997175 0.00195 0.000875\nUnable 0.000000 0.86160 0.138400\nDead   0.000000 0.00000 1.000000\n```", "```py\nstates(MCModel35)\n```", "```py\n[1] \"Active\" \"Unable\" \"Dead\" \n```", "```py\ndim(MCModel35)\n```", "```py\n[1] 3\n```", "```py\nstr(MCModel35)\n```", "```py\nFormal class 'markovchain' [package \"markovchain\"] with 4 slots\n ..@ states          : chr [1:3] \"Active\" \"Unable\" \"Dead\"\n ..@ byrow           : logi TRUE\n ..@ transitionMatrix: num [1:3, 1:3] 0.99718 0 0 0.00195 0.8616 ...\n .. ..- attr(*, \"dimnames\")=List of 2\n .. .. ..$ : chr [1:3] \"Active\" \"Unable\" \"Dead\"\n .. .. ..$ : chr [1:3] \"Active\" \"Unable\" \"Dead\"\n ..@ name            : chr \"MCModel35\"\n```", "```py\nMCModel35@transitionMatrix\n```", "```py\n Active  Unable     Dead\nActive 0.997175 0.00195 0.000875\nUnable 0.000000 0.86160 0.138400\nDead   0.000000 0.00000 1.000000\n```", "```py\nabsorbingStates(MCModel35)\n```", "```py\n[1] \"Dead\"\n```", "```py\nset.seed(5)\nWorkerStatePred35<- rmarkovchain(n = 1000, object = MCModel35, t0 =\"Active\")\n```", "```py\ntable(WorkerStatePred35)\n```", "```py\nWorkerStatePred35\nActive\n 1000\n```", "```py\nTransMatrix50<-matrix(as.numeric(DecrementsTable[DecrementsTable$age==50,2:10]),nrow = 3,ncol = 3, byrow = TRUE, dimnames = list(WorkesStates, WorkesStates))\n```", "```py\nMCModel50<-new(\"markovchain\", transitionMatrix = TransMatrix50, states = WorkesStates, name=\"MCModel50\")\n```", "```py\nWorkerStatePred50<- rmarkovchain(n = 1000, object = MCModel50, t0 =\"Active\")\n```", "```py\ntable(WorkerStatePred50)\n```", "```py\nWorkerStatePred50\nActive   Dead Unable\n 33    956     11\n```", "```py\nMCModelsList=list()\nj=1\nfor(i in 30:50){\n  TransMatrix<-matrix(as.numeric(DecrementsTable[DecrementsTable$age==i,2:10]),nrow = 3,ncol = 3, byrow = TRUE, dimnames = list(WorkesStates, WorkesStates))\n  MCModelsList[[j]]<-new(\"markovchain\", transitionMatrix = TransMatrix, states = WorkesStates)\n  j=j+1\n}\n```", "```py\nMCList30to50<-new(\"markovchainList\", markovchains = MCModelsList,name=\"MCList30to50\")\n```", "```py\nStatesSequence<-rmarkovchain(n=10000, object=MCList30to50,t0=\"Active\")\n```", "```py\nstr(StatesSequence)\n```", "```py\n'data.frame':  210000 obs. of  2 variables:\n $ iteration: num  1 1 1 1 1 1 1 1 1 1 ...\n $ values   : Factor w/ 3 levels \"Active\",\"Dead\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```", "```py\nStatesOccurences<-table(StatesSequence$value)\n```", "```py\nActive   Dead Unable\n202189   4889   2922\n```", "```py\nExpectedUnableOccurence<-StatesOccurences[3]/nrow(StatesSequence)\n```", "```py\n Unable\n0.01391429\n```", "```py\nlibrary(MDPtoolbox)\nP <- array(0, c(3,3,2))\nP[,,1] <- matrix(c(0.2, 0.8, 0, 0.3,0,0.7,0.4,0,0.6), 3, 3, byrow=TRUE)\nP[,,2] <- matrix(c(1, 0, 0, 1, 0, 0,1, 0, 0), 3, 3, byrow=TRUE)\nR <- matrix(c(3, 1, 2, 2,1,3), 3, 2, byrow=TRUE)\nmdp_check(P, R)\nQLearnModel=mdp_Q_learning(P=P, R=R, discount = 0.95)\nprint(QLearnModel$Q)\nprint(QLearnModel$V)\nprint(QLearnModel$policy)\nprint(QLearnModel$mean_discrepancy)\n```", "```py\nlibrary(MDPtoolbox)\n```", "```py\nP <- array(0, c(3,3,2))\n```", "```py\nP[,,1] <- matrix(c(0.2, 0.8, 0, 0.3,0,0.7,0.4,0,0.6), 3, 3, byrow=TRUE)\n```", "```py\n> P[,,1]\n [,1] [,2] [,3]\n[1,]  0.2  0.8  0.0\n[2,]  0.3  0.0  0.7\n[3,]  0.4  0.0  0.6\n```", "```py\nP[,,2] <- matrix(c(1, 0, 0, 1, 0, 0,1, 0, 0), 3, 3, byrow=TRUE)\n```", "```py\n> P[,,2]\n [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    1    0    0\n[3,]    1    0    0\n```", "```py\nR <- matrix(c(3, 1, 2, 2,1,3), 3, 2, byrow=TRUE)\n```", "```py\n> R\n [,1] [,2]\n[1,]    3    1\n[2,]    2    2\n[3,]    1    3\n```", "```py\nmdp_check(P, R)\n```", "```py\n> mdp_check(P, R)\n[1] \"\"\n```", "```py\nQLearnModel=mdp_Q_learning(P=P, R=R, discount = 0.95)\n```", "```py\nprint(QLearnModel$Q)\n```", "```py\n> print(QLearnModel$Q)\n\n [,1] [,2]\n[1,] 47.14339 40.10113\n[2,] 46.59996 37.67135\n[3,] 29.04791 47.32842\n```", "```py\nprint(QLearnModel$V)\n```", "```py\n> print(QLearnModel$V)\n[1] 47.14339 46.59996 47.32842\n```", "```py\nprint(QLearnModel$policy)\n```", "```py\n> print(QLearnModel$policy)\n[1] 1 1 2\n```", "```py\nprint(QLearnModel$mean_discrepancy)\n```"]