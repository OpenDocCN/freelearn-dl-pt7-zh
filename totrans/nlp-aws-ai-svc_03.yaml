- en: '*Chapter 2*: Introducing Amazon Textract'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you read how businesses can harness the benefits of
    applying NLP to derive insights from text, and you were briefly introduced to
    the *AWS ML stack*. We will now provide a detailed introduction to **Amazon Textract**,
    along with do-it-yourself code samples and instructions. Amazon Textract is an
    AWS AI service that can be used to extract text from documents and images with
    little to no prior ML skills. But before we get to what Textract can do, we will
    first cover some of the challenges with document processing. Then we will cover
    how Textract can help in overcoming the challenges. We will also talk about the
    benefits of using Amazon Textract, along with its product features. Lastly, we
    will cover how you can integrate Amazon Textract quickly into your applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'We will navigate through the following sections in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your AWS environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overcoming challenges with document processing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how Amazon Textract can help
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting Amazon Textract's product features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Amazon Textract with your applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need access to an AWS account at [https://aws.amazon.com/console/](https://aws.amazon.com/console/).
    Please refer to the *Signing up for an AWS account* sub-section within the *Setting
    up your AWS environment* section for detailed instructions on how you can sign
    up for an AWS account and sign in to the **AWS Management Console**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The Python code and sample datasets for the solution discussed in this chapter
    are available at [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2002](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2002).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Check out the following video to see the Code in Action at [https://bit.ly/3be9eUh](https://bit.ly/3be9eUh).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your AWS environment
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Please do not execute the instructions in this section on their own. This section
    is a reference for all the basic setup tasks needed throughout the book. You will
    be guided to this section when building your solution in this chapter and the
    rest of the chapters in this book. Only execute these tasks when so guided.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the chapter you are in, you will be running tasks using the AWS
    Management Console, an Amazon SageMaker Jupyter notebook, from your command line,
    or a combination of any of these. Either way, you need the right AWS **Identity
    and Access Management** (**IAM**) permissions, resources, and, in most cases,
    one or more Amazon **Simple Storage Service** (**S3**) buckets, as prerequisites
    for your solution builds. This section provides instructions for setting up these
    basic tasks. We will be referring to this section throughout the rest of the chapters
    in the book as needed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Signing up for an AWS account
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter and all subsequent chapters in which we run code examples,
    you will need access to an AWS account. Before getting started, we recommend that
    you create an AWS account by going through the following steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章及所有后续运行代码示例的章节中，你将需要访问一个AWS账户。在开始之前，我们建议你按照以下步骤创建一个AWS账户：
- en: Note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please use the AWS Free Tier, which enables you to try services free of charge
    based on certain time limits or service usage limits. For more details, please
    see [https://aws.amazon.com/free](https://aws.amazon.com/free).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用AWS免费套餐，它允许你基于一定的时间限制或服务使用限制免费试用服务。有关详细信息，请参阅[https://aws.amazon.com/free](https://aws.amazon.com/free)。
- en: Open [https://portal.aws.amazon.com/billing/signup](https://portal.aws.amazon.com/billing/signup).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开[https://portal.aws.amazon.com/billing/signup](https://portal.aws.amazon.com/billing/signup)。
- en: Click on the **Create a new AWS account** button at the bottom left of the page
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面左下角的**创建一个新的AWS账户**按钮
- en: Enter your email address and a password, confirm the password, and provide an
    AWS account name (this can be a reference for how you will use this account, such
    as **sandbox**, for example).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的电子邮件地址和密码，确认密码，并提供一个AWS账户名称（这可以是你如何使用该账户的参考，例如**沙箱**等）。
- en: Select the **usage type** (**Business or Personal**), provide your contact information,
    read and agree to the terms of the AWS Customer Agreement, and click **Continue**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用类型**（**商务或个人**），提供你的联系信息，阅读并同意AWS客户协议条款，然后点击**继续**。
- en: Provide credit card information and a billing address and click **Continue**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供信用卡信息和账单地址，点击**继续**。
- en: Go through the rest of the steps to complete your AWS account signup process.
    Please make a note of your user ID and password; this is your root access to your
    AWS account.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成剩余步骤以完成AWS账户的注册过程。请记下你的用户ID和密码；这是你访问AWS账户的根凭证。
- en: Once the AWS account is created, go to the **AWS Management Console** – [console.aws.amazon.com](http://console.aws.amazon.com)
    – and sign in using the root credentials you created in the previous steps.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦AWS账户创建完成，前往**AWS管理控制台** – [console.aws.amazon.com](http://console.aws.amazon.com)
    – 使用你在之前步骤中创建的根凭证登录。
- en: Type `IAM` in the services search bar at the top of the console and select **IAM**
    to navigate to the IAM console. Select **Users** from the left pane in the IAM
    console and click on **Add User**.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台顶部的服务搜索框中输入`IAM`并选择**IAM**以导航到IAM控制台。在IAM控制台的左侧面板中选择**用户**，然后点击**添加用户**。
- en: Provide a username, then select **Programmatic access** and **AWS Management
    Console access** for **Access Type**. Keep the password as **Autogenerated** and
    keep **Required Password reset** as selected.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个用户名，然后选择**程序访问**和**AWS管理控制台访问**作为**访问类型**。保持密码为**自动生成**，并保持**需要密码重置**为已选状态。
- en: 'Click **Next: Permissions**. On the **Set Permissions** page, click on **Attach
    existing policies directly** and select the checkbox to the left of **AdministratorAccess**.
    Click **Next** twice to go to the **Review** page. Click **Create user**.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：权限**。在**设置权限**页面，点击**直接附加现有策略**，并勾选**AdministratorAccess**左侧的复选框。点击**下一步**两次进入**审核**页面。点击**创建用户**。
- en: Now go back to the AWS Management Console ([console.aws.amazon.com](http://console.aws.amazon.com))
    and click **Sign In**. Provide the IAM username you created in the previous step,
    the temporary password, and enter a new password to log in to the console.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在返回到AWS管理控制台([console.aws.amazon.com](http://console.aws.amazon.com))并点击**登录**。提供你在上一步创建的IAM用户名、临时密码，并输入新密码以登录控制台。
- en: Log in to your AWS account when prompted in the various chapters and sections.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在各个章节和部分中被提示时，登录到你的AWS账户。
- en: You now have access to the AWS Management Console ([https://aws.amazon.com/console/](https://aws.amazon.com/console/)).
    In the next section, we will show how to create an S3 bucket and upload your documents.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以访问AWS管理控制台([https://aws.amazon.com/console/](https://aws.amazon.com/console/))。在接下来的章节中，我们将展示如何创建一个S3桶并上传你的文档。
- en: Creating an Amazon S3 bucket and a folder and uploading objects
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个Amazon S3桶，一个文件夹，并上传对象
- en: 'In this book, we will use Amazon S3 as the storage option for our solutions.
    So, we will need to create an S3 bucket, create folders within the bucket, and
    upload documents for use within the solution. Please follow these instructions
    to learn how to do this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Amazon S3作为我们解决方案的存储选项。因此，我们需要创建一个S3桶，在桶内创建文件夹，并上传文档以供解决方案使用。请按照以下步骤学习如何操作：
- en: Log in to the AWS Management Console ([https://aws.amazon.com/console/](https://aws.amazon.com/console/))
    and, in the search bar at the top, type `S3`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS管理控制台（[https://aws.amazon.com/console/](https://aws.amazon.com/console/)），在顶部的搜索栏中输入`S3`。
- en: Select **S3** from the results and navigate to the Amazon S3 console. Click
    on **Create Bucket**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从搜索结果中选择**S3**，并导航到Amazon S3控制台。点击**创建存储桶**。
- en: On the **Create Bucket** page, provide a **bucket name** (it cannot contain
    spaces or uppercase characters; for more details, see [https://docs.aws.amazon.com/console/s3/bucket-naming](https://docs.aws.amazon.com/console/s3/bucket-naming)),
    and select an **AWS Region** from the list (for more details on AWS Regions, please
    see [https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html)).
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建存储桶**页面上，提供一个**存储桶名称**（名称不能包含空格或大写字母；更多详情，请参阅[https://docs.aws.amazon.com/console/s3/bucket-naming](https://docs.aws.amazon.com/console/s3/bucket-naming)），并从列表中选择一个**AWS区域**（有关AWS区域的更多详情，请参阅[https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html)）。
- en: Accept the defaults for the rest of the options and click on **Create Bucket**.
    For more details on what these options mean, please see [https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受其余选项的默认值，并点击**创建存储桶**。有关这些选项含义的更多详情，请参阅[https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html)。
- en: Now that our S3 bucket is successfully created, either search using your bucket
    name on the **Buckets** pane or click the bucket name if it is displayed in the
    list of buckets on the **Buckets** pane. On the bucket page, click the **Create
    folder** button on the right of the page.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的S3存储桶已成功创建，可以在**存储桶**窗格上使用存储桶名称进行搜索，或者如果在**存储桶**窗格中的存储桶列表中显示，则点击存储桶名称。在存储桶页面上，点击页面右侧的**创建文件夹**按钮。
- en: On the **Create folder** page, provide a name for the folder, accept the defaults
    for the rest of the fields, and click **Create folder** at the bottom right of
    the page.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建文件夹**页面上，为文件夹提供一个名称，接受其余字段的默认值，并点击页面右下角的**创建文件夹**。
- en: On the **Objects** page, either search for the folder you created in the search
    bar underneath the **Objects** heading or click on the folder name.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**对象**页面上，可以在**对象**标题下方的搜索栏中搜索您创建的文件夹，或者点击文件夹名称。
- en: Now you can select either the **Add files** or **Add folder** button on the
    right to bring up an option to select files or folders from your computer to add
    to the S3 bucket in the folder we created.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以选择右侧的**添加文件**或**添加文件夹**按钮，以显示从计算机选择文件或文件夹添加到我们创建的S3存储桶中的选项。
- en: Please note that the AWS Management Console is not the only option to upload
    objects to S3\. You can do it using the AWS **Command-Line Interface** (**CLI**)
    (for more details, see [https://docs.aws.amazon.com/cli/latest/reference/s3/](https://docs.aws.amazon.com/cli/latest/reference/s3/))
    or you can also upload files programmatically using the Python SDK, for example
    ([https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html)).
    AWS provides SDKs for programming in several languages ([https://aws.amazon.com/tools/](https://aws.amazon.com/tools/)).
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，AWS管理控制台并非上传对象到S3的唯一选项。您可以使用AWS **命令行界面**（**CLI**）（更多详情，请参阅[https://docs.aws.amazon.com/cli/latest/reference/s3/](https://docs.aws.amazon.com/cli/latest/reference/s3/)），或者也可以使用Python
    SDK编程方式上传文件，例如（[https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html)）。AWS提供多种编程语言的SDK（[https://aws.amazon.com/tools/](https://aws.amazon.com/tools/)）。
- en: And that concludes the instructions for creating an S3 bucket, creating a folder,
    and uploading objects to the bucket. In the next section, let's see how we can
    add IAM permissions policies for our Amazon SageMaker Jupyter notebook role.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，关于创建S3存储桶、创建文件夹和将对象上传到存储桶的说明结束。在下一部分中，让我们看看如何为我们的Amazon SageMaker Jupyter笔记本角色添加IAM权限策略。
- en: Creating an Amazon SageMaker Jupyter notebook instance
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Amazon SageMaker Jupyter笔记本实例
- en: 'In this section, we will see how to create a notebook instance in Amazon SageMaker.
    This is an important step, as most of our solution examples are run using notebooks.
    After the notebook is created, please follow the instructions to use the notebook
    in the specific chapters based on the solution being built. Please follow these
    steps to create an Amazon SageMaker Jupyter notebook instance:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the AWS Management Console if you haven't already. Type `SageMaker`
    in the services search bar at the top of the page, select **SageMaker** from the
    list, and click on it to go to the Amazon SageMaker management console.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the SageMaker console, on the left pane, click on **Notebook** to expand
    the option, and click **Notebook instances**.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Notebook instances** page, click the **Create notebook instance** button
    at the top right.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a name for the notebook instance and select a suitable notebook instance
    type. For most of the solution builds in this book, an AWS Free Tier ([https://aws.amazon.com/free](https://aws.amazon.com/free))
    instance such as `ml.t2.medium` should suffice.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Permissions and encryption** section, click the **IAM role** list and
    choose **Create a new role**, and then choose **Any S3 bucket.**
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept defaults for the rest of the fields and click **Create notebook instance**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, each notebook instance is provided internet access by SageMaker.
    If you want to disable internet access for this notebook instance, you can attach
    it to your **Virtual Private Cloud** (**VPC**), a highly secure virtual network
    in the cloud for launching AWS resources (https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-notebook-and-internet-access.html),
    and select to disable internet access. We need internet access for this notebook
    instance, so if you are planning to attach a VPC and disable internet access through
    SageMaker, please either configure a **Network Address Translation** (**NAT**)
    gateway, which allows instances in a subnet within the VPC to communicate with
    resources outside the VPC but not the other way around ([https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html)),
    or an interface VPC endpoint ([https://docs.aws.amazon.com/sagemaker/latest/dg/interface-vpc-endpoint.html](https://docs.aws.amazon.com/sagemaker/latest/dg/interface-vpc-endpoint.html)),
    which allows a private connection through the AWS backbone between the notebook
    instance and your VPC. This allows you to manage access to the internet for your
    notebook instance through the controls you have implemented within your VPC.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your notebook instance will take a few minutes to be provisioned; once it's
    ready, the status will change to **InService**. Please follow the instructions
    in the *Using Amazon Textract with your applications* section to find out how
    you can use your notebook instance. In the next few sections, we will walk through
    the steps required to modify the IAM role we attached to the notebook.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您的笔记本实例将需要几分钟时间进行配置；一旦准备好，状态将变为**InService**。请按照*使用Amazon Textract与您的应用程序*部分的说明，了解如何使用您的笔记本实例。在接下来的几部分中，我们将逐步介绍修改我们附加到笔记本的IAM角色所需的步骤。
- en: Changing IAM permissions and trust relationships for the Amazon SageMaker notebook
    execution role
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改Amazon SageMaker笔记本执行角色的IAM权限和信任关系
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You cannot attach more than 10 managed policies to an IAM role. If your IAM
    role already has a managed policy from a previous chapter, please detach this
    policy before adding a new policy as per the requirements of your current chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能向一个IAM角色附加超过10个托管策略。如果您的IAM角色已经有来自前一章节的托管策略，请在根据当前章节的要求添加新策略之前，先解除附加此策略。
- en: When we create an **Amazon SageMaker** Jupyter notebook instance (like we did
    in the previous section), the default role creation step includes permissions
    to either an S3 bucket you specify or any S3 bucket in your AWS account. But often,
    we need the notebook to have more permissions that that. For example, we may need
    permission to use **Amazon Textract** or **Amazon Comprehend** APIs, and/or other
    services as required.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个**Amazon SageMaker** Jupyter笔记本实例（如我们在前一部分所做的那样）时，默认角色创建步骤包括将权限授予您指定的S3桶或AWS账户中的任何S3桶。但通常，我们需要更多的权限。例如，我们可能需要使用**Amazon
    Textract**或**Amazon Comprehend** API的权限，或者其他服务的权限。
- en: 'In this section, we will walk through the steps needed to add additional permissions
    policies to our Amazon SageMaker Jupyter notebook role:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将逐步介绍为我们的Amazon SageMaker Jupyter笔记本角色添加额外权限策略所需的步骤：
- en: Open the Amazon SageMaker console by typing `sagemaker` in the services search
    bar at the top of the page in your AWS Management Console, and select **Amazon
    SageMaker** from the list.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的AWS管理控制台页面顶部的服务搜索栏中输入`sagemaker`以打开Amazon SageMaker控制台，并从列表中选择**Amazon SageMaker**。
- en: In the **Amazon SageMaker** console, on the left pane, expand **Notebook** and
    click **Notebook instances**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Amazon SageMaker**控制台的左侧面板中，展开**Notebook**并点击**Notebook实例**。
- en: Click the name of the notebook instance you need to change permissions for.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您需要更改权限的笔记本实例名称。
- en: On the **Notebook instance settings** page, scroll down to **Permissions and
    encryption**, and click **IAM role ARN**.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Notebook实例设置**页面，向下滚动至**权限和加密**，然后点击**IAM角色ARN**。
- en: This will open the **IAM management console** and your role **summary** will
    be displayed along with the **permissions** and other details for your role. Click
    **Attach policies**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开**IAM管理控制台**，并显示您的角色**摘要**以及该角色的**权限**和其他详细信息。点击**附加策略**。
- en: On the `textract` in the search bar, select the checkbox next to the policy
    you are interested in, and click **Attach policy** at the bottom right. You should
    now see the policy attached to your role.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入`textract`，选择您感兴趣的策略旁边的复选框，然后点击右下角的**附加策略**。现在您应该能看到该策略已附加到您的角色。
- en: In some cases, we may need a custom policy for our requirement rather than a
    managed policy provided by AWS. Specifically, we add an inline policy ([https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html))
    to allow `PassRole` of our SageMaker notebook execution role to services that
    can assume this role (added in **Trust relationships**) for actions needed to
    be performed from the notebook. Click **Add inline policy** on the right of your
    SageMaker notebook execution role summary page.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能需要自定义策略来满足我们的需求，而不是AWS提供的托管策略。具体来说，我们添加一个内联策略（[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html)），以允许我们的SageMaker笔记本执行角色将`PassRole`权限授予能够承担该角色的服务（在**信任关系**中添加）以执行从笔记本中需要完成的操作。点击SageMaker笔记本执行角色摘要页面右侧的**添加内联策略**。
- en: 'Now click the **JSON** tab and paste the following JSON statement in the input
    area:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**JSON**标签，并将以下JSON语句粘贴到输入区域：
- en: '[PRE0]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Click **Review policy**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**审查策略**。
- en: On the **Review policy** page, type a name for your policy and click **Create
    policy** at the bottom right of the page.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**审查策略**页面中，输入您的策略名称，并点击页面右下角的**创建策略**。
- en: Now that you know how to attach permissions and an inline policy to your role,
    let's go to the last step of this section, updating **trust relationships** ([https://docs.aws.amazon.com/directoryservice/latest/admin-guide/edit_trust.html](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/edit_trust.html))
    for your role. On the **Summary** page for your SageMaker notebook execution role,
    click the **Trust relationships** tab, and click **Edit trust relationship**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经知道如何将权限和内联策略附加到您的角色，让我们进入本节的最后一步，更新您的角色的**信任关系**（[https://docs.aws.amazon.com/directoryservice/latest/admin-guide/edit_trust.html](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/edit_trust.html)）。在
    SageMaker 笔记本执行角色的**概述**页面上，点击**信任关系**标签页，然后点击**编辑信任关系**。
- en: 'Copy the following JSON snippet and paste it in the **Policy Document** input
    field. This statement allows Amazon SageMaker, Amazon S3, and Amazon Comprehend
    the ability to assume the SageMaker notebook execution role permissions. Depending
    on the chapter and the use case we are building, the services that will need to
    assume the role will vary and you will be instructed accordingly. For now, please
    consider the following JSON snippet as an example to understand how to edit trust
    relationships:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制以下 JSON 代码段并将其粘贴到**策略文档**输入字段中。此声明允许 Amazon SageMaker、Amazon S3 和 Amazon Comprehend
    获取假设 SageMaker 笔记本执行角色权限的能力。根据我们正在构建的章节和用例，假设角色的服务会有所不同，您将根据需要获得相应的指导。目前，请将以下
    JSON 代码段视为示例，以便理解如何编辑信任关系：
- en: '[PRE1]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Click the **Update Trust Policy** button at the bottom right of the page.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面右下角的**更新信任策略**按钮。
- en: You should see the **trusted entities** updated for your role.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该查看为您的角色更新的**受信任实体**。
- en: And you are all set. In this section, you learned how to update the IAM role
    for your Amazon SageMaker notebook instances to add permissions policies, add
    a custom inline policy, and, finally, edit the trust relationships to add the
    trusted entities you needed for your solution build. You may now go back to the
    chapter you navigated to here from and continue your solution build task.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经完成。在本节中，您学习了如何更新 Amazon SageMaker 笔记本实例的 IAM 角色，添加权限策略、添加自定义内联策略，最后，编辑信任关系以添加您解决方案构建所需的受信任实体。您现在可以返回到之前导航到此章节的地方，继续您的解决方案构建任务。
- en: Overcoming challenges with document processing
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克服文档处理中的挑战
- en: Automating operational activities is very important for organizations looking
    to minimize costs, increase productivity, and enable faster go-to-market cycles.
    Typically, operations that are at the core of these businesses are prioritized
    for automation. Back-office support processes, including administrative tasks,
    are often relegated to the bottom of the priority list because they may not be
    deemed *mission critical*. According to this *Industry Analysts* report ([https://www.industryanalysts.com/111015_konica/](https://www.industryanalysts.com/111015_konica/),
    *written in 2015, with data collected from sources such as Gartner Group, AIIM,
    the US Department of Labor, Imaging Magazine, and Coopers and Lybrand,* *and*
    *accessed on March 30, 2021*), organizations continue to be reliant on paper-based
    documents, and the effort required to maintain these documents poses significant
    challenges due to the lack of automation and inefficiencies in the document workflow.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化运营活动对于希望最小化成本、提高生产力并实现更快市场推广周期的组织来说至关重要。通常，这些企业核心运营活动会优先进行自动化。后勤支持流程，包括行政任务，通常被排在优先级列表的底部，因为它们可能不被视为*至关重要*。根据这份*行业分析师*报告（[https://www.industryanalysts.com/111015_konica/](https://www.industryanalysts.com/111015_konica/)，*撰写于2015年，数据来源包括Gartner
    Group、AIIM、美国劳动部、Imaging Magazine和Coopers and Lybrand，* *并且* *于2021年3月30日访问*），组织仍然依赖纸质文档，而维护这些文档所需的工作量由于缺乏自动化和文档工作流中的低效，给企业带来了重大挑战。
- en: Many organizations, such as financial institutions, healthcare, manufacturing,
    and other small-to-medium-sized enterprises, have a large number of scanned and
    handwritten documents. These documents can be in various formats, such as invoices,
    receipts, resumes, application forms, and so on. Moreover, these documents are
    not kept in one place; instead, they are in silos, which makes it really difficult
    to uncover useful insights from these documents. Suppose that you have an archive
    of documents that you would like to extract data from. And let's say we build
    an application that makes it easy for you to search across the vast collection
    of documents in these archives. Extracting data from these documents is really
    important for you as they contain a lot of useful information that is relevant
    for your organization. Once you extract the information you need (of course, we
    first have to determine what is useful and what is not), you can do so many things,
    such as discover business context, set up compliance, design search and discovery
    for important keywords, and automate your existing business processes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织，如金融机构、医疗保健、制造业以及其他中小型企业，拥有大量扫描和手写文档。这些文档可能采用多种格式，如发票、收据、简历、申请表等。此外，这些文档并不是集中存放的，而是分散在各个地方，这使得从这些文档中提取有用的信息变得非常困难。假设你有一个文档档案库，你希望从中提取数据。假设我们构建了一个应用程序，可以让你轻松地在这些档案库中的大量文档中进行搜索。从这些文档中提取数据对你来说非常重要，因为它们包含了许多对你的组织有用的信息。一旦你提取出所需的信息（当然，我们首先需要确定哪些是有用的，哪些不是），你就可以做很多事情，比如发现业务背景、建立合规性、为重要关键词设计搜索和发现功能，甚至自动化现有的业务流程。
- en: As time progresses, we see more organizations embracing digital media for their
    business processes due to the ease of integration with their operational systems,
    but paper-based documents are not going away anytime soon. According to this article
    ([https://medium.com/high-peak-ai/real-time-applications-of-intelligent-document-processing-993e314360f9](https://medium.com/high-peak-ai/real-time-applications-of-intelligent-document-processing-993e314360f9),
    *accessed on March 30, 2021*), there is in fact an increase in the usage of paper
    documents in organizations. And that's why it's really important to automate document
    processing workflows.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，我们看到越来越多的组织由于易于与其运营系统集成而开始拥抱数字媒体来处理业务流程，但纸质文档不会很快消失。根据这篇文章（[https://medium.com/high-peak-ai/real-time-applications-of-intelligent-document-processing-993e314360f9](https://medium.com/high-peak-ai/real-time-applications-of-intelligent-document-processing-993e314360f9)，*2021年3月30日访问*)，实际上，组织中纸质文档的使用在增加。因此，自动化文档处理工作流变得非常重要。
- en: 'So, what is the problem with paper documents? The problem is the cost and time
    required to extract the data from documents using traditional approaches. One
    of the most common approaches is **manual processing** of these documents. What
    is manual processing? A human will read the documents and then key all the values
    into an application or copy and paste them into another document. This approach
    is highly inefficient and expensive: not only do you need to invest time and effort
    to train the human workforce to understand the data domain they are working with,
    but also there may be errors in data entry due to human nature. For example, when
    working with tax forms and financial forms, you would need an experienced **Certified
    Public Accountant** (**CPA**) to do that manual entry, as this would require accounting
    knowledge to extract the details needed. So, we can see that a traditional approach
    with manual processing of documents is time consuming, error prone, and expensive.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，纸质文档的问题是什么呢？问题在于使用传统方法从文档中提取数据所需的成本和时间。最常见的方法之一是**人工处理**这些文档。什么是人工处理？就是人工阅读文档，然后将所有的数值输入到应用程序中，或者复制粘贴到另一个文档中。这种方法效率低下且成本高昂：不仅需要投入时间和精力培训人工劳动力，使其理解所处理的数据领域，而且由于人为因素，数据输入过程中可能会出现错误。例如，在处理税务表格和财务表格时，你需要一位经验丰富的**注册会计师**（**CPA**）来进行手动输入，因为这需要会计知识来提取所需的详细信息。因此，我们可以看到，传统的人工处理文档的方法既耗时、易出错，又成本高昂。
- en: Another approach that we have seen organizations use is rule-based formatting
    templates along with **Optical Character Recognition** (**OCR**) systems to extract
    data from these documents. The challenge with this method is that these rule-based
    systems are not intelligent enough to adapt to evolving document formats, and
    often break with even minor template changes. As businesses grow and expand, their
    underlying processes need the flexibility to adapt, and this often leads to working
    with multiple document structures, often running to hundreds or even thousands
    of formats. Trying to set up and manage these formats for each document type can
    turn into a huge maintenance overhead pretty quickly and it can become challenging
    to update these formats in rule-based systems once the document format changes.
    Another challenge to consider is the provisioning of infrastructure and the scaling
    required to handle millions of such documents and the associated costs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的另一种方法是，组织使用基于规则的格式化模板与 **光学字符识别** (**OCR**) 系统结合，从这些文档中提取数据。该方法的挑战在于，这些基于规则的系统没有足够的智能来适应不断变化的文档格式，甚至在模板稍有变化时也会出现故障。随着业务的增长和扩展，其基础流程需要灵活性以适应，这通常导致需要处理多个文档结构，可能达到数百甚至数千种格式。尝试为每种文档类型设置和管理这些格式，很快就会变成一个巨大的维护负担，一旦文档格式发生变化，基于规则的系统就变得难以更新这些格式。另一个需要考虑的挑战是基础设施的配置以及处理数百万份此类文档所需的扩展性和相关成本。
- en: That's why we have **Amazon Textract**, a fully managed ML and AI service, built
    with out-of-the-box features to extract handwritten and printed text in forms,
    tables, and pages from images and PDF documents. Textract provides **Application
    Programming Interfaces** (**APIs**) behind which run powerful ML models trained
    on millions of documents to provide a highly effective solution for intelligent
    text extraction.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们拥有 **Amazon Textract** 的原因，它是一个完全托管的机器学习和人工智能服务，具备开箱即用的功能，可以从图像和 PDF 文档中提取表单、表格和页面中的手写和印刷文本。Textract
    提供了 **应用程序编程接口** (**APIs**)，背后运行着强大的机器学习模型，这些模型经过数百万文档的训练，提供了一种高效的智能文本提取解决方案。
- en: So, we covered the challenges with processing documents in this section and
    why we need Amazon Textract. In the next section, we will talk about how Amazon
    Textract can quickly help organizations solve this pain point.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在本节中讨论了处理文档的挑战以及为什么我们需要 Amazon Textract。在下一节中，我们将讨论 Amazon Textract 如何帮助组织快速解决这一痛点。
- en: Understanding how Amazon Textract can help
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Amazon Textract 如何提供帮助
- en: We covered *AWS AI Services* briefly in [*Chapter 1*](B17528_01_Final_SB_ePub.xhtml#_idTextAnchor020)*,*
    *NLP in the Business Context and Introduction to AWS AI Services,* when introducing
    the *business context for NLP*. Amazon Textract is an OCR-based service in the
    AWS AI Services stack that comes with ready-made intelligence, enabling you to
    use it without any prior ML experience for your document processing workflows.
    It is interesting to note that Amazon Textract has its origins in the deep learning
    ML models built for [Amazon.com](http://Amazon.com). It comes with a pre-trained
    model and provides APIs where you can send your documents in PDF or image format
    and get a response as text/tables and key/value pairs along with a confidence
    score.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第1章*](B17528_01_Final_SB_ePub.xhtml#_idTextAnchor020)中简要介绍了 *AWS AI 服务*，即
    *业务背景中的自然语言处理和 AWS AI 服务简介*，并介绍了 *自然语言处理的业务背景*。Amazon Textract 是 AWS AI 服务堆栈中的一个基于
    OCR 的服务，提供现成的智能功能，使您无需任何机器学习经验就可以使用它进行文档处理工作流。值得注意的是，Amazon Textract 的起源来自为 [Amazon.com](http://Amazon.com)
    构建的深度学习机器学习模型。它配备了一个预训练模型，并提供 API，您可以通过这些 API 发送 PDF 或图像格式的文档，并得到以文本、表格和键值对的形式返回的响应，并附带一个置信度分数。
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Amazon Textract currently supports PNG, JPEG, and PDF formats.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Textract 目前支持 PNG、JPEG 和 PDF 格式。
- en: 'Amazon Textract provides serverless APIs without you needing to manage any
    kind of infrastructure, enabling you to quickly automate document management and
    scale to process millions of documents. Once the document content is extracted,
    you can leverage it within your business applications for a variety of document
    processing use cases for your industry and operational requirements. Amazon Textract
    models learn as they go, so they become more intelligent in understanding your
    documents as you continue to use them. Please refer to the following list for
    a subset of Amazon Textract usage examples we will be covering in the upcoming
    chapters:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '**Natural language processing (NLP)** *for text extraction* – This use case
    will show an end-to-end example of how to use Textract to get text from documents
    and then perform NLP techniques on the text to derive insights. We will cover
    some of these key concepts with an example in [*Chapter 3*](B17528_03_Final_SB_ePub.xhtml#_idTextAnchor049)*,
    Introduction to Amazon Comprehend*.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quickly set up automated document processing workflows* – In this use case
    we will see how to build a solution using Textract and other AWS services to automate
    common document management tasks, such as a loan application approval workflow,
    resulting in cost and time savings. This use case will be covered as part of [*Chapter
    4*](B17528_04_Final_SB_ePub.xhtml#_idTextAnchor063)*, Automating Document Processing
    Workflows.*'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Building a scalable intelligent centralized search index* – Amazon Textract
    enables you to extract data from scanned documents and store it in Amazon *S3*.
    Amazon S3 is a cost-effective and scalable object storage solution. The data in
    Amazon S3 can be indexed using **Amazon Elasticsearch** and you can make your
    archives searchable. You can also create a centralized search solution for your
    data sitting in silos by moving them into Amazon S3\. We will cover this use case
    in [*Chapter 5*](B17528_05_Final_SB_ePub.xhtml#_idTextAnchor074)*, Creating NLP
    Search.*'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Implementing compliance in archival documents* – Because of Textract''s inherent
    ML capabilities, it can identify text in pages, tables, and forms automatically.
    This feature is especially helpful when you want to build intelligent systems
    that depend on document metadata for determining compliance with business processes.
    We will look at an example of this use case in [*Chapter 6*](B17528_06_Final_SB_ePub.xhtml#_idTextAnchor089)*,
    Using NLP to Improve Customer Service Efficiency.*'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Building automated data capture from forms into existing apps/chatbots* –
    Amazon Textract provides APIs that you can use within your applications with a
    diverse collection of document types. For example, you may need to query receipts
    from your vendors and use that to make decisions as part of your operations. In
    this use case we will see how to use a chatbot with your document processing application
    using **Amazon Lex** ([https://aws.amazon.com/lex/](https://aws.amazon.com/lex/)).
    This will be covered in detail in [*Chapter 8*](B17528_08_Final_SB_ePub.xhtml#_idTextAnchor106)*,
    Leveraging NLP to Monetize Your Media Content.*'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see, Amazon Textract can be used for various types of document processing
    use cases and provides several advanced benefits that you would not find in traditional
    rule-based systems or OCR solutions. You can read some of these benefits here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '*Text? Structured? Unstructured? Textract to the rescue*: Amazon Textract uses
    AI and ML to detect structured text in tables and unstructured text such as textual
    data from documents in pages, lines, and words. Amazon Textract first determines
    the layout of the document, then detects the types of content in the document,
    along with their relationships and context, prior to extraction. It also provides
    a confidence score with each detected text, table, and key/value pair. We will
    see some examples in the next section.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon Textract overcomes the limitations of OCR*: While Amazon Textract uses
    OCR implicitly, that is not the only benefit. You do not have to worry about maintaining
    various templates and formats as it uses ML rather than a template-based approach.
    So, it works for all kinds of document templates used across industries, for example
    invoices, receipts, employment forms, resumes, tax preparation docs, medical claim
    forms, technical specifications, and more.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security and compliance*: Security is the highest priority at AWS. Amazon
    Textract conforms to the Shared Responsibility Model ([https://aws.amazon.com/compliance/shared-responsibility-model/](https://aws.amazon.com/compliance/shared-responsibility-model/)).'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand the security and compliance features of Amazon Textract, please
    refer to [https://docs.aws.amazon.com/textract/latest/dg/security.html](https://docs.aws.amazon.com/textract/latest/dg/security.html).
    Amazon Textract is covered in multiple AWS compliance programs, including **System
    and Organizational Control** (**SOC**), **International Organization for Standardization**
    (**ISO**), as well as **PCI** and **HIPAA**. For more details, please refer to
    [https://docs.aws.amazon.com/textract/latest/dg/SERVICENAME-compliance.html](https://docs.aws.amazon.com/textract/latest/dg/SERVICENAME-compliance.html).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*APIs for easy integration with your applications*: Amazon Textract provides
    APIs in Java, Python, and other languages. Behind these APIs run powerful ML models
    to easily extract text from your documents. For a detailed walk-through of the
    APIs, please refer to the section titled *Using Amazon Textract with your applications*.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon Textract is serverless and scalable*: Amazon Textract is a fully managed
    and serverless service that will automatically scale based on the volumes of documents
    you need to process. It will scale up to handle additional demand and will scale
    down once the demand subsides.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cost effective*: Amazon Textract pricing is similar to other fully managed
    AWS services. Customers pay only for what they use. For example, the cost to process
    one page of a document in the us-east-1 region is $0.0015\. There is a free tier
    available for you to get started quickly. For more details, please refer to [https://aws.amazon.com/textract/pricing/](https://aws.amazon.com/textract/pricing/).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we briefly listed some interesting document-processing use
    cases that Amazon Textract can help solve and reviewed some of the key benefits
    of Amazon Textract, such as pre-built intelligence, cost effectiveness, scalability,
    and ease of use. In the next section, we will use the AWS Management Console ([https://console.aws.amazon.com/](https://console.aws.amazon.com/))
    to walk through Amazon Textract's product features, such as table detection, form
    detection, handwriting detection, text detection, and multi-language support.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Presenting Amazon Textract's product features
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alright, it''s time to start exploring the cool features we have been talking
    about so far. We will start by seeing how you can quickly upload the sample documents
    provided in our GitHub repository ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services))
    to your Amazon Textract AWS console. Then, we will walk through the key features
    of Amazon Textract, along with multi-language support by using a French COVID-19
    form. We will also cover Amazon Textract''s integration with Amazon A2I, which
    will quickly help set up a human review workflow for the text, which needs to
    be highly accurate, such as an invoice amount ([https://aws.amazon.com/augmented-ai/](https://aws.amazon.com/augmented-ai/))
    at a high level. We will cover the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your AWS Management Console.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload sample document(s).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Raw text or text extraction.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Key value extraction or form values.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Table extraction.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiple language support.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handwriting extraction.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Augmented AI or A2I support for human in the loop.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a first step, please refer to the *Technical requirements* section to sign
    up for an AWS account and sign in to get started.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Uploading sample document(s)
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s see how to upload a document to Textract:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Download the sample documents from the GitHub repository ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/employment_history.png](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/employment_history.png)).
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your AWS Management Console, in the `Textract`, and select **Amazon Textract**.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on **Try Amazon Textract** and click the **Upload Document** button
    to select the document you downloaded in *step 1*:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Click the Upload document button on Amazon Textract console'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17528_02_01.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Click the Upload document button on Amazon Textract console
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'This will upload the document to Amazon Textract:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Employment application.png](img/B17528_02_02.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Employment application.png
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Raw text or text extraction
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following analysis is displayed in the Amazon Textract console:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Amazon Textract console for text extraction'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17528_02_03.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Amazon Textract console for text extraction
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Raw text** tab to see the extracted text:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Amazon Textract text response as lines and words'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17528_02_04.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Amazon Textract text response as lines and words
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Textract provides support for rotated documents. Please refer to [https://docs.aws.amazon.com/textract/latest/dg/limits.html](https://docs.aws.amazon.com/textract/latest/dg/limits.html)
    for more details on Textract service limits.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Working with multi-page documents
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Amazon Textract has the intelligence to recognize that some documents have
    multiple formats in them and is able to extract content accordingly. For example,
    you may be working with reports or a request for proposal document with multiple
    segments. Please download the image shown in *Figure 2.4* ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/two-column-image.jpeg](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/two-column-image.jpeg))
    and upload it to the Amazon Textract console to try this out:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Multi-page scanned image sample](img/B17528_02_05.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Multi-page scanned image sample
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Textract will extract the pages and the paragraphs, along with the lines
    and the words. Also, it will give you the exact positions of these words and paragraphs
    in the document, which is very important for context. See the following screenshot
    to understand the bounding box or geometry derived using Textract:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Textract bounding box response for detected text'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17528_02_06.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Textract bounding box response for detected text
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of this document in the AWS console:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Multi-page scanned image Amazon Textract text response in the
    AWS console](img/B17528_02_07.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Multi-page scanned image Amazon Textract text response in the AWS
    console
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Form data and key/value pairs
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Amazon Textract segments documents to identify forms so it can return your
    key/value pairs from these forms. We will use the employment application sample
    document template ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/emp_app_printed.png](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/emp_app_printed.png)),
    which you downloaded from the GitHub repository:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Upload document** button in the Amazon Textract console:![Figure
    2.8 – Upload document button in the Textract console
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17528_02_08.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.8 – Upload document button in the Textract console
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the **Forms** tab. You will see the extracted key/value pairs, as
    shown:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Sample document form and key/value pair extraction in the Amazon
    Textract console'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17528_02_09.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Sample document form and key/value pair extraction in the Amazon
    Textract console
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Table extraction
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Amazon Textract can recognize if your document has content structured in tables,
    for example, receipts, or a listing of technical specifications, pharmacy prescription
    data, and so on. Textract provides you with the ability to specify whether it
    should look for tables in your documents when using the API. Along with the table
    and its contents, Textract returns metadata and indexing information of the table
    contents, which you can find out more about in the API walk-through later. For
    this demo, you can download this sample receipt ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/receipt-image.png](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/receipt-image.png))
    and upload it into the Amazon Textract console. You will get the extracted table
    shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Table extraction of sample receipt in the Amazon Textract console.](img/B17528_02_10.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Table extraction of sample receipt in the Amazon Textract console.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Multiple language support
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Amazon Textract provides support for extracting text in multiple languages.
    For the latest list of languages supported, please refer to this link: [https://aws.amazon.com/textract/faqs/](https://aws.amazon.com/textract/faqs/).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Handwriting support is available only in English at the time of writing (*April
    2021*).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: During the COVID lockdown in France, anyone wishing to leave their house had
    to fill in a declaration form to explain why they were outside. We will use this
    sample form to demo the Amazon Textract language detection feature for the French
    language. The form is available at [https://www.connexionfrance.com/French-news/Covid-19-in-France-Your-questions-on-declaration-form-needed-to-leave-the-house](https://www.connexionfrance.com/French-news/Covid-19-in-France-Your-questions-on-declaration-form-needed-to-leave-the-house).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also download this form from [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/form-derogatoire.jpg](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/form-derogatoire.jpg)
    and upload it to the Amazon Textract console. Click on the **Raw text** tab, then
    **Forms**:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – French data extraction from a sample scanned COVID form in
    French'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17528_02_11.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – French data extraction from a sample scanned COVID form in French
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Textract is able to detect both key/value pairs and raw text from this
    form in French.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Handwriting detection
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another very common challenge customers face with data extraction is when you
    have mixed content documents, such as handwritten text along with printed text.
    This could be, for example, a prescription form that doctors write for their patients
    on paper printed with the doctor''s name and address. This brings us to another
    key feature of Amazon Textract: detecting handwritten content from documents:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Download the sample handwritten invoice from the GitHub repository ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/sample-invoice.png](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/sample-invoice.png)).
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the sample into the Amazon Textract console, as shown in *Figure 2.12*.
    Amazon Textract is able to extract handwritten as well as printed key/value pairs
    (form data), tables, and text from the sample document:![Figure 2.12 – Handwritten
    as well as printed text extracted from a sample invoice
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17528_02_12.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.12 – Handwritten as well as printed text extracted from a sample invoice
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can change tabs to **Form**s and **Tables** to see how Amazon Textract is
    able to quickly extract this handwritten and printed content from this sample
    document.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Human in the loop
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Textract provides in-built integration with **Amazon A2I** ([https://aws.amazon.com/augmented-ai/](https://aws.amazon.com/augmented-ai/)).
    Using Amazon A2I, you can build human workflows to manage certain documents that
    require further review by a human for auditing purposes, or just to review the
    ML predictions. For example, social security numbers or monetary amounts may need
    to be highly accurate. It is similar to having a first pass of getting text from
    AI and then using human teams to double-check what the AI has predicted for you.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: We will cover handwriting and human in the loop in detail when we get to [*Chapter
    17*](B17528_17_Final_SB_ePub.xhtml#_idTextAnchor202)*, Visualizing Insights from
    Handwritten Content*.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, the Textract console provides you the option to download and review
    the JSON documents that are the result of the API responses that were invoked
    for the various Textract features we walked through:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Download Textract results from console'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17528_02_13.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – Download Textract results from console
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we walked through Amazon Textract's key product features to
    extract text, forms, tables, and handwritten content from PDF and image documents,
    including support for documents in multiple languages. In the next section, we
    will review how to use Amazon Textract APIs, walk through the JSON responses in
    detail, and understand how to use Textract with your applications.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Using Amazon Textract with your applications
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will introduce and walk through the Amazon Textract APIs
    for real-time analysis and batch processing of documents. We will show these APIs
    in action using Amazon SageMaker Jupyter notebooks. For this section, you will
    need to create an Amazon SageMaker Jupyter notebook and set up **IAM** permissions
    for that notebook role to access Amazon Textract. After that you will need to
    clone the notebook from our GitHub repository ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services)),
    download the sample images, create an Amazon S3 ([https://aws.amazon.com/s3/](https://aws.amazon.com/s3/))
    bucket, upload these images to the S3 bucket, and then refer to this location
    in the notebook for processing.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'For instructions to create an Amazon SageMaker notebook instance, please refer
    to the *Creating an Amazon SageMaker Jupyter notebook instance* sub-section in
    the *Setting up your AWS environment* section at the beginning of this chapter.
    Alternatively, you can refer to the Amazon SageMaker documentation to create a
    notebook instance: [https://docs.aws.amazon.com/sagemaker/latest/dg/gs-setup-working-env.html](https://docs.aws.amazon.com/sagemaker/latest/dg/gs-setup-working-env.html).'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM role permissions while creating Amazon SageMaker Jupyter notebooks
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First, accept the default for the IAM role at notebook creation time to allow
    access to any S3 bucket. After the notebook instance is created, follow the instructions
    in the *sub-section Changing IAM permissions and trust relationships for the Amazon
    SageMaker notebook execution role* under the section, *Setting up your AWS environment*
    at the beginning of this chapter to add **AmazonTextractFullAccess** as a permissions
    policy to the notebook's IAM role.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have created the notebook instance and its status is **InService**,
    click on **Open Jupyter** in the **Actions** menu heading for the notebook instance:![Figure
    2.14 – Open the Jupyter notebook
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17528_02_14.jpg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.14 – Open the Jupyter notebook
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will take you to the home folder of your notebook instance.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **New** and select **Terminal***,* as shown in the following screenshot:![Figure
    2.15 – Open Terminal in a Jupyter notebook
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17528_02_15.jpg)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.15 – Open Terminal in a Jupyter notebook
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the terminal window, first type `cd SageMaker` and then type `git clone https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services`,
    as shown in the following screenshot:![Figure 2.16 – git clone command
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17528_02_16.jpg)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.16 – git clone command
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, exit the terminal window, go back to the home folder, and you will see
    a folder called `Chapter 02`. Open the folder and you should see a notebook called
    **Amazon Textract API Sample.ipynb**. Open this notebook by clicking it.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow through the steps in this notebook that correspond to the next few subheadings
    in this section by executing one cell at a time. Please read the descriptions
    provided above each notebook cell.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Textract APIs
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before jumping into a notebook demo of how you can use the Textract APIs, we
    will explore the APIs and their features. Amazon Textract APIs can be classified
    into synchronous APIs for real-time processing and asynchronous APIs for batch
    processing. Let's now examine the functions of these APIs.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Synchronous APIs for real-time processing
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These APIs take single-page scanned images (JPG or PNG) from your existing
    filesystem, which is local to your computer, or in an Amazon S3 bucket. There
    are two APIs for real-time analysis:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '**Detect Document Text API**: This API will extract words and lines from scanned
    images. You can use this API for use cases where you just want the text content
    from the scans, and your data does not have forms or tables, such as story books,
    student exam papers, and scanned news articles. You can use this API in web or
    mobile applications to quickly scan text from documents in real time. Another
    way to use this API is to extract the text data and perform further NLP on this
    data, such as to identify paragraphs and headers, perform further data labeling
    for key/value pairs, or use it for downstream processing.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key/value pairs
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Key/value pairs in the case of a form means the key will be the name and the
    value will be "Jane Doe."
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Analyze Document API**: This API is much more comprehensive in its function
    and can help you extract text from scanned images and identify forms (key/value
    pairs) and tables from documents. You can use this API with various types of documents,
    such as invoices, receipts, medical intake forms, resumes, tax forms, and all
    types of financial forms. You can create an application where a user can take
    pictures of receipts and use this API to do a quick analysis of the invoice to
    retrieve the amount or the invoice ID.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous APIs for batch processing
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These APIs accept single-page or multi-page images (JPG/PNG) and PDFs that
    are uploaded to an Amazon S3 bucket. It runs a batch analysis to extract content
    from these images and documents:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '`AnalyzeDocument` synchronous API in function, as it will extract text, tables,
    and form data from the input documents. The difference is this API also supports
    PDF documents. Input documents should be stored in an Amazon S3 bucket, and its
    S3 URL should be provided to this API. This API will start the batch job for document
    analysis.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StartDocumentAnalysis` operation in the form of key/value pairs, tables, and
    text. This also returns the job ID and their success or failure status.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DetectDocumentText` API in functionality as it detects text from documents
    in batches that have been uploaded to an Amazon S3 bucket. We will see this API
    demo in the Python notebook example.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StartDocumentTextDetection` operation in the form of lines and words. This
    also returns the job ID and its success or failure status.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Batch APIs can be used with JPEG, PNG, and PDF documents stored in an Amazon
    S3 bucket.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, we covered batch and real-time APIs of Amazon Textract. In
    the next section, we will see the implementation of these APIs through the Jupyter
    notebook you set up in the previous section.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Textract API demo with a Jupyter notebook
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will provide Textract APIs'' implementation through a Jupyter
    notebook. We will execute the code cells in the Jupyter notebook you set up at
    [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/Amazon%20Textract%20API%20Sample.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/Amazon%20Textract%20API%20Sample.ipynb),
    which you cloned in a previous step in a Jupyter notebook environment. The notebook
    contains the prerequisite steps, and we will walk through the complete code for
    all the APIs here. We provide only important code snippets in the book, as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '`DetectText API` with a document passed from a local filesystem in the form
    of image bytes'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AnalyzeText API` with a document passed from S3 to detect text, forms, and
    tables from invoices'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch processing with an employment application form using the `StartDocumentText`
    and `GetDocumentText` APIs
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DetectText API
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s begin:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Open the notebook and execute the first cell to import the `boto3` libraries
    to set up the Amazon Textract `boto3` Python SDK.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the notebook to set up and install `boto3:`
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Setting up an Amazon S3 Python SDK `boto3` client: [https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html):'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Setting up an Amazon Textract Python SDK `boto3` client: [https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/textract.html](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/textract.html):'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Download the sample documents from [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/sample-invoice.png](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/sample-invoice.png).
    If you have already cloned this GitHub repository, you don't have to download
    the sample again, you can directly refer to them from your notebook under `Chapter
    02`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions in the *Creating an Amazon S3 bucket and a folder and
    uploading objects* sub-section in the *Setting up your AWS environment* section
    to create an S3 bucket and upload your sample documents.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the name of the Amazon S3 bucket you created and to which you uploaded
    the sample documents and paste it in the notebook:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is the image we are going to use in this notebook:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'That displays the following image:'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.17 – A sample receipt'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B17528_02_17.jpg)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.17 – A sample receipt
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's get back to the notebook and run the following code to see how Amazon
    Textract's `DetectText API` works.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code will read the document''s content in the form of image bytes:'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code will call Amazon Textract by passing image bytes from your
    local file in your filesystem:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You are passing the image bytes directly to this API and getting a JSON response.
    This JSON response has a structure that contains blocks of identified text, pages,
    lines, a bounding box, form key values, and tables. In order to understand the
    Amazon Textract JSON structure and data types, refer to this link: [https://docs.aws.amazon.com/textract/latest/dg/API_Block.html](https://docs.aws.amazon.com/textract/latest/dg/API_Block.html).'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we will import the JSON Python package so we can print our API responses:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following shows a sample JSON response for a line from the document. It
    consists of blocks, the block type, the confidence score of detecting this block
    type line, and the geometrical location of the line using bounding boxes, along
    with the identified text:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This API will not give you forms and tables. It gives only lines, words, and
    corresponding bounding boxes. This API will be helpful for use cases such as paragraph
    detection in audit documents and extracting text from scanned books.
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Execute the rest of the cells in the notebook to explore the JSON response in
    detail.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: DetectDocument API
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we will show you how you can use the `DetectDocument` API to detect text
    in two-column documents in a reading order, with your data in stored in an Amazon
    S3 bucket:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Download the sample documents from [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/two-column-image.jpeg](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2002/two-column-image.jpeg).
    If you have already cloned this GitHub repository, you don't have to download
    the sample again, you can directly refer to it under `Chapter 02`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Upload these documents to your Amazon S3 bucket under the `textract-samples`
    prefix using the instructions here: [https://docs.aws.amazon.com/AmazonS3/latest/user-guide/upload-objects.html](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/upload-objects.html).'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display the input document from the Amazon S3 bucket:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Invoke the `DetectDocumentText` API by specifying the Amazon S3 bucket and
    the filename, as shown in the following code snippet. Let''s also print the response
    to review the results:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For more details about the `DetectDocumentText` API, refer to this link: [https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/textract.html#Textract.Client.detect_document_text](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/textract.html#Textract.Client.detect_document_text).'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once we have the response, we will use the following code to parse documents
    in reading order for multi-page documents. We will use the Amazon Textract JSON
    response parser to get the lines in reading order. Please run this command to
    install this library:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, run the following code to see the results printed line by line for multi-column
    format documents:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You get the following response:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Textract response for lines in reading order](img/B17528_02_18.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Textract response for lines in reading order
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: AnalyzeDocument API
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will analyze invoices with the `AnalyzeDocument` API to extract forms
    and tables:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'Call the Amazon Textract `AnalyzeDocument` API:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the following code to parse the key/value pairs and search for keys. To
    make it easy to parse the Textract response, you can use the Amazon Textract Response
    Parser library. We will use this to extract the data and search for some keys:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the following code, we are looking for the `Phone Number` ikey n the document:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the following code, we are looking for the `Address` key in the document:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You will get the following output:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To parse tables from the JSON response, please refer to the following code
    snippet:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You will see the following response:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can convert these values into a pandas DataFrame, which we will cover in
    [*Chapter 16*](B17528_16_Final_SB_ePub.xhtml#_idTextAnchor189)*, Improving the
    Accuracy of PDF Batch Processing.*
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To find out more about the API JSON responses, refer to this link: https://docs.aws.amazon.com/textract/latest/dg/how-it-works-tables.html.'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Processing PDF documents using Textract Asynchronous APIs
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, you will see how to analyze PDF documents using Textract async
    APIs for a sample job application form:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – A sample job application file](img/B17528_02_19.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – A sample job application file
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will help you get started with the `StartDocumentText` API
    and the `GetDocumentText` API:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this `startTextAnalysis` method, you call the `StartDocumentTextDetection`
    API to start the text analysis job:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once you start the analysis, you use the following method to check whether
    the analysis is complete:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once the job is completed, you can use the `GetDocumentTextDetection` API to
    get the results:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: And we are done with the demo. Hopefully, you have had an opportunity to review
    and work with the different Textract APIs for real-time and batch processing and
    have successfully completed your notebook. In the next section, we will see how
    you can use these APIs to build serverless applications.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Building applications using Amazon Textract APIs
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have spoken about both synchronous (or real-time) APIs and asynchronous
    (or batch) APIs. Now, the question is how to integrate these APIs into an application.
    You can quickly integrate these APIs into a web application or any batch processing
    systems by using AWS Lambda. AWS Lambda runs any code in a serverless manner,
    be it Java or Python. It''s an event-based trigger or programming technique in
    which you trigger a Lambda function based on an event. For example, you upload
    your documents to Amazon S3, which can trigger a Lambda function. In that Lambda
    function, you can call the Amazon Textract APIs and save the results in Amazon
    S3:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Building serverless architecture with Amazon Textract to use
    with your apps'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17528_02_20.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.20 – Building serverless architecture with Amazon Textract to use with
    your apps
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: We will cover the architecture in detail in upcoming chapters, where we will
    talk about how you can build applications using the synchronous versus asynchronous
    APIs of Amazon Textract. We will also talk about using AWS API Gateway to create
    RESTful APIs to integrate into your web applications or mobile applications.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw a detailed introduction to Amazon Textract and its product
    features, along with a console walk-through, as well as running code samples using
    Textract APIs for different types of documents using both real-time and batch
    analysis.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: We started by introducing the ready-made intelligence that Amazon Textract offers
    with powerful pre-trained ML models, and the ability to use its capabilities in
    your applications with just an API call. We also read about some popular use cases
    that Textract can be used for, along with references to some of the following
    chapters, where we will review those use cases in greater detail. We also read
    about Textract's benefits as compared to traditional OCR applications and rule-based
    document processing.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: We covered various examples on how you can use Amazon Textract with different
    types of scanned images and forms. We reviewed different functions of Textract,
    such as detecting raw text, detecting form values that are stored as key/value
    pairs, detecting text in tables, detecting pages of text, detecting lines and
    words, detecting handwritten text and printed text, and detecting text in multiple
    languages, as well as detecting text that is written in two-column styles in documents.
    We covered both synchronous processing and asynchronous processing using Textract
    APIs. We also saw how to set up an Amazon SageMaker Jupyter notebook, clone the
    GitHub repository, and get started with running a Jupyter notebook. We were able
    to use an Amazon S3 bucket to store input documents and use them with Textract,
    and we were able to extract data from unstructured documents and store them in
    an Amazon S3 bucket.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we also covered Amazon Textract real-time APIs such as the
    **AnalyzeDocument** API and the **DetectDocumentText** API. We discussed the expected
    input document formats for these APIs and their limitations. We then spoke about
    how you can scale document processing for use cases where you need to extract
    data in batches. We read about **batch processing APIs** along with a Python SDK
    demo. Finally, we introduced an architecture to integrate Textract into your applications
    using AWS Lambda.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will be introduced to Amazon Comprehend, an AI service
    that uses ML to uncover insights in text. You will learn about different NLP techniques,
    review the features for Amazon Comprehend, read about its APIs, learn how you
    can set up a custom NLP model using Comprehend to detect entities unique to your
    business, and, like we did in this chapter, you will see Comprehend in action
    for different use cases.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
