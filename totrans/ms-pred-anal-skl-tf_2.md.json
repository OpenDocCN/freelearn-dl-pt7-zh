["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n%matplotlib inline\n```", "```py\n# importing data\ndata_path= '../data/diamonds.csv'\ndiamonds = pd.read_csv(data_path)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['cut'], prefix='cut', drop_first=True)],axis=1)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['color'], prefix='color', drop_first=True)],axis=1)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['clarity'], prefix='clarity', drop_first=True)],axis=1)\ndiamonds.drop(['cut','color','clarity'], axis=1, inplace=True)\n```", "```py\nfrom sklearn.preprocessing import RobustScaler\ntarget_name = 'price'\nrobust_scaler = RobustScaler()\nX = diamonds.drop('price', axis=1)\nX = robust_scaler.fit_transform(X)\ny = diamonds[target_name]\n# Notice that we are not doing train-test split\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=55)\n```", "```py\nfrom sklearn.ensemble import RandomForestRegressor\nRF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=123, n_jobs=-1)\n```", "```py\n# this will work from sklearn version 0.19, if you get an error \n# make sure you upgrade: $conda upgrade scikit-learn\nfrom sklearn.model_selection import cross_validate\n```", "```py\n scores = cross_validate(estimator=RF,X=X,y=y,\n scoring=['mean_squared_error','r2'],\n cv=10, n_jobs=-1)\n```", "```py\nprint(\"Mean test MSE:\", round(scores['test_mean_squared_error'].mean()))\nprint(\"Mean test R-squared:\", scores['test_r2'].mean())\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n%matplotlib inline\n```", "```py\n# importing data\ndata_path= '../data/diamonds.csv'\ndiamonds = pd.read_csv(data_path)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['cut'], prefix='cut', drop_first=True)],axis=1)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['color'], prefix='color', drop_first=True)],axis=1)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['clarity'], prefix='clarity', drop_first=True)],axis=1)\ndiamonds.drop(['cut','color','clarity'], axis=1, inplace=True)\n```", "```py\nfrom sklearn.preprocessing import RobustScaler\ntarget_name = 'price'\nrobust_scaler = RobustScaler()\nX = diamonds.drop('price', axis=1)\nX = robust_scaler.fit_transform(X)\ny = diamonds[target_name]\n```", "```py\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.model_selection import cross_validate\n```", "```py\n## KNN\nknn = KNeighborsRegressor(n_neighbors=20, weights='distance', metric='euclidean', n_jobs=-1)\nknn_test_mse = cross_validate(estimator=knn,X=X,y=y,\n scoring='mean_squared_error', \n cv=10, n_jobs=-1)['test_score']\n\n## Random Forests\nRF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)\nRF_test_mse = cross_validate(estimator=RF,X=X,y=y,\n scoring='mean_squared_error', \n cv=10, n_jobs=-1)['test_score']\n\n## Boosting\nboosting = AdaBoostRegressor(n_estimators=50, learning_rate=0.05, random_state=55) \nboosting_test_mse = cross_validate(estimator=boosting,X=X,y=y,\n scoring='mean_squared_error', \n cv=10, n_jobs=-1)['test_score']\n```", "```py\n mse_models = -1*pd.DataFrame({'KNN':knn_test_mse,\n 'RandomForest': RF_test_mse,\n 'Boosting':boosting_test_mse})\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.metrics import mean_squared_error\n%matplotlib inline\n```", "```py\n# importing data\ndata_path= '../data/diamonds.csv'\ndiamonds = pd.read_csv(data_path)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['cut'], prefix='cut', drop_first=True)],axis=1)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['color'], prefix='color', drop_first=True)],axis=1)\ndiamonds = pd.concat([diamonds, pd.get_dummies(diamonds['clarity'], prefix='clarity', drop_first=True)],axis=1)\ndiamonds.drop(['cut','color','clarity'], axis=1, inplace=True)\n```", "```py\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split\ntarget_name = 'price'\nrobust_scaler = RobustScaler()\nX = diamonds.drop('price', axis=1)\nX = robust_scaler.fit_transform(X)\ny = diamonds[target_name]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=123)\n```", "```py\nfrom sklearn.ensemble import RandomForestRegressor\nRF = RandomForestRegressor(random_state=55, n_jobs=-1)\n```", "```py\n parameter_grid = {'n_estimators': [25,50,75,100], \n 'max_depth': [10,15,20,30],\n 'max_features': ['auto','sqrt']}\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n```", "```py\n## Random Forests\nRF_model1 = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=123, n_jobs=-1)\nRF_model1.fit(X_train, y_train)\nRF_model1_test_mse = mean_squared_error(y_pred=RF_model1.predict(X_test), y_true=y_test)\n\n## Random Forest with tunned parameters \nRF_tunned_test_mse = mean_squared_error(y_pred=RF_classifier.predict(X_test), y_true=y_test)\n```"]