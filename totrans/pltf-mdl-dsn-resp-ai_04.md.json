["```py\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update && sudo apt-get install Vault\n```", "```py\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\nsudo yum -y install Vault\n```", "```py\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/Vault\n```", "```py\nchoco install Vault\n```", "```py\n    def fgsm_attack(in_data,epsilon,grad_from_data):\n       pert_out = in_data, + epsilon*grad_from_data.sign()\n       pert_out = torch.clamp(pert_out, 0, 1)\n       return pert_out\n    ```", "```py\n    for data, target in test_loader:\n    data, target = data.to(device), target.to(device)\n    data.requires_grad = True\n    output = model(data)\n    init_pred = output.max(1, keepdim=True)[1]\n    if init_pred.item() != target.item():\n    continue\n    loss = F.nll_loss(output, target)\n    model.zero_grad()\n    loss.backward()\n    data_grad = data.grad.data\n    perturbed_data =    fgsm_attack(data,epsilon,data_grad)\n    ```", "```py\n    from interpret.privacy import DPExplainableBoostingClassifier\n    from interpret.glassbox import ExplainableBoostingClassifier\n    import time\n    from sklearn.metrics import roc_auc_score, accuracy_score\n    ```", "```py\n    start = time.time()\n    dpebm = DPExplainableBoostingClassifier(epsilon=1, delta=1e-6)\n    _ = dpebm.fit(X_train, y_train)\n    dp_auroc = roc_auc_score(y_test, dpebm.predict_proba(X_test)[:, 1])\n    print(f\"DP EBM with eps: {dpebm.epsilon} and delta: {dpebm.delta} trained in {end - start:.2f} seconds with a test AUC of {dp_auroc:.3f}\")\n    end = time.time()\n    ```", "```py\n    start = time.time()\n    ebm = ExplainableBoostingClassifier()\n    _ = ebm.fit(X_train, y_train)\n    ebm_auroc = roc_auc_score(y_test, ebm.predict_proba(X_test)[:, 1])\n    end = time.time()\n    print(f\"EBM trained in {end - start:.2f} seconds with a test AUC of {ebm_auroc:.3f}\")\n    ```", "```py\nDP EBM with eps: 1 and delta: 1e-06 trained in 3.38 seconds with a test AUC of 0.878\nEBM trained in 10.43 seconds with a test AUC of 0.923\n```", "```py\n    from interpret import show\n    show(ebm.explain_global(name='Standard EBM'))\n    show(dpebm.explain_global(name='DP EBM'))\n    ```", "```py\nCREATE MODEL my_dataset.my_model\nOPTIONS(\n  model_type='tensorflow',\n  path='gs://bucket/path/to/saved_model/*',\n  kms_key_name='projects/my_project/locations/my_location/keyRings/my_ring/cryptoKeys/my_key')\nAS SELECT * FROM my_dataset.my_data\n```", "```py\n    git clone https://github.com/hashicorp/Vault-guides.git\n    ```", "```py\n    cd Vault-guides/identity/Vault-agent-k8s-demo\n    ```", "```py\n    Vault server -dev -dev-root-token-id root -dev-listen-address 0.0.0.0:8200\n    ```", "```py\n    export VAULT_ADDR=http://0.0.0.0:8200\n    ```", "```py\n    minikube start --driver=docker\n    ```", "```py\n    minikube status\n    ```", "```py\nhost: Running\nkubelet: Running\napiserver: Running\nkubeconfig: Configured\n```", "```py\n    kubectl create serviceaccount Vault-auth\n    ```", "```py\n    kubectl apply --filename Vault-auth-service-account.yaml\n    ```", "```py\n    Vault policy write myapp-kv-ro - <<EOF\n    path \"secret/data/myapp/*\" {\n    capabilities = [\"read\", \"list\"]}\n    EOF\n    ```", "```py\n    Vault kv put secret/myapp/config \\\n          username='appuser' \\\n          password='suP3rsec(et!' \\\n          ttl='30s'\n    ```", "```py\n    export VAULT_SA_NAME=$(kubectl get sa Vault-auth \\\n        --output jsonpath=\"{.secrets[*]['name']}\")\n    ```", "```py\n    export SA_JWT_TOKEN=$(kubectl get secret $VAULT_SA_NAME \\\n        --output 'go-template={{ .data.token }}' | base64 --decode)\n    ```", "```py\n    export SA_CA_CRT=$(kubectl config view --raw --minify --flatten \\\n        --output 'jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode)\n    ```", "```py\n    export K8S_HOST=$(kubectl config view --raw --minify --flatten \\\n        --output 'jsonpath={.clusters[].cluster.server}')\n    ```", "```py\n    Vault auth enable kubernetes\n    ```", "```py\n    Vault write auth/kubernetes/config \\\n            token_reviewer_jwt=\"$SA_JWT_TOKEN\" \\\n            kubernetes_host=\"$K8S_HOST\" \\\n            kubernetes_ca_cert=\"$SA_CA_CRT\" \\      issuer=\"https://kubernetes.default.svc.cluster.local\"\n    ```", "```py\n    Vault write auth/kubernetes/role/example \\\n            bound_service_account_names=Vault-auth \\\n            bound_service_account_namespaces=default \\\n            policies=myapp-kv-ro \\\n            ttl=24h\n    ```", "```py\npath \"secret/ms-1\" {\n capabilities = [\"read\"]\n}\npath \"secret/ms-2\" {\n capabilities = [\"update\"]\n}\n```", "```py\nVault kv put secret/my-secret sec_val=\"value\"\n```", "```py\n    vault operator init\n    ```", "```py\n    gcloud kms keys update <KEY_NAME> \\\n             --location <LOCATION> \\\n             --keyring <KEYRING_NAME> \\\n             --rotation-period <ROTATION_PERIOD> \\\n             --next-rotation-time <NEXT_ROTATION_TIME>\n    ```"]