["```py\nlibrary(CreditMetrics)\n```", "```py\nset.seed(1)\n```", "```py\nRatingClasses <- c(\"AAA\", \"AA\", \"A\", \"BBB\", \"BB\", \"B\", \"CCC\", \"D\")\n```", "```py\nTransitionMatrix <- matrix(c(90.710, 8.340, 0.710, 0.075, 0.095, 0.025, 0.022, 0.023,\n            0.710, 90.550, 7.810, 0.720, 0.060, 0.120, 0.020, 0.010,\n             0.092, 2.220, 91.250, 5.420, 0.720, 0.230, 0.011, 0.057,\n             0.020, 0.420, 5.890, 85.880, 5.290, 1.190, 1.140, 0.170,\n             0.036, 0.124, 0.670, 7.730, 80.590, 8.790, 1.010, 1.050,\n             0.011, 0.119, 0.230, 0.440, 6.510, 83.440, 4.060, 5.190,\n             0.220, 0.000, 0.230, 1.330, 2.360, 11.210, 64.830, 19.820,\n              0, 0, 0, 0, 0, 0, 0, 100\n              )/100, 8, 8, dimnames = list(RatingClasses, RatingClasses), byrow = TRUE)\n```", "```py\n AAA     AA      A    BBB     BB      B    CCC      D\nAAA 0.90710 0.08340 0.0071 0.00075 0.00095 0.00025 0.00022 0.00023\nAA 0.00710 0.90550 0.0781 0.00720 0.00060 0.00120 0.00020 0.00010\nA 0.00092 0.02220 0.9125 0.05420 0.00720 0.00230 0.00011 0.00057\nBBB 0.00020 0.00420 0.0589 0.85880 0.05290 0.01190 0.01140 0.00170\nBB 0.00036 0.00124 0.0067 0.07730 0.80590 0.08790 0.01010 0.01050\nB 0.00011 0.00119 0.0023 0.00440 0.06510 0.83440 0.04060 0.05190\nCCC 0.00220 0.00000 0.0023 0.01330 0.02360 0.11210 0.64830 0.19820\nD 0.00000 0.00000 0.0000 0.00000 0.00000 0.00000 0.00000 1.00000\n```", "```py\nMCModel <- new(\"markovchain\", transitionMatrix = TransitionMatrix, states=RatingClasses, byrow = TRUE, name=\"MarkovChainModel\")\n```", "```py\nMCModel\n```", "```py\nMCModel\n\nA  8 - dimensional discrete Markov Chain defined by the following states:\n AAA, AA, A, BBB, BB, B, CCC, D\n The transition matrix  (by rows)  is defined as follows:\n AAA     AA      A    BBB     BB      B    CCC      D\nAAA 0.90710 0.08340 0.0071 0.00075 0.00095 0.00025 0.00022 0.00023\nAA 0.00710 0.90550 0.0781 0.00720 0.00060 0.00120 0.00020 0.00010\nA 0.00092 0.02220 0.9125 0.05420 0.00720 0.00230 0.00011 0.00057\nBBB 0.00020 0.00420 0.0589 0.85880 0.05290 0.01190 0.01140 0.00170\nBB 0.00036 0.00124 0.0067 0.07730 0.80590 0.08790 0.01010 0.01050\nB 0.00011 0.00119 0.0023 0.00440 0.06510 0.83440 0.04060 0.05190\nCCC 0.00220 0.00000 0.0023 0.01330 0.02360 0.11210 0.64830 0.19820\nD 0.00000 0.00000 0.0000 0.00000 0.00000 0.00000 0.00000 1.00000\n```", "```py\nMCModel@states\n```", "```py\n[1] \"AAA\" \"AA\"  \"A\"   \"BBB\" \"BB\"  \"B\"   \"CCC\" \"D\" \n```", "```py\ntransitionProbability(MCModel,\"AAA\",\"AA\")\n```", "```py\n[1] 0.0834\n```", "```py\nLGD <- 0.40\n```", "```py\nCreditRiskSpread<-cm.cs(TransitionMatrix, LGD)\n```", "```py\nAAA           AA            A          BBB           BB \n9.200423e-05 4.000080e-05 2.280260e-04 6.802313e-04 4.208845e-03 \n B          CCC\n2.097852e-02 8.259931e-02 \n```", "```py\nRating <- c(\"B\", \"BB\", \"CCC\")\n```", "```py\nEAD <- c(4000, 10000, 500000)\n```", "```py\nRindex <- 0.02\n```", "```py\nRefValue<-cm.ref(TransitionMatrix, LGD, EAD, Rindex, Rating)\n```", "```py\nRefValue$constVal\nRefValue$constPV\n```", "```py\n> RefValue$constVal\n         B         BB        CCC\n 3839.399   9760.818 451244.261\n> RefValue$constPV\n[1] 464844.5\n```", "```py\nabsorbingStates(MCModel)\n```", "```py\n[1] \"D\"\n```", "```py\nlibrary(Bandit)\n```", "```py\nset.seed(1)\n```", "```py\nUsersContacted1 <- c(10000, 9580, 10011, 10007)\nPurchases1 <- c(571, 579, 563, 312)\nPrices <- c(299, 306, 312, 335)\n```", "```py\nPostDistr1Month = sim_post(Purchases1,UsersContacted1, ndraws = 10000)\n```", "```py\n [,1]       [,2]       [,3]       [,4]\n [1,] 0.05836046 0.06371775 0.05441352 0.03088567\n [2,] 0.05829739 0.06186407 0.05624850 0.02976481\n [3,] 0.05621800 0.05805901 0.05795378 0.03280708\n [4,] 0.05841852 0.06459235 0.05968413 0.03087549\n [5,] 0.05342895 0.06145472 0.05901734 0.03027870\n [6,] 0.05382709 0.06170789 0.05352246 0.03130340\n [7,] 0.05566469 0.05698650 0.05440684 0.03335165\n [8,] 0.05723522 0.06025616 0.05833294 0.03082094\n [9,] 0.05617222 0.06314493 0.05721080 0.03309235\n [10,] 0.05308393 0.05988580 0.05163597 0.03038333\n```", "```py\nProbWinner1 <- prob_winner(PostDistr1Month)\n```", "```py\nnames(ProbWinner2) <- Prices\n```", "```py\nProbWinner1\n```", "```py\n 299    306    312    335\n0.1397 0.7846 0.0757 0.0000\n```", "```py\nUsersContacted2 <- c(12350, 12001, 11950, 12500)\nPurchases2 <- c(621, 625, 601, 520)\n```", "```py\nPostDistr2Month = sim_post(Purchases2,UsersContacted2, ndraws = 10000)\n```", "```py\nProbWinner2 <- prob_winner(PostDistr2Month)\n```", "```py\nnames(ProbWinner2) <- Prices\n```", "```py\nProbWinner2\n```", "```py\n 299    306    312    335\n 0.196679 0.602588 0.200732 0.000001\n```", "```py\nUsersContacted3 <- c(14864, 14990, 14762, 10073)\nPurchases3 <- c(803, 825, 791, 141)\n```", "```py\nPostDistr3Month = sim_post(Purchases3,UsersContacted3, ndraws = 10000)\n```", "```py\nProbWinner3 <- prob_winner(PostDistr3Month)\n```", "```py\nnames(ProbWinner3) <- Prices\n```", "```py\nProbWinner3\n```", "```py\n 299    306    312    335\n0.272597 0.529096 0.198307 0.000000\n```", "```py\nsignificance_analysis(Purchases3,UsersContacted3)\n```", "```py\nValueRemaining <- value_remaining(Purchases3,UsersContacted3)\n```", "```py\nPotentialValue <- quantile(ValueRemaining, 0.95)\nPotentialValue\n```", "```py\n 95%\n0.07145922\n```", "```py\ndataset = read.csv('ETFs.csv')\n```", "```py\nstr(dataset)\n```", "```py\n> str(dataset)\n'data.frame':  150 obs. of  6 variables:\n $ SPY: num  0.01054 -0.01962 0.00759 0.0443 0.03392 ...\n $ IEF: num  -0.00725 0.01668 -0.00467 0.00217 -0.01765 ...\n $ XLF: num  0.00325 -0.03047 -0.0089 0.03873 0.02405 ...\n $ IWM: num  0.00852 -0.00655 0.00786 0.01624 0.04372 ...\n $ VWO: num  -0.0105 -0.0232 0.0426 0.038 0.0666 ...\n $ GLD: num  0.0197 0.0255 -0.0111 0.0205 -0.0231 ...\n```", "```py\nsummary(dataset)\n```", "```py\nboxplot(dataset)\n```", "```py\nDataSel<- matrix(0, nrow = 150, ncol = 6)\nrowmax = apply(dataset, 1, max)\nfor (i in 1:150){\n  for (j in 1:6){\n    if (dataset[i,j] == rowmax[i])\n      DataSel[i,j] <- 1\n  }\n}\n```", "```py\nNumObs = 150\nNumArms = 6\n```", "```py\nEFTSelected = integer()\nNumSelections = integer(NumArms)\nRewSum = integer(NumArms)\nTotRew = 0\n```", "```py\nfor (n in 1:NumObs){\n```", "```py\nEFT = 0\nMaxUpBound = 0\n```", "```py\nfor (i in 1:NumArms){\n```", "```py\nif(NumSelections[i]> 0 ){\n      AverageReward = RewSum[i]/NumSelections[i]\n```", "```py\nDeltaI  = sqrt(3/2 * log(n)/NumSelections[i])\n```", "```py\nUpBound = AverageReward + DeltaI\n```", "```py\n} else{\n      UpBound  = 1e400\n    }\n    if(UpBound > MaxUpBound){\n      MaxUpBound = UpBound\n      EFT = i\n    }\n  }\n```", "```py\n  EFTSelected = append(EFTSelected, EFT)\n  NumSelections[EFT] = NumSelections[EFT] + 1\n  reward = DataSel[n, EFT]\n  print(reward)\n  RewSum[EFT] = RewSum[EFT] + reward\n  TotRew = TotRew + reward\n}\n```", "```py\nhist(EFTSelected,\n     col = 'blue',\n     main = 'Histogram of EFTs selections',\n     xlab = 'EFTs',\n     ylab = 'Number of times each EFT was selected')\n```"]