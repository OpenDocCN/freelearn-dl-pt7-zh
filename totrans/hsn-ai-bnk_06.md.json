["```py\nimport quandl\nimport pickle\nimport numpy as np\nimport math\nimport pandas as pd\nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n```", "```py\ntkr = 'DUK'\nquandl.ApiConfig.api_key = '[API key from Quandl]'\n```", "```py\n'''*************************************\n## Retrieve data for 2A.\n'''\necon = quandl.get(\"FRED/TEDRATE\", authtoken=\"[API Key from Quandl]\", start_date='2018-05-31', end_date='2018-07-31')\nNYSE_index = quandl.get('WFE/INDEXES_NYSECOMPOSITE', start_date='2013-05-31', end_date='2018-07-31')\n```", "```py\n'''*************************************\n## Retrieve Data for the target ticker\n'''\nrecord_db = quandl.get_table('SHARADAR/SF1', calendardate='2017-12-31', ticker=tkr,dimension='MRY')\nrecord_db_t_1 = quandl.get_table('SHARADAR/SF1', calendardate='2016-12-31', ticker=tkr,dimension='MRY')\n```", "```py\n'''*************************************\n## Download & Load Data for 2C.\n'''\ntkr = 'DUK'\nquandl.ApiConfig.api_key = 'nzBtupqX5H65EG3sFusF'\nrecord_db_t_2017Q1=quandl.get_table('SHARADAR/SF1', calendardate='2017-3-31', ticker=tkr,dimension='MRQ')\n...\ndf_all = pd.concat(list_all)\n\n#fix the dataframes\n\n#convert to float\n\n#create new fields\n\n#remove any record with na and 0 values to avoid division errors\n\n#we take a proxy here, should use last period's numbers as denominator not current period\n```", "```py\n'''*************************************\n3\\. Projection\n'''\nprint('optimization...')\n#simulations\nrecord_db_f = record_db\n\n#Projection\n...\n\ndef cal_F_WACC(record_db_f, logreg, logreg_sc, new_debt_pct,price_offering,levered_beta,sales_growth,coefs,r_free):\n...\nfor new_debt_pct in debt_pct_range:\n for price_offering in price_offering_range:\n ...\n F_WACC, F_default_risk,conditions = cal_F_WACC(record_db_f,logreg,logreg_sc, new_debt_pct, price_offering,levered_beta,sales_growth,coefs,r_free)\n '''****************************************\n 4\\. Calculate WACC\n '''\n #update WACC\n obj = F_WACC < optimal_WACC and F_default_risk/default_risk_existing-1<=0.75\n ...\n```", "```py\n#equity offering constraints --- not bounding\nprice_offering = record_db_f['price'][0]\nunit_offering = int(F_new_equity / price_offering)\nF_eps = F_earnings / (unit_offering+record_db_f['shareswa'][0])\nequity_growth = F_equity / record_db_f['equity'][0]-1\neps_growth = abs(F_eps/ (record_db_f['netinc'][0]/record_db_f['shareswa'][0])-1)\nc_eq_1 = equity_growth <= 0.1\nc_eq_2 = eps_growth <= 0.3\n```", "```py\nfrom pyquery import PyQuery\nimport pandas as pd\nimport quandl\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\nfrom sklearn.metrics import r2_score\n\n...\n```", "```py\ncal_LIND = quandl.get(\"FRED/CASLIND\", authtoken=\"nzBtupqX5H65EG3sFusF\")\ncal_ele = quandl.get([\"EIA/ELEC_SALES_CA_RES_M\",\"EIA/ELEC_SALES_CA_IND_M\"], authtoken=\"nzBtupqX5H65EG3sFusF\")\n```", "```py\n#update the index date to begin of month (in fact all index should be referring to end of month)\ncal_ele['mth_begin'] = cal_ele.index\n#change the column to begin of month\n...\n\nreg_retail = linear_model.LinearRegression()\nreg_retail.fit(df_marco[[' MeanAvgTemperature']], \\\n               df_marco['EIA/ELEC_SALES_CA_RES_M - Value'])\nreg_retail.coef_\nreg_retail_pred = \\\n            reg_retail.predict(df_marco[['MeanAvgTemperature']])\nerror_retail = r2_score(df_marco['EIA/ELEC_SALES_CA_RES_M - \\\n                                  Value'], reg_retail_pred)\n\nreg_ind = linear_model.LinearRegression()\nreg_ind.fit(df_marco[[' MeanAvgTemperature']], \\\n            df_marco['EIA/ELEC_SALES_CA_IND_M - Value'])\nreg_ind.coef_\nreg_ind_pred = reg_ind.predict(df_marco[['MeanAvgTemperature']])\nerror_ind = r2_score(df_marco['EIA/ELEC_SALES_CA_IND_M - \\\n                               Value'], reg_ind_pred)\n...\n```"]