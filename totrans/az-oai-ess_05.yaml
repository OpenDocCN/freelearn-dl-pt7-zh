- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Contact Center Analytics Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our previous chapter, we addressed the challenge of managing scattered information
    across multiple documents. We explored how Azure OpenAI simplifies the process
    of finding relevant content by setting up tools in the Azure portal and utilizing
    Python code to organize documents into a searchable format. With Azure OpenAI’s
    assistance, we efficiently tackled specific challenges, transforming chaos into
    order and streamlining content search.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’re delving into the construction of a contact center analytics
    solution. We’ll outline the challenges, technical needs, and design essentials
    for this endeavor. Our aim is to showcase the integration of Azure OpenAI and
    Azure Communication Services to build an advanced analytics platform. By mastering
    these concepts, you will learn how to enhance contact center operations and utilize
    AI and communication tech efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Problem statement introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a contact center analytics solution using Azure OpenAI and Azure Communication
    Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem statement introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you’re running a food delivery app in your city, overseeing a dedicated
    team of 10 members handling customer queries. As more people use the app, the
    number of customer chats skyrockets. Navigating through millions of these chats
    has become a major challenge for your team, making it tough to address customer
    issues during the food delivery process. The sheer volume of data is making it
    hard to pinpoint problems within the app or the delivery process overall. On top
    of that, the uncertainty about what steps to take next in app development is making
    things even more complicated. It’s becoming increasingly crucial to efficiently
    manage and understand all this chat data, spot app and process issues, and figure
    out the next steps for development to keep your food delivery platform successful.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the practical exercises in this chapter, access the source
    code available in this chapter's GitHub repository at [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter5.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter5.ipynb)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the requirements that we already configured in [*Chapter
    4*](B21019_04.xhtml#_idTextAnchor059):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python 3.9, 3.10, or 3.11: [https://www.python.org/downloads/](https://www.python.org/downloads/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Developer CLI: [https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Node.js 14+: [https://nodejs.org/en/download](https://nodejs.org/en/download)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Git: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Powershell 7+ (pwsh): [https://github.com/powershell/powershell](https://github.com/powershell/powershell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure account: If you’re new to Azure, get an Azure account for free and you’ll
    get some free Azure credits to get started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure subscription with access enabled for Azure OpenAI Service: You can request
    access at [https://aka.ms/oaiapply](https://aka.ms/oaiapply)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure OpenAI connection and model information:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI API key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI embedding model deployment name
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI API version
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Only the following additional technical requirement is needed beyond those
    specified in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059):'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Communication Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just a quick reminder, make sure you’ve got an active Azure account, as we discussed
    in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059). If you need guidance on setting
    up your Azure account and activating a subscription, you can find all the details
    in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  prefs: []
  type: TYPE_NORMAL
- en: Architecture design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve got a handle on the key architectural elements needed for crafting
    our solution, let’s look at putting these pieces together in the Azure portal.
    We covered the successful deployment of an Azure OpenAI Service model, whether
    it’s GPT-3, ChatGPT, or GPT-4, in the previous chapters. In this chapter, we’re
    shifting our focus to creating a brand-new Azure Communication Services. Now,
    let’s dive into the details and start putting this plan into action.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’re going to manually send a bunch of messages to Azure Communication
    Services. After that, we’ll grab those messages from the same place and use them
    to make a prompt. This prompt is then going to be sent over to the OpenAI service,
    and it will give us the summary we need. It’s a hands-on process to make our communication
    smoother and get important insights for our food delivery app.
  prefs: []
  type: TYPE_NORMAL
- en: Building a contact center analytics solution using Azure OpenAI and other Azure
    services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just a quick reminder, make sure you’ve got an active Azure account, as we discussed
    in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059). If you need guidance on setting
    up your Azure account and activating a subscription, you can find all the details
    in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  prefs: []
  type: TYPE_NORMAL
- en: Azure subscription prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following prerequisites were established in [*Chapter 2*](B21019_02.xhtml#_idTextAnchor023)
    and can be reused:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure OpenAI resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployed Azure OpenAI models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the following tools, excluding those already established in [*Chapter
    2*](B21019_02.xhtml#_idTextAnchor023).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, your focus will shift to the creation of a new Azure Communication
    Services.
  prefs: []
  type: TYPE_NORMAL
- en: To set up your Azure Communication Services service, head to the search bar
    at the top navigation on the Azure home page and type in `Communication Service`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t see it, click on `Communication Service` and click on **Create**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1: Create a resource](img/B21019_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Create a resource'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on **Create**, you get the option to select from the list of
    services. Select **Communication Services** from the dropdown, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2: Selecting Communication Services](img/B21019_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: Selecting Communication Services'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you land on the **Communication Services** page, you need to click on
    the **Create** button, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3: Create under Communication Services](img/B21019_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: Create under Communication Services'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve successfully created the Communication Service from the Marketplace,
    move on to the next step. On the `azure-openai-rg`) that you set up back in [*Chapter
    4*](B21019_04.xhtml#_idTextAnchor059). It’s about connecting the dots to make
    sure everything aligns smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4: Entering Communication Services data](img/B21019_05_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Entering Communication Services data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter your desired resource name (for example, `azure-openai-communication-service`)
    and data location for Communication Services, and click on the **Next** button
    to go to the **Tags** tab. You can ignore the **Tags** section for now. Tags are
    name/value pairs that allow you to categorize resources and facilitate consolidated
    billing by applying the same tag to multiple search and resource groups. Proceed
    by clicking **Next** and then go to the **Review + Create** tab. Here, it will
    display the details you chose in the previous steps. Review all the information
    and click on the **Create** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5: Reviewing and creating data](img/B21019_05_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Reviewing and creating data'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we’ll move on to building a solution using the services that we configured.
  prefs: []
  type: TYPE_NORMAL
- en: Building a solution using Azure Communication Services and OpenAI Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have set up all the essential services in our Azure portal, we can
    begin constructing our solution. To develop the code, I will be working within
    the Python Jupyter notebook, and the remaining installations are the same as those
    defined in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059)’s Solution Using Azure
    OpenAI section.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to install one extra Python library for this code other than those
    installed in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Juypter notebook and install the following package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Our code includes the following sections in which we are going to develop our
    solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing packages
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Establishing chat user identities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the chat client
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating a conversation transcript
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summarizing the chat thread
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will import all the packages that are required to build the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see a variety of libraries in the preceding code. Let’s delve into
    each of these libraries in the table here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Imported Packages** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `from azure.communication.chat import ChatClient, CommunicationTokenCredential,`
    `ChatMessageType, ChatParticipant` | Enables real-time chat with Azure Communication
    Services |'
  prefs: []
  type: TYPE_TB
- en: '| `from azure.communication.identity import` `CommunicationIdentityClient,
    CommunicationUserIdentifier` | Manages user identities and authentication tokens
    |'
  prefs: []
  type: TYPE_TB
- en: '| `from datetime import` `datetime, timedelta` | Handles date and time operations
    |'
  prefs: []
  type: TYPE_TB
- en: '| `import os` | Interacts with the operating system and manages environment
    variables |'
  prefs: []
  type: TYPE_TB
- en: '| `import requests` | Makes HTTP requests, commonly used for API interaction
    |'
  prefs: []
  type: TYPE_TB
- en: '| `import json` | Encodes and decodes JSON data |'
  prefs: []
  type: TYPE_TB
- en: '| `import openai` | Accesses the OpenAI API for advanced language processing
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dotenv` | Loads environment variables from a `.``env` file |'
  prefs: []
  type: TYPE_TB
- en: 'Table 5.1: Explanation of imported packages'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s initialize all the necessary constants using the keys provided in
    the `.env` file. Add `COMMUNICATION_CONNECTION_STRING` and `COMMUNICATION_ENDPOINT`
    to your already existing `.``env` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these to the `.env` file that was created in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059)
    with the connection string and endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow these steps to set up the Communication Service endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the `COMMUNICATION_CONNECTION_STRING` value with the connection string
    value found in your Azure Communication Service under the **Keys** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, modify the values of `COMMUNICATION_ENDPOINT` with the value found
    in your Azure Communication Service under the **Keys** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By completing these configurations, you’ll have the necessary connection settings
    for your resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Establishing chat user identities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This code establishes user identities (`identity1` and `identity2`) in Azure
    Communication Services and retrieves individual access tokens (`token_result1`
    and `token_result2`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These tokens are designed for authentication purposes when engaging with the
    chat functionality of Azure Communication Services. Each user identity is linked
    to a distinct token, granting access specifically to the defined scope, which,
    in this instance, is `chat`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the chat client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this code, we establish a chat thread between `Agent` and `Customer` using
    Azure Communication Services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The chat clients are initialized for each user, and a chat thread is created
    with specified participants and a topic, allowing for subsequent interaction and
    messaging within the created thread.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now populate the chat thread with a sample conversation between the
    agent and customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, this code uses a `for` loop to simulate a back-and-forth conversation
    between an agent and a customer by sending messages to a chat thread:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The messages address troubleshooting steps for a dishwasher issue, and the conversation
    flow alternates between the agent and customer perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a conversation transcript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This code retrieves text messages from a chat thread that was sent within the
    last day, filters out non-text messages, and constructs a conversation prompt
    by concatenating sender names and message content. The prompt is then printed,
    providing a summary of the recent conversation in reverse chronological order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6: An overview of the conversation output](img/B21019_05_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: An overview of the conversation output'
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing the chat thread
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This code utilizes OpenAI’s GPT model to generate an extended response based
    on a provided prompt, which includes an introductory text and a conversation prompt.
    The generated summarized text is then processed and printed along with the original
    prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7: An overview of the summary output](img/B21019_05_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: An overview of the summary output'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we have created an analytics solution for contact centers using an integration
    of OpenAI and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delved into the intricacies of implementing and leveraging
    Azure Communication Services. Our practical exploration included the creation
    of a simulated chat dialogue involving an agent and a customer. Employing ChatGPT,
    we conducted an insightful analysis of the comprehensive conversation summary.
  prefs: []
  type: TYPE_NORMAL
- en: While our example focused on text-based chat interactions, it’s important to
    note that the versatility of Azure Communication Services extends beyond mere
    text. It seamlessly accommodates audio, video, or a blend of multiple formats
    for a more dynamic user experience. This holistic approach enables us to gain
    valuable insights into customer concerns, allowing the derived statistics to serve
    as invaluable inputs for shaping the future product roadmap. By exploring various
    conversation formats, we can uncover potential pain points and identify key areas
    for improvement, ultimately contributing to the enhancement of our products and
    services.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to delve into the world of interacting with
    SQL databases using prompts.
  prefs: []
  type: TYPE_NORMAL
