- en: Introduction to Artificial Intelligence on Amazon Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start with a high-level overview of **artificial intelligence**
    (**AI**), including its history and the broad set of methods that it uses. Then,
    we will take a look at a few applications of AI that have the potential to profoundly
    change our world. With growing interests in AI, many companies, including Amazon,
    are offering a plethora of tools and services to help developers create intelligent-enabled
    applications. We will provide a high-level overview of AI offerings from Amazon
    Web Services, and we will also provide our guidance on how to best leverage them.
    Being a hands-on book, we will quickly dive into intelligent-enabled application
    development with Amazon Web Services.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of AI and its applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the different types of Amazon Web Services offerings for AI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up an Amazon Web Services account and the environment for intelligent-enabled
    application development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get hands-on experience with Amazon Rekognition and other supporting services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop our first intelligent-enabled application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book's GitHub repository, which contains the source code for this chapter,
    can be found at [https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services](https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services).
  prefs: []
  type: TYPE_NORMAL
- en: What is AI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AI is an umbrella term that describes a branch of computer science that aims
    to create intelligent agents. The field of AI is highly technical and specialized;
    there is a broad set of theories, methods, and technologies in AI that allow computers
    to see (computer vision), to hear (speech recognition), to understand (natural
    language processing), to speak (text-to-speech), and to think (knowledge reasoning
    and planning).
  prefs: []
  type: TYPE_NORMAL
- en: It may seem that AI is a buzzword of our current times, but it has existed since
    the 1950s, when early work on artificial neural networks that mimic led the human
    brain stirred up excitement for thinking machines. With all the fanfare it receives
    in the media today, it is hard to believe that this field had to endure two AI
    winters, where interest in AI research and development dwindled. Today, AI has
    become popular again, thanks to the increased volume of data, cheaper storage,
    advancements in algorithms, and an increase in computing power.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important subfields of AI is **machine learning** (**ML**).
    ML is such a prominent part of AI that these two terms are often used interchangeably
    today. ML is the most promising set of techniques to achieve AI. These techniques
    gave us a new way to program computers through self-learning algorithms that can
    derive knowledge from data. We can train ML models that can look for patterns
    and draw conclusions like humans would. With these self-learning algorithms, the
    data itself has become the most valuable asset. Data has become the competitive
    advantage in industries; it is the new intellectual property. Between similar
    ML techniques (even inferior ML techniques), the best data will win.
  prefs: []
  type: TYPE_NORMAL
- en: What's old is new again. Artificial neural networks, once again, became the
    focus for ML research and development. More data, more compute, and new algorithms
    such as backpropagation, are enabling neural networks to have many hidden layers,
    also known as deep neural networks or deep learning. The increase in the accuracy
    of deep neural network models was almost impossible just a few years ago. Today,
    deep learning is the major breakthrough that is driving the modern-day AI boom.
    This combination of data, software, and hardware is creating a new breed of intelligent
    agents that can often see, hear, understand, speak, and even think like humans
    when provided with abundant information that is related to the world.
  prefs: []
  type: TYPE_NORMAL
- en: AI has become a vital part of the technology landscape. Businesses, big and
    small, are solving problems by leveraging AI. AI capabilities are seeping into
    every aspect of our lives, giving us better memory, better vision, better cognitive
    abilities, and much more. In most cases, AI will not be sold as the product by
    itself. Rather, products you already use will be improved with AI, and will become
    intelligent-enabled solutions. What is most exciting to us is the democratization
    of AI and ML technologies and services. The abundance of such technologies and
    services means practitioners can easily leverage AI to add intelligence to products
    that affects the way we live, work, and play.
  prefs: []
  type: TYPE_NORMAL
- en: This book will help you become an AI practitioner. We will teach you, through
    hands-on projects, the tools and techniques that are needed to embed AI capabilities
    into software solutions. Successful intelligent-enabled solutions require a combination
    of architecture design, software engineering, and data science. You will learn
    how to design, develop, deploy, and maintain production-grade software solutions
    with AI capabilities. As an AI practitioner, it is important to see AI through
    the lens of business capabilities, rather than just technologies. This book aims
    to bring together various skills to help you develop an intuition for well-designed
    intelligent-enabled solutions that solve real-world problems.
  prefs: []
  type: TYPE_NORMAL
- en: Applications of AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our lives have already been greatly impacted by applications of AI, including
    the way we search for information, shop for products, communicate with each other,
    and much more. However, we are only in the nascency of this intelligent software
    renaissance. So many amazing AI applications already exist, so let's look at a
    few examples.
  prefs: []
  type: TYPE_NORMAL
- en: Autonomous vehicles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One AI application that's getting much media attention is autonomous vehicles,
    also known as self-driving cars. These vehicles are capable of perceiving the
    world around them, and drive with little or no human intervention.
  prefs: []
  type: TYPE_NORMAL
- en: These autonomous vehicles are the perfect fusion of sensors and AI technologies
    that have been combined to create the self-driving capability. To develop the
    self-driving capability, these vehicles have logged millions of miles on highways
    and local roads, and billions more in simulations. Gobs of data coming from arrays
    of sensors, including cameras, radar, lidar, sonar, GPS, and many more, are used
    to train numerous ML models to perform the various perception and actuation tasks
    that are required to move vehicles safely in real-world conditions. The resulting
    AI capabilities, such as computer vision, object detection, predictive modeling,
    and obstacle avoidance algorithms, can create complex models of the environment
    that onboard computers can understand in order to control, to plot paths, and
    to navigate.
  prefs: []
  type: TYPE_NORMAL
- en: Self-driving technology is less error-prone than human drivers, and can potentially
    save hundreds of thousands of lives from crashes and accidents. This technology
    can also be a mobility provider for individuals who are unable to drive themselves,
    such as the elderly or disabled. At the time of writing, there are no true fully
    autonomous vehicles in large deployment in the world. We can't even imagine how
    this technology will reshape and mold our world in the decades to come.
  prefs: []
  type: TYPE_NORMAL
- en: AI in medical care
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AI and ML is starting to transform the healthcare industry. These technologies
    are being used to improve diagnostic capabilities and clinical decision-making
    to speed up the detection and treatment of many diseases. These AI programs do
    not just follow preprogrammed guidelines for how to diagnose a disease. Instead,
    the AI is *taught* to recognize the symptoms of particular medical conditions,
    such as heart arrhythmias, diabetes-related vision loss, and even cancer.
  prefs: []
  type: TYPE_NORMAL
- en: A medical image is a rich source of data about a patient's health. With high-resolution
    images from X-rays, MRIs, and CAT scans, ML models can be trained with millions
    of example images labeled with particular medical conditions. With sufficient
    examples, the resulting ML models can diagnose diseases with accuracies that rival,
    if not surpass, human doctors. With AI programs tirelessly analyzing for valuable
    medical insights, they can aid doctors with faster and more accurate diagnoses,
    and the patients can receive treatment sooner.
  prefs: []
  type: TYPE_NORMAL
- en: More profoundly, the resulting AI capabilities incorporate the knowledge and
    experience of the best doctors and clinicians that helped to develop these capabilities.
    Once developed, the capabilities can be massively replicated and distributed to
    primary care offices and walk-in clinics, where this level of medical expertise
    was previously inaccessible. This can save thousands of lives through the early
    detection and treatment of diseases. It will have a profound impact on people's
    lives, especially in locations of the world where specialized doctors are scarce.
  prefs: []
  type: TYPE_NORMAL
- en: Personalized predictive keyboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there is a lot of excitement in ground-breaking, revolutionary, and even
    moon-shot AI applications that will no doubt change our world, you don't always
    have to chase after these fundamentally difficult problems to bring value to our
    world with AI.
  prefs: []
  type: TYPE_NORMAL
- en: One good example of an apt intelligent-enabled solution for a recent real-world
    problem is predictive keyboards on mobile devices. When touchscreen mobile devices
    became popular, we had to learn to type on small virtual keyboards, often on the
    go, with fewer fingers and with more distractions. These predictive keyboards
    facilitated faster typing by suggesting words and punctuation that we may wish
    to type, thus reducing friction in mobile communication.
  prefs: []
  type: TYPE_NORMAL
- en: The predictive capabilities of these keyboards are often built with ML and **natural
    language processing** (**NLP**) technologies that combine language models, custom
    dictionaries, and learned preferences in their prediction engines. The best prediction
    engines are likely built using a form of **recurrent neural network** (**RNN**)
    called **long short-term memory** (**LSTM**). These are neural networks that try
    to predict the next word given a window of previously typed words. The key to
    a successful prediction is in its speed and personalization. Each key press results
    in a prediction, and so the prediction engines must run fast on mobile hardware.
    These prediction engines are designed to get more intelligent as we use them;
    they are good examples of human-in-the-loop online learning systems.
  prefs: []
  type: TYPE_NORMAL
- en: Even though they are not saving lives by the thousands, the users of these predictive
    keyboards have saved trillions of keystrokes. We just love the elegance of these
    intelligent-enabled software solutions that have applied the right AI technologies
    to the right problems. We hope that, with the skills and insights you will have
    gained from this book, you will be able to find elegant AI applications to make
    our lives better, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Why use Amazon Web Services for AI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon Web Services** or **AWS** is by far the largest, most comprehensive
    cloud computing platform. AWS offers a broad set of on-demand cloud-based services,
    including compute, storage, databases, networking, analytics, and much more. For
    many years, developers have leveraged these services to build enterprise-grade
    software solutions at scale and speed that cannot be matched by any other cloud
    computing platform.'
  prefs: []
  type: TYPE_NORMAL
- en: What's exciting is that AWS also offers a plethora of AI services that provide
    pre-trained AI capabilities, including image recognition, NLP, speech recognition
    and generation, and conversation agents. AWS also has ML services that simplify
    the building, training, and deployment of custom AI capabilities via ML and deep
    learning models. Companies and developers can leverage these AI and ML services
    to add intelligence to their software solutions just as easily as with AWS' other
    cloud computing services.
  prefs: []
  type: TYPE_NORMAL
- en: However, the true power of developing intelligent-enabled solutions on AWS is
    unlocked when developers combine the AWS AI and ML services with the rest of the
    AWS cloud computing ecosystem. By combining various AWS services, you instantly
    get access to an enterprise-grade cloud computing platform with a highly reliable,
    scalable, and secure infrastructure. This enables you, the AI practitioner, to
    easily collect and process large datasets so that you can integrate various AI
    capabilities, rapidly prototype ideas, and continuously experiment and iterate
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: As the title of this book suggests, this is a hands-on guide. We aim to bring
    together the various skills that are needed to design and build end-to-end AI
    solutions on the AWS platform. The keyword here is *skills*. We not only cover
    the important concepts of AI, but we also help you put these concepts into practice
    with numerous hands-on projects. It is only through these practical hands-on experiences
    that you will develop an intuition for well-designed, intelligent-enabled solutions.
    The projects in this book can be deployed to the AWS cloud platform; you can learn
    from them, you can enhance them, and you can even showcase them to others.
  prefs: []
  type: TYPE_NORMAL
- en: Working within the enormous AWS ecosystem will require a steep learning curve.
    New users can easily be overwhelmed by the AWS offerings. In this book, we will
    teach you about the patterns and practices that are needed to develop intelligent-enabled
    solutions, along with many of the services offered by the AWS platform. You will
    become intimately familiar with many of the AWS services and their **application
    programming interfaces** (**APIs**). Not only will you build working applications,
    but you will also understand the choices of the services and patterns that are
    being used. Along the way, we will also show you tips and tricks for working on
    the AWS platform.
  prefs: []
  type: TYPE_NORMAL
- en: AWS is composed of a huge number of services, and it is still growing. There
    are countless books and online resources that dive deeper into various subsets
    of these services. In this book, we will be focusing on some of the AWS services
    that work well together to help you build intelligent-enabled applications. We
    will cover most of the ML services, as well as various services for compute, storage,
    networking, and databases. Keep in mind that it is beyond the scope of this book
    to cover all the aspects of these services, let alone every AWS service.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of AWS AI offerings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To better understand AWS AI offerings, we can group the services into two main
    groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the subsets of AWS AI capabilities and AWS ML platforms
    that we will be covering in this book, organized by the two groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed0dbd0d-265b-444a-842c-f93ab92375f9.png)'
  prefs: []
  type: TYPE_IMG
- en: The list of AWS ML services is growing every year. For example, Amazon Personalize,
    Forecast, Textract, and DeepRacer were announced at the *AWS re:Invent 2018* conference,
    and were in limited preview. These services became available for general use around
    mid 2019.
  prefs: []
  type: TYPE_NORMAL
- en: The first group in the preceding diagram are the AWS AI capabilities. These
    services are built on top of AWS pre-trained AI technologies. They work right
    *out of the box* to provide ready-made intelligence for your applications. You
    do not need to understand the AI techniques that make them tick, and you do not
    need to maintain the infrastructure to host them. AWS has done all the hard work
    for you, and has made these AI capabilities available via APIs. As AWS continuously
    improve these capabilities, your application will automatically get more intelligent
    without any effort on your part. These managed services can provide quick lifts
    to your applications, thus allowing intelligent solutions to be built quickly
    and economically.
  prefs: []
  type: TYPE_NORMAL
- en: 'These AWS AI capabilities are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Comprehend:** A NLP service that uses ML to find insights and relationships
    in text. This technology allows your applications to sift through mountains of
    unstructured text and dig up golden nuggets of information. This service can perform
    various tasks, including automatic classification of documents; identification
    of entities such as company names, people, and addresses; and extraction of topics,
    key phrases, and sentiments within the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Lex:** A service for building conversational interfaces into applications
    using voice or text. This capability is built using deep learning techniques such
    as **automatic speech recognition** (**ASR**) and **natural language understanding**
    (**NLU**) in order to convert speech into text and to recognize intents within
    text. This is the same technology that is behind the Amazon Alexa voice assistant,
    and the same capability can be embedded into your own applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Polly:** A service that turns text into life-like speech that allows
    you to add a human voice to your application. The text-to-speech technology that
    is behind this service uses advanced deep learning technologies that can synthesize
    a voice with different languages, genders, and accents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Rekognition:** A service that can analyze images and videos in order
    to identify objects, people, text, scenes, and activities. This service can also
    provide accurate facial analysis and recognition for various applications. The
    deep learning technology behind this service has been trained on billions of images
    and videos for a high level of accuracy on a variety of analysis tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Transcribe:** An ASR service that provides speech-to-text capabilities
    to your applications. This technology allows your applications to analyze stored
    audio files or live audio streams, and get transcription text in real time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Translate:** A neural machine translation service that delivers natural
    and fluent language translation. This service is backed by deep learning models
    that can provide accurate and natural sounding translations for many languages.
    You can even configure this service with custom language models that can include
    brand names, product names, and other custom terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second group in the preceding diagram are the AWS ML platforms. These services
    are fully managed infrastructures and toolsets that help developers build and
    run their custom AI capabilities via ML. AWS provides the development constructs
    and handles the ML training compute resources in order to make developing custom
    AI capabilities easier. The AI practitioners are responsible for designing the
    inner workings of these AI capabilities. This might include: the collection and
    cleaning of training data; selection of ML libraries and algorithms; tuning and
    optimization of ML models; and designing and the development of interfaces to
    access the AI capabilities. Leveraging the AWS ML platforms to build custom AI
    capabilities is definitely more involved than using the managed AI services, but
    this group of services gives you the most flexibility to create innovative solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The AWS ML platform we will be covering in this book is: **Amazon SageMaker**—A
    fully managed service that covers the entire ML workflow. With SageMaker, you
    can collect and process your training data; you can choose your ML algorithms
    and ML libraries, including TensorFlow, PyTorch, MXNet, Scikit-learn, and so on;
    you can train the ML models on ML-optimized compute resources; and you can tune
    and deploy the resulting models to provide AI capabilities that are specifically
    created for your applications.'
  prefs: []
  type: TYPE_NORMAL
- en: We highly recommend that you leverage the AWS-managed AI services as much as
    you can first. Only when there is a need for custom AI capabilities should you
    then build them with the AWS AI ML platform.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on with AWS services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without further ado, let's get our hands dirty with a few AWS services. The
    services that we will use and the tasks that we will perform in this section will
    set you up for intelligent-enabled application development on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your AWS account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you don''t already have an account with AWS, you can sign up for one at
    [https://aws.amazon.com/](https://aws.amazon.com/) and then click on the **Sign
    Up** button. You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/403f0134-f0dc-4648-bbbe-e275d86d07dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Your AWS account gives you access to all services in AWS on demand. But don't
    worry – with AWS' pay-as-you-go pricing model, you only pay for the services that
    you actually use, at industry-leading affordable prices. If this is the first
    time you are signing up for an AWS account, your account automatically includes
    12 months of free tier access. The free tier offers a certain amount of AWS services
    for free, including compute, storage, database, and API calls. There are even
    non-expiring free resources after the 12 month free tier period. Visit [https://aws.amazon.com/free](https://aws.amazon.com/free)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating through the AWS Management Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s get familiar with the AWS Management Console. The first time you
    log in to your AWS account, you will see the AWS Management Console. It might
    look something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3587cef8-2520-4995-bca7-f2600280c74f.png)'
  prefs: []
  type: TYPE_IMG
- en: The AWS Management Console is a web interface where you manage the AWS cloud
    platform. Through this console, you can start, monitor, and stop various resources
    such as cloud compute and cloud storage; you can manage your AWS account settings,
    including monthly billing, and fine-grained access control; and you can even get
    access to educational resources to help you get started on the various services
    that are offered.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS Management Console is one of three ways you can interact with the AWS
    cloud platform. The other two methods are the AWS **Command-line Interface** or
    **CLI** and the AWS **Software Development Kit** or **SDK**. We will cover these
    other methods later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Finding AWS services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the AWS Management Console, you can click on the **Services** tab at the
    top-left corner of the console. Here, you will see the plethora of AWS services
    organized into groups. You can also search for services by name; searching is
    usually the faster way to navigate to a particular service that you are looking
    for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your **Services** tab should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed39c186-2ee6-4b06-93e9-f4c1e759ab83.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the AWS region
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not every AWS service that you see in the list is available in every AWS region.
    AWS is a global cloud infrastructure that is built around the concept of AWS regions.
    An AWS region is a physical location in the world where you can operate your cloud
    applications. Depending on the region in which you choose to operate, some services
    might not be available. For example, when we created our account, the region defaulted
    to US East (Ohio). At the time of writing, the Ohio region does not have the Amazon
    Lex service.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a service is not available in a region, you will see a **Region Unsupported**
    message, similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cbcad30-ef60-43de-9377-60dfdb8a6920.png)'
  prefs: []
  type: TYPE_IMG
- en: For this book, we recommend that you change the region to **US East** (**N.
    Virginia**), also known as region **us-east-1**. This Northern Virginia region
    has all of the AWS services available, and it is also the region that gets the
    newest AWS services first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Northern Virginia region by clicking on the region name next to
    your AWS account name. It is important for you to do this to ensure that the examples
    and projects in this book are consistent. The **US East (N. Virginia)** region
    is the first choice in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6e30ac8-d2e3-412a-893e-358957b9e304.png)'
  prefs: []
  type: TYPE_IMG
- en: Test driving the Amazon Rekognition service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try out one of the AWS-managed AI services, Amazon Rekognition, to get
    a feel for the power of AWS''s AI offerings:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Rekognition** from the list of services under **Machine Learning**
    to navigate to its home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rekognition provides a collection of visual analyses for images and videos.
    With Rekognition, you can quickly add powerful capabilities to detect objects,
    faces, and text in images and videos. You do not need to understand the deep learning
    technologies behind these capabilities in order to add them to your applications.
    We will create several such applications in the hands-on projects throughout this
    book, but for now, let's see Rekognition's capabilities in action with one of
    the provided demos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Amazon Rekognition home page's left-hand pane, click on **Object and
    scene detection** under the **Demos** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS has already provided a couple of sample images to show off the power of
    Rekognition. In one of the images, you and I can easily see that a skateboarder
    is performing a trick on a road with two rows of parked cars on either side. This
    is actually a pretty busy image for computers to perform analysis on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, how did Rekognition do? Rekognition has drawn boxes around the objects that
    it has detected, and you can mouse over the boxes in order to see what Rekognition
    thinks each object is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the Rekognition demo page with the skateboarder image detection results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18d917db-bb3d-4c7a-8ff1-c8f6813a7e14.png)'
  prefs: []
  type: TYPE_IMG
- en: On the right-hand side of the image, under **Results**, Rekognition also provides
    the confidence levels for all the objects that it has detected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are also **Request** and **Response** underneath the confidence levels.
    In fact, this demo page is actually making API calls to Rekognition''s object
    and scene detection API on your behalf. If you expand the request, it reveals
    some details about the API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The request is in the **JavaScript Object Notation** or **JSON** format. The
    request specifies an image that is to be analyzed by the Rekognition API. More
    specifically, this is an image that's stored as an object in the Amazon **Simple
    Storage Service** or **S3**. From the request, we can tell that the image is stored
    in the `console-sample-images` bucket, with the name of `skateboard.jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: This demo application is using the Amazon S3 service to store the sample images,
    and Rekognition can directly analyze images that are stored in S3\. We will be
    leveraging this pattern in many of the projects in later chapters as well. As
    we mentioned earlier, the power of the AWS ecosystem is the interoperability of
    many of its services.
  prefs: []
  type: TYPE_NORMAL
- en: The response is also in JSON format. The response contains a lot of information
    about the objects that were detected in the sample image. This information includes
    the name of the object, the confidence of the detection, and even the coordinates
    for the bounding box where each object is located within the image. In our projects,
    we will learn how to process such JSON responses in order to use the results in
    our intelligent-enabled applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this demo, you can also upload your own images to test out Rekognition.
    Find an image and give it a try. When you upload your image to the demo page,
    you will notice that the request that is sent to the API is slightly different.
    In the request, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, instead of specifying an image in S3, the raw bytes of the image
    that was uploaded were sent directly to the Rekognition API. This Rekognition
    API has multiple variations: one that takes reference to an S3 object and another
    that takes the raw bytes of an image. Which variation you choose depends on the
    nature of your application.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Amazon S3 service is one of the first services that was offered by AWS.
    S3 provides secure, durable, and scalable object storage at a very low cost. Object
    storage just means that the things you store in S3 are accessible at the file
    level, instead of at the block or byte level. S3 is a very flexible service, with
    many usage patterns. You can read more about Amazon S3 at [https://aws.amazon.com/s3](https://aws.amazon.com/s3).
  prefs: []
  type: TYPE_NORMAL
- en: Let's start working with Amazon S3 by creating a bucket. You can think of a
    bucket as a folder that can hold an unlimited number of files (objects).
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Amazon S3 home page from the Amazon Management Console by clicking
    on the **Services** tab in the top-left corner, and then click or search for **S3**
    under **Storage**. If this is your first time using S3, you will see a screen
    similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7e2ebe2-d61f-4af1-bdfe-e485c7cd2ad5.png)'
  prefs: []
  type: TYPE_IMG
- en: In this book, we will be leveraging S3 a lot in our hands-on projects. We will
    be using S3 for three main purposes. The first purpose is storing media files
    and other contents for other AWS services to access. Many of the AWS AI services
    are tightly integrated with S3; for example, this is the pattern that we have
    seen in the Rekognition demo. The second purpose is hosting entire static websites
    with S3, including HTML files, images, videos, and client-side JavaScript. This
    gives us the ability to host interactive web applications without the need for
    traditional web servers. The third purpose is using S3 as a data store for data
    collection, processing, and analytics tasks when we train our custom ML models.
  prefs: []
  type: TYPE_NORMAL
- en: There is a range of S3 storage classes that have been redesigned for different
    use cases and cost levels. For your enterprise-grade application, you might need
    to take advantage of the different storage classes in order to balance performance
    and cost. In this book, we will be using the Amazon S3 standard class for general-purpose
    storage. This is the default class and it will be sufficient for the projects
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Create bucket** button to create a new bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f979d10-06ee-4d44-b67d-b158865ef69a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first screen in the model asks for three pieces of information: the **Bucket
    name**, the **Region**, and **Copy settings from an existing bucket**. Since this
    is your first bucket, we can ignore the third piece of information.'
  prefs: []
  type: TYPE_NORMAL
- en: The S3 bucket name must be globally unique. This means that every bucket that's
    ever created by you and others must have a unique name. Coming up with a globally
    unique bucket name can be challenging; you cannot expect bucket names such as
    `contents`, `website`, or `data` to still be available. The S3 bucket names must
    be DNS-compliant so that you can follow similar patterns for the domain names.
    For example, if we choose `aws.ai` as our root domain, we can create buckets such
    as `contents.aws.ai`, `website.aws.ai`, and `data.aws.ai` to avoid conflicts.
    Think about which root domain you would like to use.
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to own the domain to name the buckets with a given root domain
    name; however, if you do own a domain, it would be a good idea to use that as
    your root domain.
  prefs: []
  type: TYPE_NORMAL
- en: You must also specify the region of your bucket. This will determine in which
    physical region in the world your objects will be stored. The AWS regions are
    completely isolated from each other by design. Objects stored in one region cannot
    be accessed by services and applications running in a different region. This can
    be important if your line of business has high-performance requirements that need
    your applications and data to be located closer to your customers. This can also
    be important if your line of business must comply with industry and government
    regulations that require your applications and data to be located within a certain
    geographic location.
  prefs: []
  type: TYPE_NORMAL
- en: For the projects in this book, we do not have either of these concerns. Therefore,
    for consistency, let's pick the **US East (N. Virginia)** region again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what your **S3 buckets** page might look like after creation, but of
    course, with different bucket names:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fac9be43-0b74-4f77-90f2-31a75847bc46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created the S3 buckets, go ahead and click on the **contents.aws.ai**
    bucket. You will see a screen similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86da17a9-c216-45c0-bc7b-4d88376a0fe3.png)'
  prefs: []
  type: TYPE_IMG
- en: On this screen, you will be able to upload files to the bucket, configure bucket
    properties, set access permissions, and perform advanced settings such as life
    cycle rules and cross-region replication. We will come back to some of these settings
    later on, but for now, upload one or more photos that you want to analyze with
    the Rekognition service. You can click on the **Upload** button or simply drag
    and drop the photos to this page to upload them. We can leave all the file settings
    as default for now.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you just stored some files in the AWS cloud platform with 99.999999999%
    durability and 99.99% availability! In other words, if you store 10,000 files
    in S3, statistically, you would lose one file every 10 million years, and all
    of the files are available for your application to access 525,547.4 minutes out
    of 525,600 minutes every year.
  prefs: []
  type: TYPE_NORMAL
- en: Identity and Access Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next AWS service we will be looking at is the **Identity and Access Management**
    or **IAM**. IAM allows you to manage access to other AWS services and resources
    securely. AWS offers enterprise-grade security and access control, which is great
    for building production-ready applications in the cloud. However, if you are new
    to AWS, working around IAM can be challenging at first. If the necessary access
    was not granted, the services will simply refuse to perform the desired actions.
    We will be working with IAM quite a lot to build the projects in this book. You
    will get familiar with concepts such as users, groups, and roles so that you can
    provide your applications with the necessary access to the required services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the IAM home page by clicking on **IAM** from the list of services
    under **Security, Identity, and Compliance** in order to navigate to its home
    page. The IAM home page should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cd3c0bc-d0ca-433c-97e5-fdf4767f07f5.png)'
  prefs: []
  type: TYPE_IMG
- en: The IAM dashboard gives you an overview of the IAM resources and their security
    status. So far, we don't have any users or groups, but AWS has created two roles
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: We have been accessing the AWS Management Console using our root account. This
    account, by default, can only access the AWS Management Console; it will not be
    able to interact with AWS services programmatically. Let's create a new user with
    programmatic access for the hands-on projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Users** on the left-hand pane, and then click on the **Add user**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72e23788-836c-45f7-9bdd-47729651fca9.png)'
  prefs: []
  type: TYPE_IMG
- en: After entering the desired username, be sure to select only **Programmatic access**.
    Programmatic access will enable an access key ID and a secret access key pair.
    This key pair can be used by AWS APIs, the CLI, and the SDK. It is good practice
    to limit each user to either programmatic access or AWS Management Console access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we created an `aws_ai` user with only programmatic access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00d5aee4-ff85-4449-a129-8cc2f296223e.png)'
  prefs: []
  type: TYPE_IMG
- en: On the next screen, let's also create a group to manage the permissions. We
    recommend adding users to one or more groups with the necessary permissions, rather
    than attaching the individual permissions and policies to the users directly.
    This way, it's much easier to manage the permissions when there are numerous users
    that require different permissions in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Create group** button under **Add user to group**, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcc40ac8-c777-4c6f-a92b-39b206e22457.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For our group, let''s name it `Developer`, and then attach the **AdministratorAccess**
    policy to this group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/264ded77-6d3d-4e62-b7bd-4adf8664490b.png)'
  prefs: []
  type: TYPE_IMG
- en: We do not need to create any tags, so just review and create the user.
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, we are attaching a very powerful policy with full access to
    AWS services. For your production environment, you will want to be more fine-grained
    with your permissions and policies. You always want to follow the principle of
    least privilege when it comes to system security.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user has been created, you will see the **Success** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db900fb7-a575-4434-81c9-eefb203dab1c.png)'
  prefs: []
  type: TYPE_IMG
- en: On this screen, you have the option to view or download the access key pair
    that we mentioned earlier. This is the only time that the secret access key can
    be displayed or downloaded, so go ahead and download the CSV file onto your computer.
    We will need this key pair when we use the AWS CLI and the AWS SDK later in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The access key pair is equivalent to your username and password combination.
    It is vital that you do not share your key pairs with others, as it will give
    other access to your AWS resources, but leaving you to foot the bill. Also, never
    hardcode the key pairs in the source code and then check them into a public source
    code repository. There are automated bots out there that scan the code repositories
    for AWS key pairs in order to steal resources to perform hacking or cryptocurrency
    mining activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations, you just used the IAM service to create a user and added it
    to a group with administrative permissions! If you go back to the dashboard, you
    will see that we have added it to the IAM resources and made progress regarding
    the security status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80055712-0d67-4b45-948d-e61aec720884.png)'
  prefs: []
  type: TYPE_IMG
- en: We highly recommend that you complete the remaining two steps in the security
    status section. The first remaining step is to activate **multi-factor authentication**
    (**MFA**) on your root account. Activating MFA will add extra security on your
    root account by requiring anyone to log in with both the root account password
    (something you know) and a one-time token from an authentication device (something
    you have), for example, your smartphone. The second remaining step is to set up
    a IAM password policy to ensure that secure password practices are followed. You
    can define the password's length, complexity, expiration period, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWS CLI is a tool that allows you to interact with AWS services by issuing
    commands from your Terminal shell. Earlier in this chapter, we interacted with
    a few AWS services through the web-based AWS Management Console. While the web
    console is the easiest interface for new users to get familiar with AWS, it can
    be cumbersome to use during the software development process. With the AWS CLI
    tool, you get all of the same functionalities as the web console but at your fingertips
    in the Terminal shell, where most of your development tools reside. This way,
    your development process is more fluid without the context switching to and from
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS CLI is primarily distributed via the Python package manager; therefore,
    you need to install Python on your development machine first. Note that we will
    be using Python for the development of the projects as well. It is important that
    you install Python by following the instructions in order to ensure the compatibility
    of your development environment later.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is available for all three major operating systems; macOS, Linux, and
    Microsoft Windows. There are installers, as well as documentation, at [https://www.python.org](https://www.python.org).
    This book is written for Python 3.7.x or higher (unless otherwise specified),
    and it is recommended that you use the most recent version available.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While Python is pre-installed on macOS, that version of Python is 2.7\. To
    install a newer version of Python, we recommend using a package manager for macOS
    called Homebrew. Homebrew is touted as the missing package manager for macOS;
    it simplifies the installation of many macOS software packages, including Python.
    To install Homebrew, follow the instructions on its website: [https://brew.sh](https://brew.sh).
    At the time of writing, the command to install Homebrew in the Terminal is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Homebrew has been installed, we can install the latest Python and pip,
    the Python package management system, with the following commands in the Terminal
    prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the latest Python and pip version have been correctly linked
    on your system with the commands in the Terminal prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The outputs of these commands should state versions similar to 3.7+ and 18.0+,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many different distributions of Linux available. The instructions
    to install Python might be different, depending on your specific Linux distribution.
    In general, you should first check to see if Python is already installed on your
    system in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If Python or pip is not installed, or a different version is installed, install
    them with your Linux distribution''s package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Debian derivatives such as Ubuntu, use `apt`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For Red Hat derivatives such as Fedora, use `yum`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For SUSE derivatives, use `zypper`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Installing Python on Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different options for setting up the Python environment, depending
    on whether you are running Microsoft Windows 10 or an earlier version of Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are running Windows 10, we highly recommend that you install the **Windows
    Subsystem for Linux** or **WSL**. WSL allows you to run a Linux distribution of
    your choice on the Windows operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to enable the WSL, which is an optional feature within Windows
    10\. To do this, open PowerShell as the administrator and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Restart your computer if prompted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you can download and install your preferred Linux distribution from the
    Windows Store. At the time of writing, there are five Linux distributions available
    for the WSL: Ubuntu, OpenSUSE, SUSE Linux Enterprise Server, Debian GNU/Linux,
    and Kali Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: Once your preferred Linux distribution has been installed, you can then follow
    the Python installation instructions for that particular Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier Windows versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are running an earlier version of Windows, we recommend using the Anaconda
    Python distribution and package manager. The Anaconda installer, as well as its
    documentation, can be found at [https://www.anaconda.com/download](https://www.anaconda.com/download).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once Python has been successfully installed on your development machine, we
    can move on to installing the AWS CLI. The AWS CLI is primarily distributed via
    the Python package manager, `pip`, which we just installed. You can install and
    verify the AWS CLI with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that the AWS CLI command is `aws`, even though the package we installed
    is `awscli`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can use the AWS CLI, we need to perform a few configuration steps.
    The fastest way to configure your AWS CLI is with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The explanation of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two items that we need to enter are the security credentials so that
    the CLI has the permissions to perform actions on your behalf. This is the key
    pair that is contained within the CSV file that we downloaded during the creation
    of a new user with the IAM service. Open the CSV file and copy and paste the access
    key ID and the secret access key into the configuration command prompt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, for the default region name, we will again use `us-east-1` for consistency
    throughout this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, for the default output format, enter `json`. This will set the output
    for the AWS CLI to be JSON format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The AWS configure command creates a hidden directory, `.aws`, in your user
    home directory, for example, `~/.aws` on macOS and Linux. In this directory, two
    files are created. One is `.aws/credentials`, with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The other is `.aws/config`, with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Locate these files on your system and verify their contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you did not copy down or download the access key pair, you can obtain
    a new key pair in the AWS Management Console:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **IAM** service under the **Security, Identity, & Compliance**
    heading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **IAM** **Management Console**, click on **Users** on the right-hand
    pane and click on your username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the user summary page, click on the **Security credentials** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Access keys** section, click on the **Create access key** button
    and a new access key will be created for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember to delete the old key pair after the new one has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is how your screen will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1680bf73-ce4f-45f4-b5c5-65e48b201e49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember to configure your AWS CLI with the following command, each time you
    change your access key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Enter your security credentials, default region, and default output format as
    we explained in the initial AWS CLI configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test whether the AWS CLI is configured properly, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This command will print all of the S3 buckets in your AWS account. More specifically,
    this command lists the S3 buckets that the user who is associated with the access
    key has permissions to see. Remember the key pair we configured the CLI with,
    which belongs to the user to whom we granted the administrative policy? One of
    the permissions within the administrative policy gives the user access to S3\.
    In any case, you should see the S3 bucket that we created in the previous section
    of this chapter via the AWS Management Console.
  prefs: []
  type: TYPE_NORMAL
- en: Invoking the Rekognition service using the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's invoke the object detection capability of Amazon Rekognition via
    the AWS CLI. This time, let's perform the object detection on an image that's
    stored in one of our S3 buckets. We will be using a sample image from Pexels,
    a website with thousands of royalty-free images. Download the image at [https://www.pexels.com/photo/animal-beagle-canine-close-up-460823/](https://www.pexels.com/photo/animal-beagle-canine-close-up-460823/)
    and upload it to the `contents` S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can see an adorable beagle puppy laying on what appears to be a bed
    of gravel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/235579bd-0020-4644-8790-73b395c793b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see the following output when you list the objects in your `contents`
    bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have an image, we can invoke the object detection capability of
    Rekognition via the following CLI command. Note that we must escape the `{` and
    `}` characters with a `\`, and we must not include any spaces when specifying
    the S3 object on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The results come back almost instantly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The output is in JSON format, just like we configured the CLI to the output.
    From the output, the Rekognition service detected several objects or labels. Rekognition
    is very sure that it detected a dog; it even identified the breed of the dog as
    a beagle! Rekognition also detected the gravel in the image, which could be a
    part of a dirt road. The AWS CLI can be very useful when trying out an AWS service,
    and to see how the output is structured when we are developing our applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python for AI applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is one of the most popular programming languages. Thanks to its popularity
    with the data science and ML community, Python is also one of the fastest-growing
    programming languages. There is a large number of add-on libraries from its developers
    and the open source community. These libraries enable Python developers to do
    almost anything, from data analytics to deep neural networks, from simple scripting
    to web application development.
  prefs: []
  type: TYPE_NORMAL
- en: For AI and ML, Python is the de facto language. There's the popular scikit-learn
    library that gives developers access to many useful ML algorithms. There are also
    many libraries for deep neural networks, such as MXNet and TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using Python for every hands-on projects throughout this book:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first half of this book, we will create intelligent-enabled solutions
    using AWS AI services. For these projects, we will use Python to create the backend
    components, APIs, and web applications that will bring our intelligent creations
    to life. AWS offers a Python SDK called Boto. With Boto, we can interact with
    all of the AWS services from our applications, including the managed AI capabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second half of this book, we will be training custom ML models using
    AWS ML services. For these projects, we will use Python to process data, train
    ML models, and deploy intelligent capabilities. In addition to the Boto SDK, we
    will also use AWS libraries for SageMaker, **Elastic MapReduce** (**EMR**), and
    many more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Python development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by setting up our local development environment. Since we are building
    end-to-end solutions in the projects, there are numerous packages and dependencies
    that we will need. The packages we will need don't always come as part of the
    standard library. Our projects will sometimes need specific versions of the libraries
    to get all of the moving pieces working together. Therefore, it is very important
    that you follow these instructions to install the packages, as described in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Python virtual environment with Pipenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use a Python virtual environment to manage the packages for the projects
    in this book. A virtual environment is a Pythonic way to create a self-contained
    project directory tree that includes a particular combination of a Python version
    and packages that are specific to a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many benefits of using Python virtual environments:'
  prefs: []
  type: TYPE_NORMAL
- en: Since all of the packages and dependencies of a project are specified in a configuration
    file, the project's development environment can be easily duplicated by other
    developers; this is very useful when you are working within a development team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if you are working by yourself, having a virtual environment will help
    you with creating (and recreating) the environment on one or more computers for
    development, testing, and deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A virtual environment also allows you to create separate Python environments,
    where parallel copies of Python dependencies can be installed. This way, we can
    keep conflicting Python versions and packages for different projects on the same
    computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pipenv is the new kid on the block when it comes to Python virtual environments,
    but it has already been promoted as the officially recommended Python packaging
    tool from [python.org](https://www.python.org/). To install `pipenv`, we will
    use Pip, the Python package management tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This command will help you install and verify `pipenv`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first Python virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have installed the Python toolset, let''s take it for a test drive
    by creating a Python project that can interact with the AWS cloud platform. First,
    let''s create a directory for the project and name it `ObjectDetectionDemo`. Within
    this directory, we initialize a Python 3 virtual environment with `pipenv`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: After these commands, the `ObjectDetectionDemo` directory will contain a `Pipfile`.
    The `Pipfile` is a `pipenv` configuration file that specifies this project's Python
    packages and their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we specify and install the AWS Python SDK, Boto, for the `ObjectDetectionDemo`
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'It might take a few minutes for Pipenv to synchronize with the Python package
    index and to install the `boto3` package, along with its dependencies. After the
    installation, your Pipefile should have the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, `boto3` has an entry under the packages section. Currently,
    the version number is listed as `*`, which means, use the latest version. You
    can replace `*` with a specific version for any of the packages for your project
    if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: First project with the AWS SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s write our first Python application that will detect the objects
    in the images that are stored in an S3 bucket. To do this, we will leverage `boto3`
    to interact with both the Amazon S3 service and the Amazon Rekognition service:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use any text editor, or your favorite Python **Integrated Development
    Environment** (**IDE**), to create the Python source files. If you don't have
    a preference, we recommend that you check out JetBrains PyCharm, [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/),
    a cross-platform Python IDE that provides code editing, code analysis, a graphical
    debugger, an integrated unit tester, and integration with a version control system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first source file that we will create is `storage_service.py`. Create this
    source file in the `ObjectDetectionDemo` directory. The following is the Python
    code for `storage_service.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, please note the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`storage_service.py` contains a Python class, `StorageService`, that encapsulates
    the business logic of interacting with Amazon S3.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: This class implements just one method, `get_all_files()`, which returns all
    of the objects stored within a bucket specified by the `storage_location` parameter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other functionalities related to Amazon S3 can also be implemented in this file,
    such as listing the buckets, uploading files to buckets, and so on.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next source file that we will create is `recognition_service.py`. Create
    this source file in the `ObjectDetectionDemo` directory as well. The following
    is the Python code for `recognition_service.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, please note the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`recognition_service.py` contains a Python class, `RecognitionService`, that
    encapsulates the business logic of interacting with the Amazon Rekognition service.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: This class implements just one method, `detect_objects()`, that calls Rekognition's
    detect label API, and then returns the labels from the response.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Callers of this method can specify the S3 bucket and the filename with the `storage_location`
    and `image_file` parameters, respectively.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other functionalities related to Amazon Rekognition can also be implemented
    in this file, such as detecting text, analyzing face, and so on.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final file that we will create is `object_detection_demo.py`. Create this
    source file in the `ObjectDetectionDemo` directory. The following is the Python
    code for `object_detection_demo.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this code, `object_detection_demo.py` is a Python script that brings together
    our two service implementations in order to perform object detection on the images
    that are stored in our S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the interaction diagram that depicts the flow of the demo application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b59e750-763c-4ebc-bd01-8d9149a17af1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note the following information, all of which is shown in the preceding
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: This script calls the **StorageService** to get all of the JPG image files that
    are stored in the `contents.aws.ai` bucket (you should replace this with your
    own bucket).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, we are hardcoding the bucket name for simplicity, but you can take in
    the bucket name as a parameter in order to make the script more generic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, for each image in the specified bucket, the script calls our **RecognitionService**
    to perform object detection and returns the labels that are found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script also formats and prints out the labels, along with their confidence
    scores for the objects that were detected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that we are using `boto3` in both **StorageService** and **RecognitionService**.
    The `boto3` objects manage the sessions between our project code and the AWS services.
    These sessions are created using the available credentials in the runtime environment.
    If you are running the script on your local development machine, then the AWS
    access key pair is taken from the `~/.aws/credentials` file. We will cover how
    the credentials are used in other runtime environments in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, we kept the project code relatively short and simple. We will
    enhance these Python classes in later hands-on projects.
  prefs: []
  type: TYPE_NORMAL
- en: Even though this is only a demo project, it is still good practice to organize
    the code into different components with separation of concerns. In this project,
    all of the business logic that will interact with the Amazon S3 service are encapsulated
    within the `StorageService` class; the same is done for all the logic that will
    interact with the Amazon Rekognition service in the `RecogntionService` class.
    We will see more benefits of this design practice as our projects get larger and
    more complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run the following script in the Python virtual environment by entering
    the virtual environment shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, please note the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: This command starts a shell with the Python virtual environment within your
    normal Terminal shell.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the virtual environment shell, the Python version and the packages that
    we specified and installed with `pipenv` are available to our script.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Within the virtual environment, invoke the `object_detection_demo.py` script
    via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command should display the objects that are detected in
    the images that are stored in the specified S3 bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to exit the virtual environment and to return to your normal Terminal
    shell with the `exit` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations, you just created your first intelligent-enabled application
    that leverages the power of AI to perform image analysis on the AWS platform!
    Sit back and think about it; with just a few lines of code, you were able to create
    a piece of software that can detect and identify countless numbers of objects
    in our world. This is the quick lift you can get when leveraging AWS AI services.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned that AI has existed for a long time, but it is becoming
    popular again due to the renewed interested in ML, more specifically, with artificial
    neural networks. We looked at a few real-world applications of AI and ML. We got
    an overview of the two groups of AI offerings from AWS; the AWS AI services that
    give you a quick lift when developing intelligent-enabled applications, and the
    AWS ML platforms that allow you to build custom AI capabilities that are tailored
    to your application. We recommended that you try to leverage the provided AWS
    AI services first, and only develop custom AI capabilities if you have a specialized
    need and you have a data-competitive advantage.
  prefs: []
  type: TYPE_NORMAL
- en: We got familiar with several services on AWS through hands-on experience, including
    the AI services and the other complimentary cloud services. We also set up our
    local development environment for AI applications, including Python, the AWS CLI,
    and Python virtual environments. We then created our first intelligent-enabled
    application using the Amazon S3 and Amazon Rekognition services.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into the components and the architecture of
    AI applications. We will set up an architecture template for many of the upcoming
    hands-on projects, and more importantly, we will cover the design principles and
    decisions that this architecture template is based on.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can access the following links for more information on AI on AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.sciencenews.org/article/future-ai-may-diagnose-eye-problems](https://www.sciencenews.org/article/future-ai-may-diagnose-eye-problems)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.sas.com/en_us/insights/analytics/what-is-artificial-intelligence.html](https://www.sas.com/en_us/insights/analytics/what-is-artificial-intelligence.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://adage.com/article/cmo-strategy/google-backed-video-puts-viewers-a-driving-cars/312542/](https://adage.com/article/cmo-strategy/google-backed-video-puts-viewers-a-driving-cars/312542/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blog.swiftkey.com/whats-difference-predictive-keyboards-predictive-text/](https://blog.swiftkey.com/whats-difference-predictive-keyboards-predictive-text/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.futurile.net/2013/10/03/virtualenv-and-virtualenvwrapper-for-python-development/](http://www.futurile.net/2013/10/03/virtualenv-and-virtualenvwrapper-for-python-development/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
