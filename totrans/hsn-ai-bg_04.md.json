["```py\n## Size of the input data\ninput_layer_size = 784 \n\n## Define the size of the hidden layers; We want them to be smaller than the input\nhidden_layer_one = 256\nhidden_layer_two = 256 \n\n## Size of the potential output classes\nnumber_classes = 10 \n```", "```py\nimport math\nimport numpy as np \n\ndef sigmoid(x):\n s_out = []\n for item in x:\n     s_out.append(1/(1+math.exp(-item)))\n return s_out\n```", "```py\nx = np.arange(-10., 10., 0.2)\nf = sigmoid(x)\nplt.plot(f,sig)\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntanh = np.tanh(np.arange(-5, 5, .1))\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(np.arange(-5, 5, .1), tanh)\nax.set_ylim([-1.0, 1.0])\nax.set_xlim([-5,5])\nplt.show()\n```", "```py\ntf.nn.leaky_relu(features,alpha=0.2,name=None)\n```", "```py\ndef single_output(x, w):\n        return np.tanh(np.dot(x, w))\n```", "```py\nx = np.arange(-5, 5, .1)\nf1 = single_output(x, 0.5)\nf2 = single_output(x, 1.0)\nf3 = single_output(x, 2.0)\nplt.plot(x,f1)\nplt.plot(x,f2)\nplt.plot(x,f3)\nplt.show()\n```", "```py\ndef single_output(x, w, b):\n return np.tanh(np.dot(x, w) + b)\n```", "```py\nx = np.arange(-5, 5, .1)\nf1 = single_output(x, 1.0, 2.0)\nf2 = single_output(x, 1.0, 1.0)\nf3 = single_output(x, 1.0, -2.0)\nf4 = single_output(x, 1.0, 0.0)\nplt.plot(x,f1)\nplt.plot(x,f2)\nplt.plot(x,f3)\nplt.plot(x,f4)\nplt.show()\n```", "```py\nweights = { 'w1': tf.Variable(tf.random_normal([input_layer_size, hidden_layer_one])), 'w2': tf.Variable(tf.random_normal([hidden_layer_one, hidden_layeR_two])),  'w_out': tf.Variable(tf.random_normal([hidden_layer_two, number_classes])) ...\n```", "```py\ndef CrossEntropy(yHat, y):\n    if yHat == 1:\n         return -log(y)\n    else:\n        return -log(1 - y)\n```", "```py\nloss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(network_output, y))\n```", "```py\ntf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss_func)\n```", "```py\n## Network Parametersepochs = 15batch_size = 100display_step = 1\n```", "```py\n # Create the Variablesx = tf.placeholder(\"float\", [None, ...\n```", "```py\nnetwork_output = feedforward_network(x, weights, biases)\n```", "```py\nloss_func = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=network_output, labels=y))\n```", "```py\ntraining_procedure = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss_func)\n```", "```py\nwith tf.Session() as sess:\n    ## Initialize the variable\n    sess.run(tf.global_variables_initializer())\n```", "```py\nfor epoch in range(epochs):\n\n     ## Batch the incoming data\n     total_batch = int(mnist.train.num_examples/batch_size) \n```", "```py\nfor batch in range(total_batch):\n            batch_x, batch_y = mnist.train.next_batch(batch_size)\n\n            _, loss = sess.run([training_procedure, loss_func], feed_dict={x: batch_x, y: batch_y})                  \n```", "```py\nif epoch % display == 0:\n            pred = tf.nn.softmax(network_output) \n```", "```py\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n```", "```py\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\nsaver.save(sess, save_model)\n\nprint(\"Epoch:\", '%04d' % (epoch+1), \"loss {:.9f}\".format(loss), \"Accuracy:\", accuracy.eval({x: mnist.test.images, y: mnist.test.labels}))\n```", "```py\nsave_model = os.path.join(job_dir, 'saved_mnist.ckpt')\nsaver = tf.train.Saver()\n```", "```py\nsaver.save(sess, save_model)\n```", "```py\ninit = tf.global_variables_initializer()\nsaver = tf.train.import_meta_graph(meta_dir)\nwith tf.Session() as sess:\n    sess.run(init)\n    saver.restore(sess, restore_dir)\n```"]