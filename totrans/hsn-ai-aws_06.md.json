["```py\n$ mkdir UniversalTranslator\n$ cd UniversalTranslator\n```", "```py\n$ mkdir Website\n$ touch Website/index.html\n$ touch Website/scripts.js\n```", "```py\n$ pipenv --three\n$ pipenv install boto3\n$ pipenv install chalice\n```", "```py\n$ pipenv shell\n```", "```py\n$ chalice new-project Capabilities\n```", "```py\ncd Capabilities\nmkdir chalicelib\ntouch chalicelib/__init__.py\ncd ..\n```", "```py\nProject Structure\n------------\n├── UniversalTranslator/\n    ├── Capabilities/\n        ├── .chalice/\n            ├── config.json\n        ├── chalicelib/\n            ├── __init__.py\n        ├── app.py\n        ├── requirements.txt\n    ├── Website/\n        ├── index.html\n        ├── script.js\n    ├── Pipfile\n    ├── Pipfile.lock\n```", "```py\n$ aws transcribe start-transcription-job\n --transcription-job-name <jobname>\n --language-code en-US\n --media-format wav\n --media MediaFileUri=https://s3.amazonaws.com/contents.aws.a/<audio file>.wav\n --output-bucket-name contents.aws.a\n{\n \"TranscriptionJob\": {\n \"TranscriptionJobName\": \"<jobname>\",\n \"TranscriptionJobStatus\": \"IN_PROGRESS\",\n \"LanguageCode\": \"en-US\",\n \"MediaFormat\": \"wav\",\n \"Media\": {\n \"MediaFileUri\": \"https://s3.amazonaws.com/<input bucket>/<audio file>.wav\"\n },\n \"CreationTime\": 1552752370.771\n }\n}\n```", "```py\n$ aws transcribe get-transcription-job --transcription-job-name <jobname>\n{\n \"TranscriptionJob\": {\n \"TranscriptionJobName\": \"<jobname>\",\n \"TranscriptionJobStatus\": \"COMPLETED\",\n \"LanguageCode\": \"en-US\",\n \"MediaSampleRateHertz\": 96000,\n \"MediaFormat\": \"wav\",\n \"Media\": {\n \"MediaFileUri\": \"https://s3.amazonaws.com/<input bucket>/<audio file>.wav\"\n },\n \"Transcript\": {\n \"TranscriptFileUri\": \"https://s3.amazonaws.com/<output bucket>/jobname.json\"\n },\n \"CreationTime\": 1552752370.771,\n \"CompletionTime\": 1552752432.731,\n \"Settings\": {\n \"ChannelIdentification\": false\n }\n }\n}\n```", "```py\n{\n   \"jobName\":\"jobname\",\n   \"accountId\":\"...\",\n   \"results\":{\n      \"transcripts\":[\n         {\n            \"transcript\":\"Testing, testing one two three\"\n         }\n      ],\n      \"items\":[\n         ...\n      ]\n   },\n   \"status\":\"COMPLETED\"\n}\n```", "```py\nimport boto3\nimport datetime\nimport time\nimport json\n\nclass TranscriptionService:\n    def __init__(self, storage_service):\n        self.client = boto3.client('transcribe')\n        self.bucket_name = storage_service.get_storage_location()\n        self.storage_service = storage_service\n\n    def transcribe_audio(self, file_name, language):\n        ...\n\n    @staticmethod\n    def extract_transcript(transcription_output):\n        ...\n\n```", "```py\ndef transcribe_audio(self, file_name, language):\n    POLL_DELAY = 5\n\n    language_map = {\n        'en': 'en-US',\n        'es': 'es-US',\n        'fr': 'fr-CA'\n    }\n\n    job_name = file_name + '-trans-' + datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")\n\n    response = self.client.start_transcription_job(\n        TranscriptionJobName = job_name,\n        LanguageCode = language_map[language],\n        MediaFormat = 'wav',\n        Media = {\n            'MediaFileUri': \"http://\" + self.bucket_name + \".s3.amazonaws.com/\" + file_name\n        },\n        OutputBucketName = self.bucket_name\n    )\n\n    transcription_job = {\n        'jobName': response['TranscriptionJob']['TranscriptionJobName'],\n        'jobStatus': 'IN_PROGRESS'\n    }\n    while transcription_job['jobStatus'] == 'IN_PROGRESS':\n        time.sleep(POLL_DELAY)\n        response = self.client.get_transcription_job(\n            TranscriptionJobName = transcription_job['jobName']\n        )\n        transcription_job['jobStatus'] = response['TranscriptionJob']\n                                                ['TranscriptionJobStatus']\n\n    transcription_output = self.storage_service.get_file(job_name + '.json')\n    return self.extract_transcript(transcription_output)\n```", "```py\n@staticmethod\ndef extract_transcript(transcription_output):\n    transcription = json.loads(transcription_output)\n\n    if transcription['status'] != 'COMPLETED':\n        return 'Transcription not available.'\n\n    transcript = transcription['results']['transcripts'][0]['transcript']\n    return transcript\n```", "```py\nimport boto3\n\nclass TranslationService:\n    def __init__(self):\n        self.client = boto3.client('translate')\n\n    def translate_text(self, text, source_language = 'auto', target_language = 'en'):\n        response = self.client.translate_text(\n            Text = text,\n            SourceLanguageCode = source_language,\n            TargetLanguageCode = target_language\n        )\n\n        translation = {\n            'translatedText': response['TranslatedText'],\n            'sourceLanguage': response['SourceLanguageCode'],\n            'targetLanguage': response['TargetLanguageCode']\n        }\n\n        return translation\n```", "```py\n$ aws polly start-speech-synthesis-task\n --output-format mp3\n --output-s3-bucket-name <bucket>\n --text \"testing testing 1 2 3\"\n --voice-id Ivy\n{\n \"SynthesisTask\": {\n \"TaskId\": \"e68d1b6a-4b7f-4c79-9483-2b5a5932e3d1\",\n \"TaskStatus\": \"scheduled\",\n \"OutputUri\": \"https://s3.us-east-1.amazonaws.com/<bucket>/<task id>.mp3\",\n \"CreationTime\": 1552754991.114,\n \"RequestCharacters\": 21,\n \"OutputFormat\": \"mp3\",\n \"TextType\": \"text\",\n \"VoiceId\": \"Ivy\"\n }\n}\n```", "```py\n$ aws polly get-speech-synthesis-task --task-id e68d1b6a-4b7f-4c79-9483-2b5a5932e3d1\n{\n \"SynthesisTask\": {\n \"TaskId\": \"e68d1b6a-4b7f-4c79-9483-2b5a5932e3d1\",\n \"TaskStatus\": \"completed\",\n \"OutputUri\": \"https://s3.us-east-1.amazonaws.com/<bucket>/<task id>.mp3\",\n \"CreationTime\": 1552754991.114,\n \"RequestCharacters\": 21,\n \"OutputFormat\": \"mp3\",\n \"TextType\": \"text\",\n \"VoiceId\": \"Ivy\"\n }\n}\n```", "```py\nimport boto3\nimport time\n\nclass SpeechService:\n    def __init__(self, storage_service):\n        self.client = boto3.client('polly')\n        self.bucket_name = storage_service.get_storage_location()\n        self.storage_service = storage_service\n\n    def synthesize_speech(self, text, target_language):\n        POLL_DELAY = 5\n        voice_map = {\n            'en': 'Ivy',\n            'de': 'Marlene',\n            'fr': 'Celine',\n            'it': 'Carla',\n            'es': 'Conchita'\n        }\n\n        response = self.client.start_speech_synthesis_task(\n            Text = text,\n            VoiceId = voice_map[target_language],\n            OutputFormat = 'mp3',\n            OutputS3BucketName = self.bucket_name\n        )\n\n        synthesis_task = {\n            'taskId': response['SynthesisTask']['TaskId'],\n            'taskStatus': 'inProgress'\n        }\n\n        while synthesis_task['taskStatus'] == 'inProgress'\\\n                or synthesis_task['taskStatus'] == 'scheduled':\n            time.sleep(POLL_DELAY)\n\n            response = self.client.get_speech_synthesis_task(\n                TaskId = synthesis_task['taskId']\n            )\n\n            synthesis_task['taskStatus'] = response['SynthesisTask']['TaskStatus']\n            if synthesis_task['taskStatus'] == 'completed':\n                synthesis_task['speechUri'] = response['SynthesisTask']['OutputUri']\n                self.storage_service.make_file_public(synthesis_task['speechUri'])\n                return synthesis_task['speechUri']\n\n        return ''\n```", "```py\nimport boto3\n\nclass StorageService:\n    def __init__(self, storage_location):\n        self.client = boto3.client('s3')\n        self.bucket_name = storage_location\n\n    def get_storage_location(self):\n        return self.bucket_name\n\n    def upload_file(self, file_bytes, file_name):\n        self.client.put_object(Bucket = self.bucket_name,\n                               Body = file_bytes,\n                               Key = file_name,\n                               ACL = 'public-read')\n\n        return {'fileId': file_name,\n                'fileUrl': \"http://\" + self.bucket_name + \".s3.amazonaws.com/\" + file_name}\n\n    def get_file(self, file_name):\n        response = self.client.get_object(Bucket = self.bucket_name, Key = file_name)\n\n        return response['Body'].read().decode('utf-8')\n\n    def make_file_public(self, uri):\n        parts = uri.split('/')\n        key = parts[-1]\n        bucket_name = parts[-2]\n\n        self.client.put_object_acl(Bucket = bucket_name,\n                                   Key = key,\n                                   ACL = 'public-read')\n```", "```py\nfrom chalice import Chalice\nfrom chalicelib import storage_service\nfrom chalicelib import transcription_service\nfrom chalicelib import translation_service\nfrom chalicelib import speech_service\n\nimport base64\nimport json\n\n#####\n# chalice app configuration\n#####\napp = Chalice(app_name='Capabilities')\napp.debug = True\n\n#####\n# services initialization\n#####\nstorage_location = 'contents.aws.ai'\nstorage_service = storage_service.StorageService(storage_location)\ntranscription_service = transcription_service.TranscriptionService(storage_service)\ntranslation_service = translation_service.TranslationService()\nspeech_service = speech_service.SpeechService(storage_service)\n\n#####\n# RESTful endpoints\n#####\n...\n```", "```py\n@app.route('/recordings/{recording_id}/translate-text', methods = ['POST'], cors = True)\ndef translate_recording(recording_id):\n    \"\"\"transcribes the specified audio then translates the transcription text\"\"\"\n    request_data = json.loads(app.current_request.raw_body)\n    from_lang = request_data['fromLang']\n    to_lang = request_data['toLang']\n\n    transcription_text = transcription_service.transcribe_audio(recording_id, from_lang)\n\n    translation_text = translation_service.translate_text(transcription_text,\n                                                        target_language = to_lang)\n\n    return {\n        'text': transcription_text,\n        'translation': translation_text\n    }\n```", "```py\nPOST <server url>/recordings/{recording_id}/translate-text\n{\n    \"fromLang\": <SOURCE LANGUAGE>,\n    \"toLang\": <TARGET LANGUAGE>\n}\n```", "```py\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"fromLang\":\"en\",\"toLang\":\"de\"}' http://127.0.0.1:8000/recordings/<recording id>/translate-text\n[\n {\n \"text\": \"<transcription>\",\n \"translation\": {\n \"translatedText\": \"<translation>\",\n \"sourceLanguage\": \"en\",\n \"targetLanguage\": \"de\"\n }\n }\n]\n```", "```py\n@app.route('/synthesize_speech', methods = ['POST'], cors = True)\ndef synthesize_speech():\n    \"\"\"performs text-to-speech on the specified text / language\"\"\"\n    request_data = json.loads(app.current_request.raw_body)\n    text = request_data['text']\n    language = request_data['language']\n\n    translation_audio_url = speech_service.synthesize_speech(text, language)\n\n    return {\n        'audioUrl': translation_audio_url\n    }\n```", "```py\nPOST <server url>/synthesize_speech\n{\n    \"text\": <TEXT>,\n    \"language\": <LANGUAGE>\n}\n```", "```py\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"text\":\"Dies ist ein Test des Amazons Polly Service.\",\"language\":\"de\"}' http://127.0.0.1:8000/synthesize_speech\n{\n \"audioUrl\": \"https://s3.us-east-1.amazonaws.com/<bucket>/<task id>.mp3\"\n}\n```", "```py\n@app.route('/recordings', methods = ['POST'], cors = True)\ndef upload_recording():\n    \"\"\"processes file upload and saves file to storage service\"\"\"\n    request_data = json.loads(app.current_request.raw_body)\n    file_name = request_data['filename']\n    file_bytes = base64.b64decode(request_data['filebytes'])\n\n    file_info = storage_service.upload_file(file_bytes, file_name)\n\n    return file_info\n```", "```py\n<!doctype html>\n<html lang=\"en\"/>\n\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n\n    <title>Universal Translator</title>\n\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/lib/w3-theme-blue-grey.css\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n</head>\n\n<body class=\"w3-theme-14\">\n    <div style=\"min-width:400px\">\n        <div class=\"w3-bar w3-large w3-theme-d4\">\n            <span class=\"w3-bar-item\">Universal Translator</span>\n        </div>\n\n        ...\n    </div>\n\n    <script src=\"img/MediaStreamRecorder.js\"></script>\n   <script src=\"img/scripts.js\"></script>\n</body>\n\n</html>\n```", "```py\n    ...\n        <div class=\"w3-container w3-content\">\n            <p class=\"w3-opacity\"><b>Select Languages</b></p>\n            <div class=\"w3-panel w3-white w3-card w3-display-container  \n            w3-center\">\n                <div>\n                    <b class=\"w3-opacity\">From:</b>\n                    <select id=\"fromLang\">\n                        <option value=\"en\">English</option>\n                        <option value=\"es\">Spanish</option>\n                        <option value=\"fr\">French</option>\n                    </select>\n                    <hr>\n                    <b class=\"w3-opacity\">To:</b>\n                    <select id=\"toLang\">\n                        <option value=\"de\">German</option>\n                        <option value=\"fr\">French</option>\n                        <option value=\"it\">Italian</option>\n                        <option value=\"es\">Spanish</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"w3-container w3-content\">\n            <p class=\"w3-opacity\"><b>Record Audio</b></p>\n            <div class=\"w3-panel w3-white w3-card w3-display-container \n            w3-center\">\n                <div>\n                    <audio id=\"recording-player\" controls>\n                        Your browser does not support the audio  \n                        element...\n                    </audio>\n                </div>\n                <div>\n                    <input type=\"button\" id=\"record-toggle\" \n                    value=\"Record\"\n                           onclick=\"toggleRecording()\"/>\n                    <input type=\"button\" id=\"translate\" \n                     value=\"Translate\"\n                           onclick=\"uploadAndTranslate()\" disabled/>\n                </div>\n            </div>\n        </div>\n     ...\n```", "```py\n...\n        <div class=\"w3-container w3-content\">\n            <p class=\"w3-opacity\"><b>Translation Text</b></p>\n            <div class=\"w3-panel w3-white w3-card w3-display-container \n            w3-center\">\n                <p id=\"text-spinner\" hidden>\n                    <i class=\"fa fa-spinner w3-spin\" style=\"font-\n                    size:64px\"></i>\n                </p>\n                <p class=\"w3-opacity\"><b>Transcription:</b></p>\n                <div id=\"transcription\"></div>\n                <hr>\n                <p class=\"w3-opacity\"><b>Translation:</b></p>\n                <div id=\"translation\"></div>\n            </div>\n        </div>\n\n        <div class=\"w3-container w3-content\">\n            <p class=\"w3-opacity\"><b>Translation Audio</b></p>\n            <div class=\"w3-panel w3-white w3-card w3-display-container \n            w3-center\">\n                <p id=\"audio-spinner\" hidden>\n                    <i class=\"fa fa-spinner w3-spin\" style=\"font-\n                     size:64px\"></i>\n                </p>\n                <audio id=\"translation-player\" controls>\n                    Your browser does not support the audio element...\n                </audio>\n            </div>\n        </div>\n...\n```", "```py\n\"use strict\";\n\nconst serverUrl = \"http://127.0.0.1:8000\";\n\n...\n\nclass HttpError extends Error {\n    constructor(response) {\n        super(`${response.status} for ${response.url}`);\n        this.name = \"HttpError\";\n        this.response = response;\n    }\n}\n```", "```py\nlet audioRecorder;\nlet recordedAudio;\n\nconst maxAudioLength = 30000;\nlet audioFile = {};\n\nconst mediaConstraints = {\n audio: true\n};\n\nnavigator.getUserMedia(mediaConstraints, onMediaSuccess, onMediaError);\n\nfunction onMediaSuccess(audioStream) {\n audioRecorder = new MediaStreamRecorder(audioStream);\n audioRecorder.mimeType = \"audio/wav\";\n audioRecorder.ondataavailable = handleAudioData;\n}\n\nfunction onMediaError(error) {\n alert(\"audio recording not available: \" + error.message);\n}\n\nfunction startRecording() {\n recordedAudio = [];\n audioRecorder.start(maxAudioLength);\n}\n\nfunction stopRecording() {\n audioRecorder.stop();\n}\n\nfunction handleAudioData(audioRecording) {\n audioRecorder.stop();\n audioFile = new File([audioRecording], \"recorded_audio.wav\", {type: \"audio/wav\"});\n\n let audioElem = document.getElementById(\"recording-player\");\n audioElem.src = window.URL.createObjectURL(audioRecording);\n}\n```", "```py\nlet isRecording = false;\n\nfunction toggleRecording() {\n    let toggleBtn = document.getElementById(\"record-toggle\");\n    let translateBtn = document.getElementById(\"translate\");\n\n    if (isRecording) {\n        toggleBtn.value = 'Record';\n        translateBtn.disabled = false;\n        stopRecording();\n    } else {\n        toggleBtn.value = 'Stop';\n        translateBtn.disabled = true;\n        startRecording();\n    }\n\n    isRecording = !isRecording;\n}\n```", "```py\nasync function uploadRecording() {\n    // encode recording file as base64 string for upload\n    let converter = new Promise(function(resolve, reject) {\n        const reader = new FileReader();\n        reader.readAsDataURL(audioFile);\n        reader.onload = () => resolve(reader.result\n            .toString().replace(/^data:(.*,)?/, ''));\n        reader.onerror = (error) => reject(error);\n    });\n    let encodedString = await converter;\n\n    // make server call to upload image\n    // and return the server upload promise\n    return fetch(serverUrl + \"/recordings\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({filename: audioFile.name, filebytes: encodedString})\n    }).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n```", "```py\nlet fromLang;\nlet toLang;\n\nfunction translateRecording(audio) {\n    let fromLangElem = document.getElementById(\"fromLang\");\n    fromLang = fromLangElem[fromLangElem.selectedIndex].value;\n    let toLangElem = document.getElementById(\"toLang\");\n    toLang = toLangElem[toLangElem.selectedIndex].value;\n\n    // start translation text spinner\n    let textSpinner = document.getElementById(\"text-spinner\");\n    textSpinner.hidden = false;\n\n    // make server call to transcribe recorded audio\n    return fetch(serverUrl + \"/recordings/\" + audio[\"fileId\"] + \"/translate-text\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({fromLang: fromLang, toLang: toLang})\n    }).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n```", "```py\nfunction updateTranslation(translation) {\n    // stop translation text spinner\n    let textSpinner = document.getElementById(\"text-spinner\");\n    textSpinner.hidden = true;\n\n    let transcriptionElem = document.getElementById(\"transcription\");\n    transcriptionElem.appendChild(document.createTextNode(translation[\"text\"]));\n\n    let translationElem = document.getElementById(\"translation\");\n    translationElem.appendChild(document.createTextNode(translation[\"translation\"]\n                                                        [\"translatedText\"]));\n\n    return translation\n}\n```", "```py\nfunction synthesizeTranslation(translation) {\n    // start translation audio spinner\n    let audioSpinner = document.getElementById(\"audio-spinner\");\n    audioSpinner.hidden = false;\n\n    // make server call to synthesize translation audio\n    return fetch(serverUrl + \"/synthesize_speech\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({text: translation[\"translation\"][\"translatedText\"], language: toLang})\n    }).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n```", "```py\nfunction updateTranslationAudio(audio) {\n    // stop translation audio spinner\n    let audioSpinner = document.getElementById(\"audio-spinner\");\n    audioSpinner.hidden = true;\n\n    let audioElem = document.getElementById(\"translation-player\");\n    audioElem.src = audio[\"audioUrl\"];\n}\n```", "```py\nfunction uploadAndTranslate() {\n    let toggleBtn = document.getElementById(\"record-toggle\");\n    toggleBtn.disabled = true;\n    let translateBtn = document.getElementById(\"translate\");\n    translateBtn.disabled = true;\n\n    uploadRecording()\n        .then(audio => translateRecording(audio))\n        .then(translation => updateTranslation(translation))\n        .then(translation => synthesizeTranslation(translation))\n        .then(audio => updateTranslationAudio(audio))\n        .catch(error => {\n            alert(\"Error: \" + error);\n        })\n\n    toggleBtn.disabled = false;\n}\n```", "```py\n├── Capabilities\n│ ├── app.py\n│ ├── chalicelib\n│ │ ├── __init__.py\n│ │ ├── speech_service.py\n│ │ ├── storage_service.py\n│ │ ├── transcription_service.py\n│ │ └── translation_service.py\n│ └── requirements.txt\n├── Pipfile\n├── Pipfile.lock\n└── Website\n    ├── index.html\n    └── scripts.js\n```", "```py\n{\n  \"version\": \"2.0\",\n  \"app_name\": \"Capabilities\",\n  \"stages\": {\n    \"dev\": {\n      \"autogen_policy\": false,\n      \"api_gateway_stage\": \"api\"\n    }\n  }\n}\n```", "```py\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Effect\": \"Allow\",\n \"Action\": [\n \"logs:CreateLogGroup\",\n \"logs:CreateLogStream\",\n \"logs:PutLogEvents\",\n \"s3:*\",\n \"translate:*\",\n \"transcribe:*\",\n \"polly:*\"\n ],\n \"Resource\": \"*\"\n }\n ]\n}\n```", "```py\n$ chalice deploy\nCreating deployment package.\nCreating IAM role: Capabilities-dev\nCreating lambda function: Capabilities-dev\nCreating Rest API\nResources deployed:\n  - Lambda ARN: arn:aws:lambda:us-east-1:<UID>:function:Capabilities-dev\n  - Rest API URL: https://<UID>.execute-api.us-east-1.amazonaws.com/api/\n```", "```py\n\"use strict\";\nconst serverUrl = \"https://<UID>.execute-api.us-east-1.amazonaws.com/api\";\n...\n```"]