["```py\nimport boto3\n\nclass ContactStore:\n    def __init__(self, store_location):\n        self.table = boto3.resource('dynamodb').Table(store_location)\n\n    ...\n\n    def get_contact_by_name(self, name):\n        response = self.table.get_item(\n            Key = {'name': name}\n        )\n\n        if 'Item' in response:\n            contact_info = response['Item']\n        else:\n            contact_info = {}\n\n        return contact_info\n\n```", "```py\nimport contact_store\n\nstore_location = 'Contacts'\ncontact_store = contact_store.ContactStore(store_location)\n\ndef lex_lambda_handler(event, context):\n    intent_name = event['currentIntent']['name']\n    parameters = event['currentIntent']['slots']\n    attributes = event['sessionAttributes'] if event['sessionAttributes'] is not None else {}\n\n    response = lookup_phone(intent_name, parameters, attributes)\n\n    return response\n\ndef lookup_phone(intent_name, parameters, attributes):\n    first_name = parameters['FirstName']\n    last_name = parameters['LastName']\n\n    # get phone number from dynamodb\n    name = (first_name + ' ' + last_name).title()\n    contact_info = contact_store.get_contact_by_name(name)\n\n    if 'phone' in contact_info:\n        attributes['Phone'] = contact_info['phone']\n        attributes['FirstName'] = first_name\n        attributes['LastName'] = last_name\n        response = intent_success(intent_name, parameters, attributes)\n    else:\n        response = intent_failure(intent_name, parameters, attributes, 'Could not find contact information.')\n\n    return response\n\n# Amazon lex helper functions\n...\n```", "```py\n# Amazon lex helper functions\ndef intent_success(intent_name, parameters, attributes):\n    return {\n        'sessionAttributes': attributes,\n        'dialogAction': {\n            'type': 'Close',\n            'fulfillmentState': 'Fulfilled'\n        }\n    }\n\ndef intent_failure(intent_name, parameters, attributes, message):\n    return {\n        'dialogAction': {\n            'type': 'Close',\n            'fulfillmentState': 'Failed',\n            'message': {\n                'contentType': 'PlainText',\n                'content': message\n            }\n        }\n    }\n\ndef intent_delegation(intent_name, parameters, attributes):\n    return {\n        'sessionAttributes': attributes,\n        'dialogAction': {\n            'type': 'Delegate',\n            'slots': parameters,\n\n        }\n    }\n\ndef intent_elicitation(intent_name, parameters, attributes, parameter_name):\n    return {\n        'sessionAttributes': attributes,\n        'dialogAction': {\n            'type': 'ElicitSlot',\n            'intentName': intent_name,\n            'slots': parameters,\n            'slotToElicit': parameter_name\n        }\n    }\n```", "```py\ndef lex_lambda_handler(event, context):\n    intent_name = event['currentIntent']['name']\n    parameters = event['currentIntent']['slots']\n    attributes = event['sessionAttributes'] if event['sessionAttributes'] is not None else {}\n\n    response = init_contact(intent_name, parameters, attributes)\n\n    return response\n\ndef init_contact(intent_name, parameters, attributes):\n    first_name = parameters.get('FirstName')\n    last_name = parameters.get('LastName')\n\n    prev_first_name = attributes.get('FirstName')\n    prev_last_name = attributes.get('LastName')\n\n    if first_name is None and prev_first_name is not None:\n        parameters['FirstName'] = prev_first_name\n\n    if last_name is None and prev_last_name is not None:\n        parameters['LastName'] = prev_last_name\n\n    if parameters['FirstName'] is not None and parameters['LastName'] is not None:\n        response = intent_delegation(intent_name, parameters, attributes)\n    elif parameters['FirstName'] is None:\n        response = intent_elicitation(intent_name, parameters, attributes, 'FirstName')\n    elif parameters['LastName'] is None:\n        response = intent_elicitation(intent_name, parameters, attributes, 'LastName')\n\n    return response\n\n# lex response helper functions\n...\n```", "```py\n$ mkdir ContactAssistant\n$ cd ContactAssistant\n```", "```py\n$ pipenv --three\n$ pipenv install boto3\n$ pipenv install chalice\n```", "```py\n$ pipenv shell\n```", "```py\n$ chalice new-project Capabilities\n```", "```py\ncd Capabilities\nmkdir chalicelib\ntouch chalicelib/__init__.py\ncd ..\n```", "```py\nProject Structure\n------------\n├── ContactAssistant/\n ├── Capabilities/\n ├── .chalice/\n ├── config.json\n ├── chalicelib/\n ├── __init__.py\n ├── app.py\n ├── requirements.txt\n ├── Pipfile\n ├── Pipfile.lock\n```", "```py\nimport boto3\n\nclass IntelligentAssistantService:\n    def __init__(self, assistant_name):\n        self.client = boto3.client('lex-runtime')\n        self.assistant_name = assistant_name\n\n    def send_user_text(self, user_id, input_text):\n        response = self.client.post_text(\n            botName = self.assistant_name,\n            botAlias = 'Production',\n            userId = user_id,\n            inputText = input_text\n        )\n\n return response['message']\n```", "```py\nfrom chalice import Chalice\nfrom chalicelib import intelligent_assistant_service\n\nimport json\n\n#####\n# chalice app configuration\n#####\napp = Chalice(app_name='Capabilities')\napp.debug = True\n\n#####\n# services initialization\n#####\nassistant_name = 'ContactAssistant'\nassistant_service = intelligent_assistant_service.IntelligentAssistantService(assistant_name)\n\n#####\n# RESTful endpoints\n#####\n@app.route('/contact-assistant/user-id/{user_id}/send-text', methods = ['POST'], cors = True)\ndef send_user_text(user_id):\n    request_data = json.loads(app.current_request.raw_body)\n\n    message = assistant_service.send_user_text(user_id, request_data['text'])\n\n    return message\n```", "```py\n$ chalice local\nRestarting local dev server.\nFound credentials in shared credentials file: ~/.aws/credentials\nServing on http://127.0.0.1:8000\n```", "```py\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"text\": \"Call John Smith\"}' http://127.0.0.1:8000/contact-assistant/user-id/me/send-text\n> Would you like me to call John Smith?\n\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"text\": \"Yes\"}' http://127.0.0.1:8000/contact-assistant/user-id/me/send-text\n> Calling John Smith at (202) 123-4567\n```"]