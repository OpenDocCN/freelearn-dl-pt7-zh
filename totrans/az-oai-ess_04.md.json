["```py\n!pip install -r requirements.txt\n```", "```py\n    import os\n    from dotenv import load_dotenv\n    import openai\n    from langchain import OpenAI\n    from langchain.llms import AzureOpenAI\n    from langchain.retrievers import AzureCognitiveSearchRetriever\n    from langchain.embeddings import OpenAIEmbeddings\n    from langchain.vectorstores import Chroma\n    from langchain.llms import AzureOpenAI\n    from langchain.chains import RetrievalQA\n    ```", "```py\n    # Azure\n    load_dotenv()\n    OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n    OPENAI_DEPLOYMENT_ENDPOINT = os.getenv(\n        \"OPENAI_DEPLOYMENT_ENDPOINT\")\n    OPENAI_DEPLOYMENT_NAME = os.getenv(\n        \"OPENAI_DEPLOYMENT_NAME\")\n    OPENAI_MODEL_NAME = os.getenv(\n        \"OPENAI_MODEL_NAME\")\n    OPENAI_API_VERSION = os.getenv(\n        \"OPENAI_API_VERSION\")\n    OPENAI_EMBEDDING_DEPLOYMENT_NAME = os.getenv(\n        \"OPENAI_EMBEDDING_DEPLOYMENT_NAME\")\n    OPENAI_EMBEDDING_MODEL_NAME = os.getenv(\n        \"OPENAI_EMBEDDING_MODEL_NAME\")\n    OPENAI_DEPLOYMENT_VERSION = os.getenv(\n        \"OPENAI_DEPLOYMENT_VERSION\")\n    OPENAI_EMBEDDING_VERSION = os.getenv(\n        \"OPENAI_EMBEDDING_VERSION\")\n    OPENAI_SIMILARITY_DEPLOYMENT_NAME = os.getenv(\n        \"OPENAI_SIMILARITY_DEPLOYMENT_NAME\")\n    # Cognitive service\n    vector_store_address = os.getenv(\"VECTOR_STORE_ADDRESS\")\n    vector_store_password = os.getenv(\"VECTOR_STORE_PASSWORD\")\n    AZURE_COGNITIVE_SEARCH_SERVICE_NAME = os.getenv(\n        \"AZURE_COGNITIVE_SEARCH_SERVICE_NAME\")\n    AZURE_COGNITIVE_SEARCH_INDEX_NAME = os.getenv(\n        \"AZURE_COGNITIVE_SEARCH_INDEX_NAME\")\n    AZURE_COGNITIVE_SEARCH_API_KEY = os.getenv(\n        \"AZURE_COGNITIVE_SEARCH_API_KEY\")\n    #init Azure OpenAI\n    openai.api_type = \"azure\"\n    openai.api_version = OPENAI_DEPLOYMENT_VERSION\n    openai.api_base = OPENAI_DEPLOYMENT_ENDPOINT\n    openai.api_key = OPENAI_API_KEY\n    load_dotenv()\n    We have provided a sample `.env` file that needs to be configured with the connection strings from your Azure portal. Follow these steps to set it up:1.  Adjust the `OPENAI_API_BASE` and `OPENAI_DEPLOYMENT_ENDPOINT` values to match your Azure OpenAI resource name. For example, if you’ve named your Azure OpenAI resource `oai-documents-qna`, the `OPENAI_API_BASE` value should be set to [https://oai-documents-qna.azure.com/](https://oai-documents-qna.azure.com/).2.  Update the `OPENAI_API_KEY` value with the access key found in your Azure OpenAI resource under the `AZURE_SEARCH_SERVICE_NAME` and `AZURE_SEARCH_ADMIN_KEY` to match your Azure Search resource details, which can be obtained from Azure Cognitive Search.\n    ```", "```py\n# using model engine for testing the connectivity OpenAI\nllm = AzureOpenAI(engine=OPENAI_MODEL_NAME, temperature=0)\nprint(llm('tell me about yourself'))\n```", "```py\n# load documents\nloader = DirectoryLoader('data/', glob='*.pdf', show_progress=True)\ndocuments = loader.load()\n```", "```py\n# split documents into chunks\ntext_splitter = CharacterTextSplitter(chunk_size=1000, \n    chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n```", "```py\n# vector search\nindex_name: str = \" azureblob-index\"\nembeddings: OpenAIEmbeddings = OpenAIEmbeddings(deployment=model, \n    chunk_size=1)\nvector_store: AzureSearch = AzureSearch(\n     azure_search_endpoint = vector_store_address,\n     azure_search_key=vector_store_password,\n     index_name=index_name,\n     embedding_function=embeddings.embed_query,\n)\nlist_of_docs = vector_store.add_documents(documents=docs)\n```", "```py\n# Perform a similarity search\ndocs_search = vector_search.similarity_search(\n    query=\"What are some good places in Goa to visit in December\",\n    k=3,\n    search_type=\"similarity\",\n)\nprint(docs_search[0].page_content)\n```", "```py\nchain = RetrievalQA.from_chain_type(\n    llm=AzureOpenAI(\n        deployment_name=OPENAI_DEPLOYMENT_NAME, \n        model=OPENAI_DEPLOYMENT_NAME\n    ),\n    chain_type=\"stuff\",\n    retriever=vector_search.as_retriever()\n)\nchain\n```", "```py\nquery = \" What are some good places in Goa to visit in December\"\nchain.run(query)\n```"]