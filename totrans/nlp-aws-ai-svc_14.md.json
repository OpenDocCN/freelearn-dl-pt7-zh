["```py\n    documentName = \"validmedicalform.png\"\n    display(Image(filename=documentName))\n    ```", "```py\n    def calltextract(documentName): \n        client = boto3.client(service_name='textract',\n             region_name= 'us-east-1',\n             endpoint_url='https://textract.us-east-1.amazonaws.com')\n        with open(documentName, 'rb') as file:\n                img_test = file.read()\n                bytes_test = bytearray(img_test)\n                print('Image loaded', documentName)\n        response = client.analyze_document(Document={'Bytes': bytes_test}, FeatureTypes=['FORMS'])\n                   return response\n    ```", "```py\n    response= calltextract(documentName)\n    print(response)\n    ```", "```py\n    from trp import Document\n    def getformkeyvalue(response):\n        doc = Document(response)\n        key_map = {}\n        for page in doc.pages:\n            # Print fields\n            for field in page.form.fields:\n                if field is None or field.key is None or field.value is None:\n                    continue\n                key_map[field.key.text] = field.value.text\n        return key_map\n    ```", "```py\n    get_form_keys = getformkeyvalue(response)\n    print(get_form_keys)\n    ```", "```py\n    def validate(body):\n        json_acceptable_string = body.replace(\"'\", \"\\\"\")\n        json_data = json.loads(json_acceptable_string)\n        print(json_data)\n        zip = json_data['ZIP CODE']\n        id = json_data['ID NUMBER']\n        if(not zip.strip().isdigit()):\n            return False, id, \"Zip code invalid\"\n        length = len(id.strip())\n        if(length != 12):\n            return False, id, \"Invalid claim Id\"\n        return True, id, \"Ok\"\n    ```", "```py\n    textract_json= json.dumps(get_form_keys,indent=2)\n    res, formid, result = validate(textract_json)\n    print(result)\n    print(formid)\n    ```", "```py\n    comprehend = boto3.client(service_name='comprehendmedical')\n    ```", "```py\n    cm_json_data =  comprehend.detect_entities_v2(Text=textract_json)\n    print(\"\\nMedical Entities\\n========\")\n    for entity in cm_json_data[\"Entities\"]:\n        print(\"- {}\".format(entity[\"Text\"]))\n        print (\"   Type: {}\".format(entity[\"Type\"]))\n        print (\"   Category: {}\".format(entity[\"Category\"]))\n        if(entity[\"Traits\"]):\n            print(\"   Traits:\")\n            for trait in entity[\"Traits\"]:\n                print (\"    - {}\".format(trait[\"Name\"]))\n        print(\"\\n\")\n    ```", "```py\n    def printtocsv(cm_json_data,formid):       \n            entities = cm_json_data['Entities']\n            with open(TEMP_FILE, 'w') as csvfile: # 'w' will truncate the file\n                filewriter = csv.writer(csvfile, delimiter=',',\n                                quotechar='|', quoting=csv.QUOTE_MINIMAL)\n                filewriter.writerow([ 'ID','Category', 'Type', 'Text'])\n                for entity in entities:\n                    filewriter.writerow([formid, entity['Category'], entity['Type'], entity['Text']])\n    filename = \"procedureresult/\" + formid + \".csv\"\n     S3Uploader.upload(TEMP_FILE, 's3://{}/{}'.format(bucket, prefix))\n    ```", "```py\n    printtocsv(cm_json_data,formid)\n    ```", "```py\n    \"successfully parsed:procedureresult/a-184054-6661.csv\"\n    ```", "```py\n    InvalidDocument = \"invalidmedicalform.png\"\n    display(Image(filename=InvalidDocument))\n    ```", "```py\n    response = calltextract(InvalidDocument)\n    ```", "```py\n    get_form_keys = getformkeyvalue(response)\n    print(get_form_keys)\n    ```", "```py\n    textract_json= json.dumps(get_form_keys,indent=2)\n    res, formid, result = validate(textract_json)\n    print(result)\n    print(formid)\n    print(res)\n    ```", "```py\n    sns = boto3.client('sns')\n    topicARN=\"<Enter your topic arn>\"\n    ```", "```py\n    snsbody = \"Content:\" + str(textract_json) + \"Reason:\" + str(result)\n    print(snsbody)\n    ```", "```py\n    try:\n        response = sns.publish(\n                        TargetArn = topicARN,\n                        Message= snsbody\n        )\n        print(response)\n    except Exception as e:\n            print(\"Failed while doing validation\")\n            print(e.message)\n    ```"]