["```py\n$ mkdir PictorialTranslator\n$ cd PictorialTranslator\n```", "```py\n$ mkdir Website\n$ touch Website/index.html\n$ touch Website/scripts.js\n```", "```py\n$ pipenv --three\n$ pipenv install boto3\n$ pipenv install chalice\n```", "```py\n$ pipenv shell\n```", "```py\n$ chalice new-project Capabilities\n```", "```py\ncd Capabilities\nmkdir chalicelib\ntouch chalicelib/__init__.py\ncd ..\n```", "```py\nProject Structure\n------------\n├── PictorialTranslator/\n    ├── Capabilities/\n        ├── .chalice/\n            ├── config.json\n        ├── chalicelib/\n            ├── __init__.py\n        ├── app.py\n        ├── requirements.txt\n    ├── Website/\n        ├── index.html\n        ├── script.js\n    ├── Pipfile\n    ├── Pipfile.lock\n```", "```py\n$ aws rekognition detect-text --image S3Object=\\{Bucket=contents.aws.ai,Name=german_street_sign.jpg\\}\n{\n    \"TextDetections\": [\n        {\n            \"DetectedText\": \"Einbahnstrabe\",\n            \"Type\": \"LINE\",\n            \"Id\": 0,\n            \"Confidence\": 99.16583251953125,\n            \"Geometry\": {\n                \"BoundingBox\": {\n                    \"Width\": 0.495918333530426,\n                    \"Height\": 0.06301824748516083,\n                    \"Left\": 0.3853428065776825,\n                    \"Top\": 0.4955403208732605\n                },\n                \"Polygon\": [\n                    ...\n                ]\n            }\n        },\n        {\n            \"DetectedText\": \"Einbahnstrabe\",\n            \"Type\": \"WORD\",\n            \"Id\": 1,\n            \"ParentId\": 0,\n            ...\n        }\n    ]\n}\n```", "```py\nimport boto3\n\nclass RecognitionService:\n    def __init__(self, storage_service):\n        self.client = boto3.client('rekognition')\n        self.bucket_name = storage_service.get_storage_location()\n\n    def detect_text(self, file_name):\n        response = self.client.detect_text(\n            Image = {\n                'S3Object': {\n                    'Bucket': self.bucket_name,\n                    'Name': file_name\n                }\n            }\n        )\n        lines = []\n        for detection in response['TextDetections']:\n            if detection['Type'] == 'LINE':\n                lines.append({\n                    'text': detection['DetectedText'],\n                    'confidence': detection['Confidence'],\n                    'boundingBox': detection['Geometry']['BoundingBox']\n                })\n\n        return lines\n```", "```py\n$ aws translate translate-text --text \"Einbahnstrabe\" --source-language-code auto --target-language-code en\n{\n    \"TranslatedText\": \"One way\",\n    \"SourceLanguageCode\": \"de\",\n    \"TargetLanguageCode\": \"en\"\n}\n```", "```py\nimport boto3\n\nclass TranslationService:\n    def __init__(self):\n        self.client = boto3.client('translate')\n\n    def translate_text(self, text, source_language = 'auto', target_language = 'en'):\n        response = self.client.translate_text(\n            Text = text,\n            SourceLanguageCode = source_language,\n            TargetLanguageCode = target_language\n        )\n\n        translation = {\n            'translatedText': response['TranslatedText'],\n            'sourceLanguage': response['SourceLanguageCode'],\n            'targetLanguage': response['TargetLanguageCode']\n        }\n\n        return translation\n```", "```py\nen,fr,de,es\nPackt, Packt, Packt, Packt\n```", "```py\nimport boto3\n\nclass StorageService:\n    def __init__(self, storage_location):\n        self.client = boto3.client('s3')\n        self.bucket_name = storage_location\n\n    def get_storage_location(self):\n        return self.bucket_name\n\n    def upload_file(self, file_bytes, file_name):\n        self.client.put_object(Bucket = self.bucket_name,\n                               Body = file_bytes,\n                               Key = file_name,\n                               ACL = 'public-read')\n\n        return {'fileId': file_name,\n                'fileUrl': \"http://\" + self.bucket_name + \".s3.amazonaws.com/\" + file_name}\n```", "```py\nreturn files\nimport os, sys\nimport unittest\n\nfrom chalicelib import translation_service\n\nclass TranslationServiceTest(unittest.TestCase):\n    def setUp(self):\n        self.service = translation_service.TranslationService()\n\n    def test_translate_text(self):\n        translation = self.service.translate_text('Einbahnstrabe')\n        self.assertTrue(translation)\n        self.assertEqual('de', translation['sourceLanguage'])\n        self.assertEqual('One way', translation['translatedText'])\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\nfrom chalice import Chalice\nfrom chalicelib import storage_service\nfrom chalicelib import recognition_service\nfrom chalicelib import translation_service\n\n#####\n# chalice app configuration\n#####\napp = Chalice(app_name='Capabilities')\napp.debug = True\n\n#####\n# services initialization\n#####\nstorage_location = 'contents.aws.ai'\nstorage_service = storage_service.StorageService(storage_location)\nrecognition_service = recognition_service.RecognitionService(storage_service)\ntranslation_service = translation_service.TranslationService()\n\n#####\n# RESTful endpoints\n#####\n...\n```", "```py\n...\nimport json\n\n...\n#####\n# RESTful endpoints\n####\n@app.route('/images/{image_id}/translated-text', methods = ['POST'], cors = True)\ndef translate_image_text(image_id):\n    \"\"\"detects then translates text in the specified image\"\"\"\n    request_data = json.loads(app.current_request.raw_body)\n    from_lang = request_data['fromLang']\n    to_lang = request_data['toLang']\n\n    MIN_CONFIDENCE = 80.0\n\n    text_lines = recognition_service.detect_text(image_id)\n\n    translated_lines = []\n    for line in text_lines:\n        # check confidence\n        if float(line['confidence']) >= MIN_CONFIDENCE:\n            translated_line = translation_service.translate_text(line['text'], from_lang, to_lang)\n            translated_lines.append({\n                'text': line['text'],\n                'translation': translated_line,\n                'boundingBox': line['boundingBox']\n            })\n\n    return translated_lines\n```", "```py\nPOST <server url>/images/{image_id}/translate-text\n{\n    fromLang: \"auto\",\n    toLang: \"en\"\n}\n```", "```py\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"fromLang\":\"auto\",\"toLang\":\"en\"}' http://127.0.0.1:8000/images/german_street_sign.jpg/translate-text\n[\n {\n \"text\": \"Einbahnstrabe\",\n \"translation\": {\n \"translatedText\": \"One way\",\n \"sourceLanguage\": \"de\",\n \"targetLanguage\": \"en\"\n },\n \"boundingBox\": {\n \"Width\": 0.495918333530426,\n \"Height\": 0.06301824748516083,\n \"Left\": 0.3853428065776825,\n \"Top\": 0.4955403208732605\n }\n }\n]\n```", "```py\nimport base64\nimport json\n...\n\n@app.route('/images', methods = ['POST'], cors = True)\ndef upload_image():\n    \"\"\"processes file upload and saves file to storage service\"\"\"\n    request_data = json.loads(app.current_request.raw_body)\n    file_name = request_data['filename']\n    file_bytes = base64.b64decode(request_data['filebytes'])\n\n    image_info = storage_service.upload_file(file_bytes, file_name)\n\n    return image_info\n```", "```py\nPOST <server url>/images\n```", "```py\n$ (echo -n '{\"filename\": \"german_street_sign.jpg\", \"filebytes\": \"'; base64 /<file path>/german_street_sign.jpg; echo '\"}') | curl --header \"Content-Type: application/json\" -d @- http://127.0.0.1:8000/images\n{\n   \"fileId\":\"germany_street_sign.jpg\",\n   \"fileUrl\":\"https://contents.aws.ai.s3.amazonaws.com/german_street_sign.jpg\"\n}\n\n```", "```py\n<!doctype html>\n<html lang=\"en\"/>\n\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n\n    <title>Pictorial Translator</title>\n\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/lib/w3-theme-blue-grey.css\">\n</head>\n\n<body class=\"w3-theme-14\">\n    <div style=\"min-width:400px\">\n        <div class=\"w3-bar w3-large w3-theme-d4\">\n            <span class=\"w3-bar-item\">Pictorial Translator</span>\n        </div>\n\n        <div class=\"w3-container w3-content\">\n            <p class=\"w3-opacity\"><b>Upload</b></p>\n            <input id=\"file\" type=\"file\" name=\"file\" accept=\"image/*\"/>\n            <input class=\"w3-button w3-blue-grey\" type=\"submit\" value=\"Upload\"\n                   onclick=\"uploadAndTranslate()\"/>\n\n            <p class=\"w3-opacity\"><b>Image</b></p>\n            <div id=\"view\" class=\"w3-panel w3-white w3-card w3-display-container\"\n                 style=\"display:none;\">\n                <div style=\"float: left;\">\n                    <img id=\"image\" width=\"600\"/>\n                </div>\n                <div style=\"float: right;\">\n                    <h5>Translated Text:</h5>\n                    <div id=\"translations\"/>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"img/scripts.js\"></script>\n</body>\n\n</html>\n```", "```py\n\"use strict\";\nconst serverUrl = \"http://127.0.0.1:8000\";\n...\nclass HttpError extends Error {\n constructor(response) {\n        super(`${response.status} for ${response.url}`);\n        this.name = \"HttpError\";\n        this.response = response;\n    }\n}\n\n```", "```py\nasync function uploadImage() {\n    // encode input file as base64 string for upload\n    let file = document.getElementById(\"file\").files[0];\n    let converter = new Promise(function(resolve, reject) {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result\n            .toString().replace(/^data:(.*,)?/, ''));\n        reader.onerror = (error) => reject(error);\n    });\n    let encodedString = await converter;\n\n    // clear file upload input field\n    document.getElementById(\"file\").value = \"\";\n\n    // make server call to upload image\n    // and return the server upload promise\n    return fetch(serverUrl + \"/images\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({filename: file.name, filebytes: encodedString})\n    }).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n```", "```py\nfunction updateImage(image) {\n    document.getElementById(\"view\").style.display = \"block\";\n\n    let imageElem = document.getElementById(\"image\");\n    imageElem.src = image[\"fileUrl\"];\n    imageElem.alt = image[\"fileId\"];\n\n    return image;\n}\n```", "```py\nfunction translateImage(image) {\n    // make server call to translate image\n    // and return the server upload promise\n    return fetch(serverUrl + \"/images/\" + image[\"fileId\"] + \"/translate-text\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({fromLang: \"auto\", toLang: \"en\"})\n    }).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n```", "```py\nfunction annotateImage(translations) {\n    let translationsElem = document.getElementById(\"translations\");\n    while (translationsElem.firstChild) {\n        translationsElem.removeChild(translationsElem.firstChild);\n    }\n    translationsElem.clear\n\n    for (let i = 0; i < translations.length; i++) {\n        let translationElem = document.createElement(\"h6\");\n        translationElem.appendChild(document.createTextNode(\n            translations[i][\"text\"] + \" -> \" + translations[i][\"translation\"][\"translatedText\"]\n        ));\n        translationsElem.appendChild(document.createElement(\"hr\"));\n        translationsElem.appendChild(translationElem);\n    }\n}\n```", "```py\nfunction uploadAndTranslate() {\n    uploadImage()\n        .then(image => updateImage(image))\n        .then(image => translateImage(image))\n        .then(translations => annotateImage(translations))\n        .catch(error => {\n            alert(\"Error: \" + error);\n        })\n}\n```", "```py\n├── Capabilities\n│   ├── app.py\n│   ├── chalicelib\n│   │ ├── __init__.py\n│   │ ├── recognition_service.py\n│   │ ├── storage_service.py\n│   │ └── translation_service.py\n│   └── requirements.txt\n├── Pipfile\n├── Pipfile.lock\n└── Website\n    ├── index.html\n    └── scripts.js\n\n```", "```py\n{\n  \"version\": \"2.0\",\n  \"app_name\": \"Capabilities\",\n  \"stages\": {\n    \"dev\": {\n      \"autogen_policy\": false,\n      \"api_gateway_stage\": \"api\"\n    }\n  }\n}\n```", "```py\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Effect\": \"Allow\",\n \"Action\": [\n \"logs:CreateLogGroup\",\n \"logs:CreateLogStream\",\n \"logs:PutLogEvents\",\n \"s3:*\",\n \"rekognition:*\",\n \"translate:*\"\n ],\n \"Resource\": \"*\"\n }\n ]\n}\n```", "```py\n$ chalice deploy\nCreating deployment package.\nCreating IAM role: Capabilities-dev\nCreating lambda function: Capabilities-dev\nCreating Rest API\nResources deployed:\n  - Lambda ARN: arn:aws:lambda:us-east-1:<UID>:function:Capabilities-dev\n  - Rest API URL: https://<UID>.execute-api.us-east-1.amazonaws.com/api/\n```", "```py\n\"use strict\";\n\nconst serverUrl = \"https://<UID>.execute-api.us-east-1.amazonaws.com/api\";\n\n...\n```"]