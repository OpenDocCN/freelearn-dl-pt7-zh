["```py\npvt_emails = pd.pivot_table(df_emails, values='count', index='email_ID', columns=['word_ID'], fill_value=0)\n```", "```py\ndict_IDF = {name: np.log(float(no_emails) / (1+len(bag_of_words[bag_of_words[name] > 0]))) for name in bag_of_words.columns}\n```", "```py\nsparse_emails = csr_matrix(pvt_emails, dtype=np.float32)\n```", "```py\nvol_train = int(0.8 * sparse_emails.shape[0])\n\n# split train and test\ntrain_data = sparse_emails[:vol_train, :] \ntest_data = sparse_emails[vol_train:, :] \n\nvol_test = test_data.shape[0]\nval_data = test_data[:vol_test//2, :]\ntest_data = test_data[vol_test//2:, :]\n```", "```py\ndata_bytes = io.BytesIO()\nsmamzc.write_spmatrix_to_sparse_tensor(array=sprse_matrix[begin:finish], file=data_bytes, labels=None)\ndata_bytes.seek(0)\n```", "```py\n file_name = os.path.join(prefix, fname_template.format(i))\n boto3.resource('s3').Bucket(bucket).Object(file_name).upload_fileobj(data_bytes)\n```", "```py\nntm_estmtr = sagemaker.estimator.Estimator(container,\n role,\n train_instance_count=2,\n train_instance_type='ml.c4.xlarge',\n output_path=output_path,\n sagemaker_session=sess)\n```", "```py\nnum_topics = 3\nvocab_size = 17524 # from shape from pivoted emails DataFrame\nntm_estmtr.set_hyperparameters(num_topics=num_topics, \n feature_dim=vocab_size, \n mini_batch_size=30, \n epochs=150, \n num_patience_epochs=5, \n tolerance=.001)\n```", "```py\nntm_estmtr.fit({'train': s3_train, 'validation': s3_val, 'auxiliary': s3_aux})\n```", "```py\nntm_predctr = ntm_estmtr.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')\n```", "```py\nntm_predctr.content_type = 'text/csv'\nntm_predctr.serializer = csv_serializer\nntm_predctr.deserializer = json_deserializer\n```", "```py\ntest_data = np.array(test_data.todense())\n```", "```py\nresults = ntm_predctr.predict(test_data[1:6])\ntopic_wts_res = np.array([prediction['topic_weights'] for prediction in results['predictions']])\n```", "```py\ndf_tpcwts=pd.DataFrame(topic_wts_res.T)\n```", "```py\ndf_tpcwts.plot(kind='bar', figsize=(16,4), fontsize=fnt_sz)\nplt.ylabel('Topic % Across Emails', fontsize=fnt_sz)\nplt.xlabel('Topic Number', fontsize=fnt_sz)\n```", "```py\nboto3.resource('s3').Bucket(bucket).download_file(model_path, 'downloaded_model.tar.gz')\n```", "```py\nmodel_dict = mx.ndarray.load('params')\n# Retrieve word distribution for each of the latent topics\nW = model_dict['arg:projection_weight'] \n```", "```py\npvals = mx.nd.softmax(mx.nd.array(W[:, ind])).asnumpy()\n```"]