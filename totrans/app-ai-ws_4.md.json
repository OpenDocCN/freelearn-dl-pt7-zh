["```py\nimport numpy as np\nprobabilities = list(range(1,4)) \nminus_probabilities = [-x for x in probabilities]\nlog_probabilities = [x for x in map(np.log2, probabilities)]\nentropy_value = np.dot(minus_probabilities, log_probabilities)\n```", "```py\n    import numpy as np\n    ```", "```py\n    def entropy(probabilities):\n        minus_probabilities = [-x for x in probabilities]\n        log_probabilities = [x for x in map(np.log2, \\\n                                            probabilities)]\n        return np.dot(minus_probabilities, log_probabilities)\n    ```", "```py\n    H_employed = entropy([4/7, 3/7])\n    H_employed\n    ```", "```py\n    0.9852281360342515\n    ```", "```py\n    H_income = entropy([1/7, 2/7, 1/7, 2/7, 1/7])\n    H_income\n    ```", "```py\n    2.2359263506290326\n    ```", "```py\n    H_loanType = entropy([3/7, 2/7, 2/7])\n    H_loanType\n    ```", "```py\n    1.5566567074628228\n    ```", "```py\n    H_LoanAmount = entropy([1/7, 1/7, 3/7, 1/7, 1/7])\n    H_LoanAmount\n    ```", "```py\n    2.128085278891394\n    ```", "```py\nH_label = entropy([5/7, 2/7])\nH_label\n```", "```py\n0.863120568566631\n```", "```py\nH_group1 = entropy([1]) \nH_group1\n```", "```py\n-0.0\n```", "```py\nH_group2 = entropy([5/6, 1/6]) \nH_group2\n```", "```py\n0.6500224216483541\n```", "```py\nH_group1 * 1/7 + H_group2 * 6/7\n```", "```py\n0.5571620756985892\n```", "```py\nInformation_gain = 0.863120568566631 - 0.5572\nInformation_gain\n```", "```py\n0.30592056856663097\n```", "```py\nfrom sklearn import model_selection\nfeatures_train, features_test, \\\nlabel_train, label_test = \\\nmodel_selection.train_test_split(features, label, test_size=0.1, \\\n                                 random_state=8)\n```", "```py\nfrom sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier(max_depth=6)\ndecision_tree.fit(features_train, label_train)\n```", "```py\ndecision_tree.predict(features_test)\n```", "```py\ndecision_tree.score(features_test, label_test)\n```", "```py\npredicted_label = decision_tree.predict(features_test)\n```", "```py\nfrom sklearn.metrics import accuracy_score\naccuracy_score(label_test, predicted_label)\n```", "```py\nfrom sklearn.metrics import classification_report\nprint(classification_report(label_test, predicted_label))\n```", "```py\n    import numpy as np\n    ```", "```py\n    real_labels = np.array([True, True, False, True, True])\n    real_labels\n    ```", "```py\n    array([ True, True, False, True, True])\n    ```", "```py\n    model_1_preds = np.array([True, False, False, False, False])\n    model_1_preds\n    ```", "```py\n    array([ True, False, False, False, False])\n    ```", "```py\n    model_2_preds = np.array([True, True, True, True, True])\n    model_2_preds\n    ```", "```py\n    array([ True,  True,  True,  True,  True])\n    ```", "```py\n    model_1_tp_cond = (real_labels == True) \\\n                       & (model_1_preds == True)\n    model_1_tp_cond\n    ```", "```py\n    array([ True, False, False, False, False])\n    ```", "```py\n    model_1_tp = model_1_tp_cond.sum()\n    model_1_tp\n    ```", "```py\n    1\n    ```", "```py\n    model_1_fp = ((real_labels == False) \\\n                   & (model_1_preds == True)).sum()\n    model_1_fp\n    ```", "```py\n    0\n    ```", "```py\n    model_1_fn = ((real_labels == True) \\\n                   & (model_1_preds == False)).sum()\n    model_1_fn\n    ```", "```py\n    3\n    ```", "```py\n    model_1_precision = model_1_tp / (model_1_tp + model_1_fp)\n    model_1_precision\n    ```", "```py\n    1.0\n    ```", "```py\n    model_1_recall = model_1_tp / (model_1_tp + model_1_fn)\n    model_1_recall\n    ```", "```py\n    0.25\n    ```", "```py\n    model_1_f1 = 2*model_1_precision * model_1_recall\\\n                 / (model_1_precision + model_1_recall)\n    model_1_f1\n    ```", "```py\n    0.4\n    ```", "```py\n    model_2_tp = ((real_labels == True) \\\n                   & (model_2_preds == True)).sum()\n    model_2_tp\n    ```", "```py\n    4\n    ```", "```py\n    model_2_fp = ((real_labels == False) \\\n                   & (model_2_preds == True)).sum()\n    model_2_fp\n    ```", "```py\n    1\n    ```", "```py\n    model_2_fn = ((real_labels == True) \\\n                   & (model_2_preds == False)).sum()\n    model_2_fn\n    ```", "```py\n    0\n    ```", "```py\n    model_2_precision = model_2_tp / (model_2_tp + model_2_fp) \n    model_2_precision\n    ```", "```py\n    0.8\n    ```", "```py\n    model_2_recall = model_2_tp / (model_2_tp + model_2_fn)\n    model_2_recall\n    ```", "```py\n    1.0\n    ```", "```py\n    model_2_f1 = 2*model_2_precision*model_2_recall \\\n                 / (model_2_precision + model_2_recall)\n    model_2_f1\n    ```", "```py\n    0.888888888888889\n    ```", "```py\nfrom sklearn.metrics import recall_score, \\\nprecision_score, f1_score\n```", "```py\nlabel_predicted = decision_tree.predict(data)\nprecision_score(label_test, predicted_label, \\\n                average='weighted')\n```", "```py\nrecall_score(label_test, label_predicted, average='weighted')\n```", "```py\nf1_score(label_test, predicted_label, average='weighted')\n```", "```py\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(label_test, predicted_label)\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nrandom_forest_classifier = RandomForestClassifier()\nrandom_forest_classifier.fit(features_train, label_train)\nlabels_predicted = random_forest_classifier.predict\\\n                   (features_test)\n```", "```py\nrandom_forest_classifier.feature_importances_\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nrandom_forest_classifier = RandomForestClassifier()\nfrom sklearn.model_selection import cross_val_score\ncross_val_score(random_forest_classifier, features_train, \\\n                label_train, cv=5, scoring='accuracy')\n```", "```py\nfrom sklearn.ensemble import ExtraTreesClassifier\nextra_trees_classifier = \\\nExtraTreesClassifier(n_estimators=100, \\\n                     max_depth=6)\nextra_trees_classifier.fit(features_train, label_train)\nlabels_predicted = extra_trees_classifier.predict(features_test)\n```", "```py\narray([0.08844544, 0.0702334 , 0.01440408, 0.37662014,\n       0.05965896, 0.39063797])\n```"]