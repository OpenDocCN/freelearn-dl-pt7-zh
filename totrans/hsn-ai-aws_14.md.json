["```py\nTraining JSON {\nStart: The starting date of weekly sales\nTarget: Weekly sales\nCat: Category or Department used to group sales\nDynamic_feat: Dynamic features used to explain variation in sales. Beyond holidays, these features can include price, promotion and other covariates.\n}\n{\"start\":\"2010-01-01 00:00:00\",\"target\":[19145.49, 17743.27, 14700.85, 20092.86, 17884.43, 19269.09, 22988.12, 17679.72, 16876.61, 14539.77, 16026.23, 14249.85, 15474.07, 22464.57, 19075.56, 20999.38, 18139.89, 13496.23, 15361.65, 16164.48, 15039.44, 14077.75, 16733.58, 16552.23, 17393.2, 16608.36, 21183.71, 16089.01, 18076.54, 19378.51, 15001.62, 14691.15, 19127.39, 17968.37, 20380.96, 29874.28, 19240.27, 17462.27, 17327.15, 16313.51, 20978.94, 28561.95, 19232.34, 20396.46, 21052.61, 30278.47, 47913.44, 17054.1, 15355.95, 15704.19, 15193.36, 14040.86, 13720.49, 17758.99, 24013.25, 24157.54, 22574.19, 12911.72, 20266.06, 18102.13, 21749.04, 22252.73, 21672.82, 15231.31, 16781.35, 14919.64, 15948.11, 17263.32, 16859.26, 13326.75, 17929.47, 15888.17, 13827.35, 16180.46, 22720.76, 15347.18, 15089.43, 14016.56, 17147.61, 14301.9, 16951.62, 16623.8, 19349.35, 24535.59, 18402.46, 19320.64, 20048.28, 14622.65, 19402.27, 19657.79, 18587.11, 20878.24, 19686.7, 23664.29, 20825.85, 27059.08, 15693.12, 29177.6, 45362.67, 20011.27, 13499.62, 15187.32, 16988.52, 14707.59, 20127.86, 23249.25, 20804.15, 19921.62, 16096.04, 18055.34, 17727.24, 16478.45, 16117.33, 15082.89, 15050.07, 17302.59, 20399.83, 17484.31, 14056.35, 16979.18, 17279.4, 14494.48, 14661.37, 13979.33, 13476.7, 18898.57, 13740.2, 15684.97, 15266.29, 16321.69, 15728.07, 17429.51, 17514.05, 20629.24], \n\"cat\":[15], \"dynamic_feat\":[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]]}\n```", "```py\nTest JSON {\"start\":\"2010-01-01 00:00:00\",\"target\":[19145.49, 17743.27, 14700.85, 20092.86, 17884.43, 19269.09, 22988.12, 17679.72, 16876.61, 14539.77, 16026.23, 14249.85, 15474.07, 22464.57, 19075.56, 20999.38, 18139.89, 13496.23, 15361.65, 16164.48, 15039.44, 14077.75, 16733.58, 16552.23, 17393.2, 16608.36, 21183.71, 16089.01, 18076.54, 19378.51, 15001.62, 14691.15, 19127.39, 17968.37, 20380.96, 29874.28, 19240.27, 17462.27, 17327.15, 16313.51, 20978.94, 28561.95, 19232.34, 20396.46, 21052.61, 30278.47, 47913.44, 17054.1, 15355.95, 15704.19, 15193.36, 14040.86, 13720.49, 17758.99, 24013.25, 24157.54, 22574.19, 12911.72, 20266.06, 18102.13, 21749.04, 22252.73, 21672.82, 15231.31, 16781.35, 14919.64, 15948.11, 17263.32, 16859.26, 13326.75, 17929.47, 15888.17, 13827.35, 16180.46, 22720.76, 15347.18, 15089.43, 14016.56, 17147.61, 14301.9, 16951.62, 16623.8, 19349.35, 24535.59, 18402.46, 19320.64, 20048.28, 14622.65, 19402.27, 19657.79, 18587.11, 20878.24, 19686.7, 23664.29, 20825.85, 27059.08, 15693.12, 29177.6, 45362.67, 20011.27, 13499.62, 15187.32, 16988.52, 14707.59, 20127.86, 23249.25, 20804.15, 19921.62, 16096.04, 18055.34, 17727.24, 16478.45, 16117.33, 15082.89, 15050.07, 17302.59, 20399.83, 17484.31, 14056.35, 16979.18, 17279.4, 14494.48, 14661.37, 13979.33, 13476.7, 18898.57, 13740.2, 15684.97, 15266.29, 16321.69, 15728.07, 17429.51, 17514.05, 20629.24, 17730.73, 18966.48, 20781.46, 22979.73, 16402.34, 20037.44, 18535.65, 16809.01, 19275.43], \"cat\":[15], \"dynamic_feat\":[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]]\n```", "```py\n{\n   \"predictions\": [\n       {\n           \"quantiles\": { \n               \"0.9\": [...],\n               \"0.5\": [...]\n           },\n           \"samples\": [...],\n           \"mean\": [...]\n       }\n   ]\n}\n```", "```py\nimport numpy #library to compute linear algebraic equations\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```", "```py\nfeatures = pd.read_csv('Features data set.csv')\nsales = pd.read_csv('sales data-set.csv')\nstores = pd.read_csv('stores data-set.csv')\n```", "```py\nfeatures.shape #There are 8,190 store, date and holiday combinations\nsales.shape #There are 421,570 sales transactions\nstores.shape #There are 45 stores in question\n```", "```py\nmerged_df = features.merge(sales, on=['Store', 'Date', 'IsHoliday']).merge(stores, on=['Store'])\nmerged_df.head()\n```", "```py\nmerged_df = features.merge(sales, on=['Store', 'Date', 'IsHoliday']).merge(stores, on=['Store'])\nmerged_df.head()\n```", "```py\nmerged_df.to_csv('retailsales.csv')\n```", "```py\n#Create a figure and a set of subplots\nf, ax = plt.subplots(4, figsize=(15, 15)) #f=figure; ax=axes\nsns.distplot(merged_df.Temperature, ax=ax[0])\nsns.distplot(merged_df.Fuel_Price, ax=ax[1])\nsns.distplot(merged_df.Unemployment, ax=ax[2])\nsns.distplot(merged_df.CPI, ax=ax[3])\n```", "```py\nf, ax = plt.subplots(6, figsize=(20,20))\nsns.scatterplot(x=\"Fuel_Price\", y=\"Weekly_Sales\", data=merged_df, ax=ax[0])\nsns.scatterplot(x=\"Temperature\", y=\"Weekly_Sales\", data=merged_df, ax=ax[1])\n\n```", "```py\nsns.scatterplot(x=\"IsHoliday\", y=\"Weekly_Sales\", data=merged_df, ax=ax[2])\nsns.scatterplot(x=\"CPI\", y=\"Weekly_Sales\", data=merged_df, ax=ax[3])\n```", "```py\nsns.scatterplot(x=\"Unemployment\", y=\"Weekly_Sales\", data=merged_df, ax=ax[4])\nsns.scatterplot(x=\"Type\", y=\"Weekly_Sales\", data=merged_df, ax=ax[5])\n```", "```py\nDeepAR project structure.\nProject Organization\n------------\n    ├── notebooks/            <- All notebooks are residing here.\n    ├── data/                 <- Input data is residing here\n    ├── deepar/               <- Python package with source code of this project.\n      ├──retailsales.py       <- Creating training and testing datasets for DeepAR.\n      ├──salesinference.py    <- Preparing data for predictions, obtaining and plotting predictions from DeepAR\n    ├── README.md             <- The top-level README for developers using this project.\n    ├── setup.py              <- Defines pre-requisite packages to install and distribute package.\n```", "```py\nimport os\nfrom setuptools import setup, find_packages\n\ndef read(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\nsetup(\n    name=\"deepar\",\n    description=\"DeepAR project structure.\",\n    author=\"<your-name>\",\n    packages=find_packages(exclude=['data', 'figures', 'output', 'notebooks']),\\\n    long_description=read('README.md'),\n)\n```", "```py\nfrom . import retailsales\nfrom . import salesinference\n```", "```py\n#Navidate to deep-ar directory to install the deepar package containing commonly used functions\npath = \"..\"\nos.chdir(path)\n\n#install predefined functions\n!pip install .\n\n#Navigate to the parent directory to train the DeepAR model\n# org_path = \"..\"\n# os.chdir(org_path)\n```", "```py\nimport deepar as da\n\ntrain_key      = 'deepar_sales_training.json'\ntest_key       = 'deepar_sales_test.json'\n#Prediction and context length for training the DeepAR model\nprediction_length = 9\n\nsalesfn = 'data/store20_sales.csv'\nsalesdf = da.retailsales.prepareSalesData(salesfn)\ntestSet = da.retailsales.getTestSales(salesdf, test_key)\ntrainingSet = da.retailsales.getTrainSales(salesdf, train_key, prediction_length)\n```", "```py\nbucket         = 'ai-in-aws'\nprefix         = 'sagemaker/deepar-weekly-sales'\n\ntrain_prefix   = '{}/{}'.format(prefix, 'train')\ntest_prefix    = '{}/{}'.format(prefix, 'test')\noutput_prefix  = '{}/{}'.format(prefix, 'output')\n\nsagemaker_session = sagemaker.Session()\n\ntrain_path = sagemaker_session.upload_data(train_key, bucket=bucket, key_prefix=train_prefix)\ntest_path = sagemaker_session.upload_data(test_key, bucket=bucket, key_prefix=test_prefix)\n```", "```py\nrole = get_execution_role()\noutput_path = r's3://{0}/{1}'.format(bucket, output_prefix)\n\ncontainer = get_image_uri(boto3.Session().region_name, 'forecasting-deepar')\n\ndeepAR = sagemaker.estimator.Estimator(container,\n                                   role,\n                                   train_instance_count=1,\n                                   train_instance_type='ml.c4.xlarge',\n                                   output_path=output_path,\n                                   sagemaker_session=sagemaker_session)\n```", "```py\nhyperparameters = {\n    \"time_freq\": 'W',\n    \"context_length\": prediction_length, \n    \"prediction_length\": prediction_length,\n    \"num_cells\": \"40\", \n    \"num_layers\": \"2\", \n    \"likelihood\": \"gaussian\",\n    \"epochs\": \"300\", \n    \"mini_batch_size\": \"32\", \n    \"learning_rate\": \"0.00001\",\n    \"dropout_rate\": \"0.05\", \n    \"early_stopping_patience\": \"10\" \n}\ndeepAR.set_hyperparameters(**hyperparameters) \n```", "```py\ndata_channels = {\"train\": train_path, \"test\": test_path}\\\ndeepAR.fit(inputs=data_channels)\n```", "```py\n#test_score (algo-1, RMSE): 7307.12501604\n#test_score (algo-1, mean_wQuantileLoss): 0.198078\n#test_score (algo-1, wQuantileLoss[0.1]): 0.172473\n#test_score (algo-1, wQuantileLoss[0.2]): 0.236177\n#test_score (algo-1, wQuantileLoss[0.3]): 0.236742\n#test_score (algo-1, wQuantileLoss[0.4]): 0.190065\n#test_score (algo-1, wQuantileLoss[0.5]): 0.1485\n#test_score (algo-1, wQuantileLoss[0.6]): 0.178847\n#test_score (algo-1, wQuantileLoss[0.7]): 0.223082\n#test_score (algo-1, wQuantileLoss[0.8]): 0.226312\n#test_score (algo-1, wQuantileLoss[0.9]): 0.170508\n```", "```py\ndeepAR_predictor = deepAR.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')\n```", "```py\n#Predict last 9 weeks of a department and compare to ground truth\n\ndeepAR_predictor.content_type = 'application/json'\ndept = 90\n\nprediction_data = da.salesinference.buildInferenceData(dept, trainingSet, testSet)\n#print(prediction_data)\nresult = deepAR_predictor.predict(prediction_data)\n\ny_mean, y_q1, y_q2, y_sample = da.salesinference.getInferenceSeries(result)\nprint(\"Predicted Sales: \", y_mean)\nprint(\"Actual Sales: \", list(testSet[dept]['Weekly_Sales'][134:]))\n\nda.salesinference.plotResults(prediction_length, result, truth=True, truth_data=testSet[dept]['Weekly_Sales'][134:], truth_label='truth')\n```", "```py\nPredicted Sales:  [92707.65625, 101316.90625, 86202.3984375, 87715.5625, 95967.359375, 101363.71875, 106354.90625, 94017.921875, 103476.71875]\n\nActual Sales:  [100422.86, 94987.08, 90889.75, 115695.71, 100372.02, 96616.19, 93460.57, 99398.64, 105059.88]\n```", "```py\n\"cat\": [department number, store number] \n```"]