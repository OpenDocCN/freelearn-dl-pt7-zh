["```py\npip install openai azure.communication.chat azure.communication.identity\n```", "```py\nfrom azure.communication.chat import ChatClient, CommunicationTokenCredential, ChatMessageType,ChatParticipant\nfrom azure.communication.identity import CommunicationIdentityClient, CommunicationUserIdentifier\nfrom datetime import datetime\nfrom datetime import datetime, timedelta\nimport os\nimport requests\nimport json\nimport openai\n```", "```py\n# Azure\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_DEPLOYMENT_ENDPOINT = os.getenv(\"OPENAI_DEPLOYMENT_ENDPOINT\")\nOPENAI_DEPLOYMENT_NAME = os.getenv(\"OPENAI_DEPLOYMENT_NAME\")\nOPENAI_MODEL_NAME = os.getenv(\"OPENAI_MODEL_NAME\")\nOPENAI_API_VERSION = os.getenv(\"OPENAI_API_VERSION\")\nOPENAI_DEPLOYMENT_VERSION = os.getenv(\"OPENAI_DEPLOYMENT_VERSION\")\n## Azure Communication Service\nCOMMUNICATION_CONNECTION_STRING = os.getenv(\n     \"COMMUNICATION_CONNECTION_STRING\")\nCOMMUNICATION_ENDPOINT = os.getenv(\"COMMUNICATION_ENDPOINT\")\n#init Azure OpenAI\nopenai.api_type = \"azure\"\nopenai.api_version = OPENAI_DEPLOYMENT_VERSION\nopenai.api_base = OPENAI_DEPLOYMENT_ENDPOINT\nopenai.api_key = OPENAI_API_KEY\nload_dotenv()\n```", "```py\nCOMMUNICATION_CONNECTION_STRING = \"{communication-service-connection-string}\"\nCOMMUNICATION_ENDPOINT = \"{communication-serivce-endpoint}\"\n```", "```py\nOut[15]:    True\n```", "```py\nclient = CommunicationIdentityClient.from_connection_string(\n    COMMUNICATION_CONNECTION_STRING)\nidentity1 = client.create_user()\ntoken_result1 = client.get_token(identity1, [\"chat\"])\nidentity2 = client.create_user()\ntoken_result2 = client.get_token(identity2, [\"chat\"])\n```", "```py\nAgent  = ChatParticipant(identifier=identity1, display_name=\"Agent\", share_history_time=datetime.utcnow())\nCustomer  = ChatParticipant(identifier=identity2, display_name=\"Customer\", share_history_time=datetime.utcnow())\nparticipants = [Agent, Customer ]\nchat_client1 = ChatClient(COMMUNICATION_ENDPOINT, CommunicationTokenCredential(token_result1.token))\nchat_client2 = ChatClient(COMMUNICATION_ENDPOINT, CommunicationTokenCredential(token_result2.token))\ntopic=\"Support conversation\"\ncreate_chat_thread_result = chat_client1.create_chat_thread(topic, thread_participants=participants)\nchat_thread_client1 = chat_client1.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\nchat_thread_client2 = chat_client2.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```", "```py\nagentText = [\n    \"Thank you for reaching out to our customer support! How can I assist you with your food delivery today?\"\n    \"I'm sorry to hear that. Could you provide me with your name and order number so I can check your details and assist you better?\"\n    \"Thanks. Can you please share more details about the issue you're facing with your food delivery?\"\n    \"I understand. It can be frustrating. Can you check if the delivery address is correct and accessible? Also, ensure that your contact details are up to date.\"\n    \"Alright. Please verify the delivery address and ensure there are no obstacles for our delivery team. Let me know if the issue persists.\"\n    \"That might be causing the delay. Can you confirm the delivery address and try placing the order again?\"\n    \"Great to hear that! Is there anything else I can help you with regarding your food delivery?\"\n    \"You're welcome. Feel free to reach out if you have any more questions. Enjoy your meal!\"\n]\ncustomerText = [\n    \"Hi, I'm having an issue with my food delivery. It hasn't arrived yet.\"\n    \"Yes, my name is John, and my order number is.\"\n    \"Well, it seems like my food hasn't been delivered on time. What could be the issue?\"\n    \"I've checked the delivery address, and it's correct. Also, my phone is working fine.\"\n    \"Okay, let me check. Yes, it seems like there's a small issue with the delivery address. Let me correct that.\"\n    \"Sure, let me try that. Alright, I've updated the delivery address. Can you check the status now?\"\n    \"No, that's all. Thanks for your help. Looking forward to my meal!\"\n    \"Goodbye.\"\n]\n```", "```py\nfor x in range(len(agentText)):\nchat_thread_client1.send_message(content= agentText[x], sender_display_name=\"Agent\", chat_message_type=ChatMessageType.TEXT)\nchat_thread_client2.send_message(content= customerText[x], sender_display_name=\"Customer\", chat_message_type=ChatMessageType.TEXT)\n```", "```py\nstart_time = datetime.utcnow() - timedelta(days=1)\nmessages = []\nchat_messages = chat_thread_client1.list_messages(results_per_page=1, start_time=start_time)\nfor chat_message_page in chat_messages.by_page():\n     for chat_message in chat_message_page:\n          if(chat_message.type == ChatMessageType.TEXT):\n                 messages.append(chat_message)\n# didn't know I had to filter out other messages\nprompt = \"\"\nfor m in range(len(messages)-1, -1, -1):\n     prompt = prompt + messages[m].sender_display_name + \": \" + messages[m].content.message + \"\\n\"\nprint(prompt)\n```", "```py\n# Send a completion call to generate an answer\nstart_phrase = 'For the following conversation, extract a topic, summary, highlights (1-3 bullet points of key information) and the sentiment of both of the users.\\n\\n' + prompt\nresponse = openai.Completion.create(engine=OPENAI_DEPLOYMENT_NAME, \n    prompt=start_phrase, max_tokens=500)\ntext = response['choices'][0]['text'].replace('\\n', '').replace(' .', '.').strip()\nprint(start_phrase + '\\n' + text)\n```"]