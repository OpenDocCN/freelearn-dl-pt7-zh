["```py\nimport gym\nenv = gym.make('BreakoutDeterministic-v4')\n```", "```py\nenv.action_space\n```", "```py\nDiscrete(4)\n```", "```py\nenv.observation_space\n```", "```py\nBox(210, 160, 3)\n```", "```py\nstate = env.reset()\n```", "```py\naction = env.action_space.sample()\n```", "```py\nnew_state, reward, is_done, info = env.step(action)\n```", "```py\n    import gym\n    ```", "```py\n    class RandomAgent():\n        def __init__(self, env):\n            self.env = env\n        def get_action(self, state):\n            return self.env.action_space.sample()\n    ```", "```py\n    def initialize_env(env):\n        initial_state = env.reset()\n        initial_done_flag = False\n        initial_rewards = 0\n        return initial_state, initial_done_flag, initial_rewards\n    ```", "```py\n    def play_game(agent, state, done, rewards):\n        while not done:\n            action = agent.get_action(state)\n            next_state, reward, done, _ = env.step(action)\n            state = next_state\n            rewards += reward\n        return rewards\n    ```", "```py\n    def train_agent(env, episodes, agent):\n        from collections import deque\n        import numpy as np\n        scores = deque(maxlen=100)\n        for episode in range(episodes)\n            state, done, rewards = initialize_env(env)\n            rewards = play_game(agent, state, done, rewards)\n            scores.append(rewards)\n        print(f\"Average Score: {np.mean(scores)}\")\n    ```", "```py\n    env = gym.make('BreakoutDeterministic-v4')\n    ```", "```py\n    agent = RandomAgent(env)\n    ```", "```py\n    episodes = 10\n    ```", "```py\n    train_agent(env, episodes, agent)\n    ```", "```py\n    Average Score: 0.6\n    ```", "```py\nfrom tensorflow.keras.layers import Conv2D\nConv2D(128, kernel_size=(3, 3), activation=\"relu\")\n```", "```py\nfrom tensorflow.keras.layers import Dense\nDense(units=10, activation='softmax')\n```", "```py\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Conv2D, Dense\nmodel = tf.keras.Sequential()\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation=\"relu\"), \\\n          input_shape=(100, 100, 3))\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation=\"relu\"))\nmodel.add(Dense(units=100, activation=\"relu\"))\nmodel.add(Dense(units=10, activation=\"softmax\"))\n```", "```py\nmodel.compile(loss='sparse_categorical_crossentropy', \\\n              optimizer=\"adam\", metrics=['accuracy'])\n```", "```py\nmodel.fit(features_train, label_train, epochs=5)\n```", "```py\nimg = tf.image.rgb_to_grayscale(img)\n```", "```py\nimg = tf.image.resize(img, [50, 50])\n```", "```py\n    import tensorflow as tf\n    ```", "```py\n    from tensorflow.keras.models import Sequential\n    ```", "```py\n    model = Sequential()\n    ```", "```py\n    from tensorflow.keras.layers import Conv2D\n    ```", "```py\n    conv1 = Conv2D(32, 8, (4,4), activation='relu', \\\n                   padding='valid', input_shape=(84, 84, 1))\n    ```", "```py\n    conv2 = Conv2D(64, 4, (2,2), activation='relu', \\\n                   padding='valid')\n    ```", "```py\n    conv3 = Conv2D(64, 3, (1,1), activation='relu', padding='valid')\n    ```", "```py\n    model.add(conv1)\n    model.add(conv2)\n    model.add(conv3)\n    ```", "```py\n    from tensorflow.keras.layers import Flatten\n    ```", "```py\n    model.add(Flatten())\n    ```", "```py\n    from tensorflow.keras.layers import Dense\n    ```", "```py\n    fc1 = Dense(256, activation='relu')\n    ```", "```py\n    fc2 = Dense(4)\n    ```", "```py\n    model.add(fc1)\n    model.add(fc2)\n    ```", "```py\n    from tensorflow.keras.optimizers import RMSprop\n    ```", "```py\n    optimizer=RMSprop(lr=0.00025)\n    ```", "```py\n    model.compile(loss='mse', optimizer=optimizer, \\\n                  metrics=['accuracy'])\n    ```", "```py\n    model.summary()\n    ```", "```py\n    [Episode 0] - Average Score: 3.0\n    Average Score: 0.59\n    ```", "```py\nfrom tensorflow.keras.layers import LSTM\nLSTM(10, activation='tanh', recurrent_activation='sigmoid')\n```", "```py\nfrom tensorflow.keras.layers import GRU\nGRU(10, activation='tanh', recurrent_activation='sigmoid')\n```", "```py\nimport tensorflow as tf\nfrom tensorflow.keras.layers import LSTM, Dense\nmodel = tf.keras.Sequential()\nmodel.add(LSTM(128, activation='tanh', \\\n               recurrent_activation='sigmoid'))\nmodel.add(Dense(units=100, activation=\"relu\")))\nmodel.add(Dense(units=10, activation=\"softmax\"))\n```", "```py\nmodel.compile(loss='sparse_categorical_crossentropy', \\\n              optimizer=\"adam\", metrics=['accuracy'])\n```", "```py\nTimeDistributed(Dense(10))\n```", "```py\n    import tensorflow as tf\n    ```", "```py\n    from tensorflow.keras.models import Sequential\n    ```", "```py\n    model = Sequential()\n    ```", "```py\n    from tensorflow.keras.layers import Conv2D\n    ```", "```py\n    conv1 = Conv2D(32, 8, (4,4), activation='relu', \\\n                   padding='valid', input_shape=(84, 84, 1))\n    ```", "```py\n    conv2 = Conv2D(64, 4, (2,2), activation='relu', \\\n                   padding='valid')\n    ```", "```py\n    conv3 = Conv2D(64, 3, (1,1), activation='relu', \\\n                   padding='valid')\n    ```", "```py\n    from tensorflow.keras.layers import TimeDistributed\n    ```", "```py\n    time_conv1 = TimeDistributed(conv1, input_shape=(4, 84, 84, 1))\n    ```", "```py\n    time_conv2 = TimeDistributed(conv2)\n    ```", "```py\n    time_conv3 = TimeDistributed(conv3)\n    ```", "```py\n    model.add(time_conv1)\n    model.add(time_conv2)\n    model.add(time_conv3)\n    ```", "```py\n    from tensorflow.keras.layers import Flatten\n    ```", "```py\n    time_flatten = TimeDistributed(Flatten())\n    ```", "```py\n    model.add(time_flatten)\n    ```", "```py\n    from tensorflow.keras.layers import LSTM\n    ```", "```py\n    lstm = LSTM(512)\n    ```", "```py\n    model.add(lstm)\n    ```", "```py\n    from tensorflow.keras.layers import Dense\n    ```", "```py\n    fc1 = Dense(128, activation='relu')\n    ```", "```py\n    fc2 = Dense(4)\n    ```", "```py\n    model.add(fc1)\n    model.add(fc2)\n    ```", "```py\n    from tensorflow.keras.optimizers import RMSprop\n    ```", "```py\n    optimizer=RMSprop(lr=0.00025)\n    ```", "```py\n    model.compile(loss='mse', optimizer=optimizer, \\\n                  metrics=['accuracy'])\n    ```", "```py\n    model.summary()\n    ```", "```py\n[Episode 0] - Average Score: 0.0\n[Episode 50] - Average Score: 0.43137254901960786\n[Episode 100] - Average Score: 0.4\n[Episode 150] - Average: 0.54\nAverage Score: 0.53\n```", "```py\nfrom tensorflow.keras.layers import GRU, Attention\nout, states = GRU(512, return_sequences=True, \\\n                  return_state=True)(input)\natt = Attention()([out, states])\n```", "```py\n[Episode 0] - Average Score: 1.0\n[Episode 50] - Average Score: 2.4901960784313726\n[Episode 100] - Average Score: 3.92\n[Episode 150] - Average Score: 7.37\n[Episode 200] - Average Score: 7.76\n[Episode 250] - Average Score: 7.91\n[Episode 300] - Average Score: 10.33\n[Episode 350] - Average Score: 10.94\nAverage Score: 10.83\n```"]