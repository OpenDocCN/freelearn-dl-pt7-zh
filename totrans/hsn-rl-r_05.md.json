["```py\nlibrary(markovchain)\nset.seed(1)\nStates <- c(\"Rainy\",\"Cloudy\",\"Sunny\")\nTransMat <- matrix(c(0.30,0.50,0.20,0.25,0.4,0.35,0.1,0.2,0.70),\n                 nrow = 3, byrow = TRUE,dimnames = list(States,States))\n\nMarkovChainModel <- new(\"markovchain\",transitionMatrix=TransMat, states=States,\n                    byrow = TRUE, name=\"MarkovChainModel\")\nMarkovChainModel\n\nstates(MarkovChainModel)\ndim(MarkovChainModel)\nstr(MarkovChainModel)\nMarkovChainModel@transitionMatrix\n\nlibrary(diagram)\nplot(MarkovChainModel,package=\"diagram\")\n\ntransitionProbability(MarkovChainModel, \"Sunny\", \"Rainy\")\n\nStartState<-c(0,0,1)\nAfter3Days <- StartState * (MarkovChainModel ^ 3)\nprint (round(After3Days, 3))\nAfter1Week <- StartState * (MarkovChainModel ^ 7)\nprint (round(After1Week, 3))\n\nsteadyStates(MarkovChainModel)\n\nYearWeatherState <- rmarkovchain(n = 365, object = MarkovChainModel, t0 = \"Sunny\")\nYearWeatherState[1:40]\n```", "```py\nlibrary(markovchain)\n```", "```py\ninstall.packages(\"markovchain\")\n```", "```py\nset.seed(1)\n```", "```py\nStates <- c(\"Rainy\",\"Cloudy\",\"Sunny\")\n```", "```py\nTransMat <- matrix(c(0.30,0.50,0.20,0.25,0.4,0.35,0.1,0.2,0.70),nrow = 3, byrow = TRUE,dimnames = list(States,States))\n```", "```py\nMarkovChainModel <- new(\"markovchain\",transitionMatrix=TransMat, states=States, byrow = TRUE, name=\"MarkovChainModel\")\n```", "```py\nMarkovChainModel\n```", "```py\nMarkovChainModel\n A  3 - dimensional discrete Markov Chain defined by the following states:\n Rainy, Cloudy, Sunny\n The transition matrix  (by rows)  is defined as follows:\n Rainy Cloudy Sunny\nRainy   0.30    0.5  0.20\nCloudy  0.25    0.4  0.35\nSunny   0.10    0.2  0.70\n```", "```py\nstates(MarkovChainModel)\n```", "```py\n[1] \"Rainy\" \"Cloudy\" \"Sunny\"\n```", "```py\ndim(MarkovChainModel)\n```", "```py\n[1] 3\n```", "```py\nstr(MarkovChainModel)\n```", "```py\nFormal class 'markovchain' [package \"markovchain\"] with 4 slots\n ..@ states          : chr [1:3] \"Rainy\" \"Cloudy\" \"Sunny\"\n ..@ byrow           : logi TRUE\n ..@ transitionMatrix: num [1:3, 1:3] 0.3 0.25 0.1 0.5 0.4 0.2 0.2 0.35 0.7\n .. ..- attr(*, \"dimnames\")=List of 2\n .. .. ..$ : chr [1:3] \"Rainy\" \"Cloudy\" \"Sunny\"\n .. .. ..$ : chr [1:3] \"Rainy\" \"Cloudy\" \"Sunny\"\n ..@ name            : chr \"MarkovChainModel\"\n```", "```py\nMarkovChainModel@transitionMatrix\n```", "```py\n Rainy Cloudy Sunny\nRainy   0.30    0.5  0.20\nCloudy  0.25    0.4  0.35\nSunny   0.10    0.2  0.70\n```", "```py\nlibrary(diagram)\n```", "```py\nplot(MarkovChainModel,package=\"diagram\")\n```", "```py\ntransitionProbability(MarkovChainModel, \"Sunny\", \"Rainy\")\n```", "```py\n[1] 0.1\n```", "```py\nStartState<-c(0,0,1)\n```", "```py\nPred3Days <- StartState * (MarkovChainModel ^ 3)\nprint (round(Pred3Days, 3))\n```", "```py\n Rainy Cloudy Sunny\n[1,]  0.17  0.299  0.53\n```", "```py\nPred1Week <- StartState * (MarkovChainModel ^ 7)\nprint (round(Pred1Week, 3))\n```", "```py\n Rainy Cloudy Sunny\n[1,] 0.184  0.319 0.497\n```", "```py\nsteadyStates(MarkovChainModel)\n```", "```py\n Rainy    Cloudy     Sunny\n[1,] 0.1848739 0.3193277 0.4957983\n```", "```py\nYearWeatherState <- rmarkovchain(n = 365, object = MarkovChainModel, t0 = \"Sunny\")\n```", "```py\nYearWeatherState[1:40]\n```", "```py\n[1] \"Sunny\"  \"Sunny\"  \"Sunny\"  \"Rainy\"  \"Cloudy\" \"Rainy\"  \"Sunny\"  \"Sunny\"  \"Sunny\"  \"Sunny\"  \"Sunny\"\n[12] \"Sunny\"  \"Sunny\"  \"Sunny\"  \"Cloudy\" \"Sunny\"  \"Cloudy\" \"Rainy\"  \"Cloudy\" \"Rainy\"  \"Sunny\"  \"Sunny\"\n[23] \"Sunny\"  \"Sunny\"  \"Sunny\"  \"Sunny\"  \"Sunny\"  \"Sunny\"  \"Cloudy\" \"Cloudy\" \"Sunny\"  \"Sunny\"  \"Sunny\"\n[34] \"Sunny\"  \"Cloudy\" \"Sunny\"  \"Cloudy\" \"Cloudy\" \"Sunny\"  \"Sunny\"\n```", "```py\nlibrary(MDPtoolbox)\ndata = mdp_example_forest()\n\nprint(data$P[,,1])\nprint(data$P[,,2])\n\nprint(data$R[,1])\nprint(data$R[,2])\n\nmdp_check(data$P, data$R)\n\nsolver=mdp_policy_iteration(P=data$P, R=data$R, discount = 0.95)\n\nprint(solver$V)\nprint(solver$policy)\nprint(solver$iter)\nprint(solver$time)\n```", "```py\nlibrary(MDPtoolbox)\n```", "```py\ndata = mdp_example_forest()\n```", "```py\nstr(data)\n```", "```py\nList of 2\n $ P: num [1:3, 1:3, 1:2] 0.1 0.1 0.1 0.9 0 0 0 0.9 0.9 1 ...\n $ R: num [1:3, 1:2] 0 0 4 0 1 2\n ..- attr(*, \"dimnames\")=List of 2\n .. ..$ : NULL\n .. ..$ : chr [1:2] \"R1\" \"R2\"\n```", "```py\nprint(data$P[,,1])\nprint(data$P[,,2])\n```", "```py\n> print(data$P[,,1])\n [,1] [,2] [,3]\n[1,] 0.1 0.9 0.0\n[2,] 0.1 0.0 0.9\n[3,] 0.1 0.0 0.9\n\n> print(data$P[,,2])\n [,1] [,2] [,3]\n[1,] 1 0 0\n[2,] 1 0 0\n[3,] 1 0 0\n```", "```py\nprint(data$R[,1])\nprint(data$R[,2])\n```", "```py\n> print(data$R[,1])\n[1] 0 0 4\n\n> print(data$R[,2])\n[1] 0 1 2\n```", "```py\nmdp_check(data$P, data$R)\n```", "```py\n> mdp_check(data$P, data$R)\n[1] \"\"\n```", "```py\nsolver=mdp_policy_iteration(P=data$P, R=data$R, discount = 0.95)\n```", "```py\nprint(solver$V)\n```", "```py\n[1] 58.482 61.902 65.902\n```", "```py\nprint(solver$policy)\n```", "```py\n[1] 1 1 1\n```", "```py\nprint(solver$iter)\n```", "```py\n[1] 2\n```", "```py\nprint(solver$time)\n```", "```py\nTime difference of 0.4140239 secs\n```", "```py\nlibrary(MDPtoolbox)\ndata = mdp_example_forest(3,4,2,0.8)\n\nprint(data$P[,,1])\nprint(data$P[,,2])\n\nprint(data$R[,1])\nprint(data$R[,2])\n\nmdp_check(data$P, data$R)\n\nsolver=mdp_policy_iteration(P=data$P, R=data$R, discount = 0.95)\n\nprint(solver$V)\nprint(solver$policy)\nprint(solver$iter)\nprint(solver$time)\n```", "```py\ndata = mdp_example_forest(3,4,2,0.8)\n```", "```py\nmdp_example_forest(S, r1, r2, p)\n```", "```py\nprint(data$P[,,1])\nprint(data$P[,,2])\n```", "```py\n> print(data$P[,,1])\n [,1] [,2] [,3]\n[1,] 0.8 0.2 0.0\n[2,] 0.8 0.0 0.2\n[3,] 0.8 0.0 0.2\n\n> print(data$P[,,2])\n [,1] [,2] [,3]\n[1,] 1 0 0\n[2,] 1 0 0\n[3,] 1 0 0\n```", "```py\nprint(data$R[,1])\nprint(data$R[,2])\n```", "```py\n> print(data$R[,1])\n[1] 0 0 3\n\n> print(data$R[,2])\n[1] 0 1 2\n```", "```py\nmdp_check(data$P, data$R)\n```", "```py\n> mdp_check(data$P, data$R)\n[1] \"\"\n```", "```py\nsolver=mdp_policy_iteration(P=data$P, R=data$R, discount = 0.95)\n```", "```py\nprint(solver$V)\n```", "```py\n[1] 3.193277 4.033613 6.699865\n```", "```py\nprint(solver$policy)\n```", "```py\n[1] 1 2 1\n```", "```py\nprint(solver$iter)\n```", "```py\n[1] 1\n```", "```py\nprint(solver$time)\n```", "```py\nTime difference of 0.009001017 secs\n```"]