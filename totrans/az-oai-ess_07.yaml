- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code Generation and Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about using Azure Communication Services.
    We practically applied this creating a synthetic chat between a helper and a customer
    using ChatGPT (`gpt-3.5-turbo`). We then looked at the chat to understand what
    was said.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we mainly focused on written messages, it’s good to know that Azure
    Communication Services can do more than just text. It can handle voice, video,
    or even a mix of different media as inputs. This flexible approach helps us learn
    important information from customer content. The stats we obtain from this analysis
    can guide us in making our products better in the future. By trying different
    types of conversations, we can find where customers are having trouble and use
    that information to make our products and services better.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you’re a teacher, and you’ve got a student named Taylor who’s just starting
    to learn how to code. Taylor is excited but a bit confused about where to begin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter your secret weapon: a smart bot powered by Azure OpenAI. This bot
    is like a helpful friend who can create code and explain things in simple terms.
    Taylor can ask it questions such as, “How do I make the computer say ‘Hello, World!’?”
    And boom! The bot generates the code and explains it step by step.'
  prefs: []
  type: TYPE_NORMAL
- en: Taylor’s face lights up because they’re making the computer do cool stuff. But
    here’s the best part – the bot isn’t just a one-trick pony. Taylor can ask it
    more questions, such as “How do I make the computer do something over and over?”
    And the bot responds with a loop (a fancy term for repeating things) and explains
    how it works.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’re going to explore how you, as a teacher, and Taylor, the
    eager learner, can use this magic bot to make coding easy and fun. We’ll learn
    together, play with different questions, and see how Azure OpenAI turns coding
    into a cool adventure. Get ready for a coding party where you and the bot are
    the VIP guests, making learning to code a blast! Let’s dive in and have some fun!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the practical exercises in this chapter, access the source
    code available in this chapter's GitHub repository at [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: 'The technical requirements are the same as for [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
    As a reminder, install the following tools on your local machine to start working
    on the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.9, 3.10, or 3.11 – [https://www.python.org/downloads/](https://www.python.org/downloads/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Developer CLI – Azure developer CLI Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 14+ – [https://nodejs.org/en/download](https://nodejs.org/en/download)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git – [https://git-scm.com/downloads](https://git-scm.com/downloads)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell 7+ (`pwsh`) – [https://github.com/powershell/powershell](https://github.com/powershell/powershell)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You’ll also need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure account** – If you’re new to Azure, get an Azure account for free,
    and you’ll get some free Azure credits to get started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure subscription with access enabled for the Azure OpenAI service. You can
    request access with this form: [https://customervoice.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR7en2Ais5pxKtso_Pz4b1_xUNTZBNzRKNlVQSFhZMU9aV09EVzYxWFdORCQlQCN0PWcu](https://customervoice.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR7en2Ais5pxKtso_Pz4b1_xUNTZBNzRKNlVQSFhZMU9aV09EVzYxWFdORCQlQCN0PWcu).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure OpenAI connection and model information:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI API key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI embedding model deployment name
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI API version
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the system requirements mentioned here, it is crucial to have
    a solid foundation in fundamental Azure services and a basic proficiency in the
    Python programming language, equivalent to a beginner level (Python 100). These
    skills are vital for efficiently harnessing and leveraging Azure services in this
    chapter’s context. Rest assured, even if you are new to the Azure environment,
    we have designed this chapter to be beginner-friendly. It offers clear explanations
    and includes detailed screenshots to facilitate your learning and get you started
    on the right track.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, the flow is straightforward – the user submits a prompt to
    the OpenAI model that we prepare, which then generates the required code snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1: Architecture diagram](img/B21019_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: Architecture diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Building the code generator and documenter solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have set up all the essential services in our Azure portal in our previous
    chapters, we can begin constructing our solution for code generation and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Solution using Azure OpenAI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build this solution, we mainly need to use two services:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Cognitive Search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure OpenAI Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We explained the process to create these services in [*Chapter 2*](B21019_02.xhtml#_idTextAnchor023),
    in the *Accessing Azure OpenAI (AOAI) Service* section, and [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059),
    in the *Developing a question answering solution using Azure OpenAI and Azure
    Cognitive Search index* section. Please refer to these chapters for more information.
  prefs: []
  type: TYPE_NORMAL
- en: We can begin constructing our solution. To develop the code, we will be working
    within a Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sections, we are going to develop our solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating code from a user prompt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to import the required packages before we develop the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see a variety of libraries being used in the preceding code. Let’s
    delve into each of these libraries in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Imported Packages** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `openai` | The OpenAI Python library, which provides access to OpenAI’s **Generative
    Pre-trained Transformer** (**GPT**) models. |'
  prefs: []
  type: TYPE_TB
- en: '| `os` | Provides a way to interact with the operating system, including reading
    or setting environment variables. |'
  prefs: []
  type: TYPE_TB
- en: '| `dotenv.load_dotenv` | Loads environment variables from a `.env` file into
    the script’s environment. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 7.1: Explanation of usage of imported packages'
  prefs: []
  type: TYPE_NORMAL
- en: With all the necessary packages imported and the variables configured in the
    `.env` file, as outlined in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059), we
    can now proceed to extract these variables from the `.``env` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code loads the `.env` file and then accesses the variables and
    connections defined in the `.``env` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: Output to identify the loading of .env file](img/B21019_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Output to identify the loading of .env file'
  prefs: []
  type: TYPE_NORMAL
- en: Creating code from a user prompt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have now loaded all the required data into our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code instructs an AI language model to come up with a function
    that can be used to add first and last names to a database, based on a provided
    prompt. The generated function code is then printed out for examination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3: Generated output for the user prompt](img/B21019_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: Generated output for the user prompt'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create code from a user prompt on the previously generated database.
    This code instructs an AI language model to come up with a function that can be
    used to add first and last names to a database, based on a provided prompt. The
    generated function code is then printed out for examination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4: Output of the generated query](img/B21019_07_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: Output of the generated query'
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have explored how ChatGPT can simplify coding tasks by generating
    code and documentation for users through SQL and GPT.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippets for this chapter are available on GitHub and can be accessed
    here: [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed the necessary tools on our local machine, including
    Python, the Azure Developer CLI, Node.js, Git, and PowerShell. We also ensured
    we had an Azure account and subscription with access to the Azure OpenAI service.
    Additionally, we made sure to have a basic understanding of Azure services and
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we focused on building the solution using Azure Cognitive Search and Azure
    OpenAI Service. We worked within a Jupyter notebook to develop the code. We started
    by importing the required packages, such as `openai`, `os`, and `dotenv.load_dotenv`.
    Then, we loaded the `.env` file and extracted the necessary variables, such as
    `OPENAI_API_KEY`, `OPENAI_DEPLOYMENT_ENDPOINT`, and others. We initialized Azure
    OpenAI with these variables.
  prefs: []
  type: TYPE_NORMAL
- en: After setting up the environment, we generated a function to add names to a
    database based on a provided prompt. Following that, we created a SQL query to
    retrieve all records from the database we had just created. Finally, we achieved
    a functional solution that could generate code from user prompts and interact
    with the database effectively.
  prefs: []
  type: TYPE_NORMAL
