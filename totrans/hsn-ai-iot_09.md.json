["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline\n```", "```py\n# Read the data\nys = pd.read_csv('data/ys.csv')\nts = pd.read_csv('data/ts.csv')\n```", "```py\n# MODEL FIT AND PREDICTION\n\n# Parameters of the predictive model. ph is Prediction horizon, mu is Forgetting factor.\nph = 10 \nmu = 0.98\n```", "```py\nn_s = len(ys)\n\n# Arrays to hold predicted values\ntp_pred = np.zeros(n_s-1) \nyp_pred = np.zeros(n_s-1)\n```", "```py\n# At every iteration of the for loop a new sample from CGM is acquired.\nfor i in range(2, n_s+1):\n    ts_tmp = ts[0:i]\n    ys_tmp = ys[0:i]\n    ns = len(ys_tmp)\n\n    # The mu**k assigns the weight to the previous samples.\n    weights = np.ones(ns)*mu\n    for k in range(ns):\n        weights[k] = weights[k]**k\n    weights = np.flip(weights, 0)\n    # MODEL\n    # Linear Regression.\n    lm_tmp = LinearRegression() \n    model_tmp = lm_tmp.fit(ts_tmp, ys_tmp, sample_weight=weights)\n\n    # Coefficients of the linear model, y = mx + q \n    m_tmp = model_tmp.coef_\n    q_tmp = model*tmp.intercept\n\n*    # PREDICTION\n    tp = ts.iloc[ns-1,0] + ph\n    yp = m_tmp*tp + q_tmp\n\n    tp_pred[i-2] = tp \n    yp_pred[i-2] = yp\n```", "```py\n# PLOT\n# Hypoglycemia threshold vector. \nt_tot = [l for l in range(int(ts.min()), int(tp_pred.max())+1)]\nhypoglycemiaTH = 70*np.ones(len(t_tot)) \n#hyperglycemiaTH = 180*np.ones(len(t_tot))\n\nfig, ax = plt.subplots(figsize=(10,10))\nfig.suptitle('Glucose Level Prediction', fontsize=22, fontweight='bold')\nax.set_title('mu = %g, ph=%g ' %(mu, ph))\nax.plot(tp_pred, yp_pred, label='Predicted Value') \nax.plot(ts.iloc[:,0], ys.iloc[:,0], label='CGM data') \nax.plot(t_tot, hypoglycemiaTH, label='Hypoglycemia threshold')\n#ax.plot(t_tot, hyperglycemiaTH, label='Hyperglycemia threshold')\nax.set_xlabel('time (min)')\nax.set_ylabel('glucose (mg/dl)')\nax.legend()\n```", "```py\nfrom sklearn.metrics import mean_squared_error as mse\nprint(\"RMSE is\", mse(ys[1:],yp_pred))\n```", "```py\n# importing required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\n```", "```py\n# reading csv file and extracting class column to y.\ndataset = pd.read_csv(\"data.csv\")\ndataset.fillna(dataset.mean(), inplace=True)\n\ndataset_to_array = np.array(dataset)\nlabel = dataset_to_array[:,57] # \"Target\" classes having 0 and 1\nlabel = label.astype('int')\nlabel[label>0] = 1 # When it is 0 heart is healthy, 1 otherwise\n\n# extracting 13 features\ndataset = np.column_stack((\n    dataset_to_array[:,4] , # pain location\n    dataset_to_array[:,6] , # relieved after rest\n    dataset_to_array[:,9] , # pain type \n    dataset_to_array[:,11], # resting blood pressure\n    dataset_to_array[:,33], # maximum heart rate achieve\n    dataset_to_array[:,34], # resting heart rate \n    dataset_to_array[:,35], # peak exercise blood pressure (first of 2 parts) \n    dataset_to_array[:,36], # peak exercise blood pressure (second of 2 parts) \n    dataset_to_array[:,38], # resting blood pressure \n    dataset_to_array[:,39], # exercise induced angina (1 = yes; 0 = no) \n    dataset.age, # age \n    dataset.sex , # sex\n    dataset.hypertension # hyper tension\n ))\n\nprint (\"The Dataset dimensions are : \" , dataset.shape , \"\\n\")\n\n# dividing data into train and test data\nX_train, X_test, y_train, y_test = train_test_split(dataset, label, random_state = 223)\n```", "```py\nmodel = SVC(kernel = 'linear').fit(X_train, y_train)\n```", "```py\nmodel_predictions = model.predict(X_test)\n# model accuracy for X_test \naccuracy = metrics.accuracy_score(y_test, model_predictions)\nprint (\"Accuracy of the model is :\" , \n    accuracy , \"\\nApproximately : \", \n    round(accuracy*100) , \"%\\n\")\n```", "```py\n#creating a confusion matrix\ncm = confusion_matrix(y_test, model_predictions)\n\nimport pandas as pd\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndf_cm = pd.DataFrame(cm, index = [i for i in \"01\"],\ncolumns = [i for i in \"01\"])\nplt.figure(figsize = (10,7))\nsn.heatmap(df_cm, annot=True)\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import RandomForestClassifier as rfc\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n%matplotlib inline\n```", "```py\ndata = pd.read_csv('data/samsung_data.txt',sep='|')\ntrain = data.sample(frac=0.7,\n        random_state=42)\ntest = data[~data.index.isin(train.index)]\n\nX = train[train.columns[:-2]]\nY = train.activity\n```", "```py\nrandomState = 42\nntree = 25\n\nmodel0 = rfc(n_estimators=ntree,\nrandom_state=randomState,\nn_jobs=4,\nwarm_start=True,\noob_score=True)\nmodel0 = model0.fit(X, Y)\n\n# Arrange the features in ascending order\nmodel_vars0 = pd.DataFrame(\n    {'variable':X.columns,\n    'importance':model0.feature_importances_})\n\nmodel_vars0.sort_values(by='importance',\n    ascending=False,\n    inplace=True)\n\n# Build a feature vector with most important 25 features\n\nn = 25\ncols_model = [col for col in model_vars0.variable[:n].values]\n```", "```py\nn_used = 4\ncols_model = [col for col in model_vars0.variable[:n_used].values]\\\n     + [model_vars0.variable[6]]\nX = train[cols_model]\nY = train.activity\n\nntree_determination = {}\nfor ntree in range(5,150,5):\n    model = rfc(n_estimators=ntree,\n        random_state=randomState,\n        n_jobs=4,\n        warm_start=False,\n        oob_score=True)\nmodel = model.fit(X, Y)\nntree_determination[ntree]=model.oob_score_\n```", "```py\nmodel2 = rfc(n_estimators=50,\n    random_state=randomState,\n    n_jobs=4,\n    warm_start=False,\n    oob_score=True)\nmodel2 = model2.fit(X, Y)\n```", "```py\ntest_actual = test.activity\ntest_pred = model2.predict(test[X.columns])\ncm = confusion_matrix(test_actual,test_pred)\nsns.heatmap(data=cm,\n     fmt='.0f',\n     annot=True,\n     xticklabels=np.unique(test_actual),\n     yticklabels=np.unique(test_actual))\n```"]