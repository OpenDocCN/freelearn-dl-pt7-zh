["```py\n$ mkdir ContactOrganizer\n$ cd ContactOrganizer\n```", "```py\n$ mkdir Website\n$ touch Website/index.html\n$ touch Website/scripts.js\n```", "```py\n$ pipenv --three\n$ pipenv install boto3\n$ pipenv install chalice\n```", "```py\n$ pipenv shell\n```", "```py\n$ chalice new-project Capabilities\n```", "```py\ncd Capabilities\nmkdir chalicelib\ntouch chalicelib/__init__.py\ncd ..\n```", "```py\nProject Structure\n------------\n├── ContactOrganizer/\n    ├── Capabilities/\n        ├── .chalice/\n            ├── config.json\n        ├── chalicelib/\n            ├── __init__.py\n        ├── app.py\n        ├── requirements.txt\n    ├── Website/\n        ├── index.html\n        ├── script.js\n    ├── Pipfile\n    ├── Pipfile.lock\n```", "```py\nimport boto3\n\nclass RecognitionService:\n    def __init__(self, storage_location):\n        self.client = boto3.client('rekognition')\n        self.bucket_name = storage_location\n\n    def detect_text(self, file_name):\n        response = self.client.detect_text(\n            Image = {\n                'S3Object': {\n                    'Bucket': self.bucket_name,\n                    'Name': file_name\n                }\n            }\n        )\n\n        lines = []\n        for detection in response['TextDetections']:\n            if detection['Type'] == 'LINE':\n                lines.append({\n                    'text': detection['DetectedText'],\n                    'confidence': detection['Confidence'],\n                    'boundingBox': detection['Geometry']['BoundingBox']\n                })\n\n        return lines\n```", "```py\nAI Enterprise Inc.\nJohn Smith\nSenior Software Engineer\n123 Main Street Washington D.C. 20001\njohn.smith@aienterprise.com\n(202) 123-4567\n```", "```py\n$ aws comprehend detect-entities --language-code en --text \"AI Enterprise Inc. John Smith Senior Software Engineer 123 Main Street Washington D.C. 20001 john.smith@aienterprise.com (202) 123-4567\"\n{\n    \"Entities\": [\n        {\n            \"Score\": 0.8652380108833313,\n            \"Type\": \"ORGANIZATION\",\n            \"Text\": \"AI Enterprise Inc\",\n            ...\n        },\n        {\n            \"Score\": 0.9714182019233704,\n            \"Type\": \"PERSON\",\n            \"Text\": \"John Smith\",\n            ...\n        },\n        {\n            \"Score\": 0.9006084203720093,\n            \"Type\": \"LOCATION\",\n            \"Text\": \"123 Main Street Washington D.C.\",\n            ...\n        },\n        {\n            \"Score\": 0.48333245515823364,\n            \"Type\": \"DATE\",\n            \"Text\": \"20001\",\n            ...\n        },\n        {\n            \"Score\": 0.998563826084137,\n            \"Type\": \"OTHER\",\n            \"Text\": \"john.smith@aienterprise.com\",\n            ...\n        },\n        {\n            \"Score\": 0.9999305009841919,\n            \"Type\": \"OTHER\",\n            \"Text\": \"(202) 123-4567\",\n            ...\n        }\n    ]\n}\n```", "```py\naws comprehendmedical detect-phi --text \"AI Enterprise Inc. John Smith Software Engineer 123 Main Street Washington D.C. 20001 john.smith@aienterprise.com (202) 123-4567\"\n{\n    \"Entities\": [\n        {\n            \"Text\": \"AI Enterprise Inc\",\n            \"Category\": \"PROTECTED_HEALTH_INFORMATION\",\n            \"Type\": \"ADDRESS\",\n            ...\n        },\n        {\n            \"Text\": \"John Smith\",\n            \"Category\": \"PROTECTED_HEALTH_INFORMATION\",\n            \"Type\": \"NAME\",\n            ...\n        },\n        {\n            \"Text\": \"Software Engineer\",\n            \"Category\": \"PROTECTED_HEALTH_INFORMATION\",\n            \"Type\": \"PROFESSION\",\n            ...\n        },\n        {\n            \"Text\": \"123 Main Street Washington D.C. 20001\",\n            \"Category\": \"PROTECTED_HEALTH_INFORMATION\",\n            \"Type\": \"ADDRESS\",\n            ...\n        },\n        {\n            \"Text\": \"john.smith@aienterprise.com\",\n            \"Category\": \"PROTECTED_HEALTH_INFORMATION\",\n            \"Type\": \"EMAIL\",\n            ...\n        },\n        {\n            \"Text\": \"(202) 123-4567\",\n            \"Category\": \"PROTECTED_HEALTH_INFORMATION\",\n            \"Type\": \"PHONE_OR_FAX\",\n            ...\n        }\n    ]\n}\n```", "```py\nimport boto3\nfrom collections import defaultdict\nimport usaddress\n\nclass ExtractionService:\n    def __init__(self):\n        self.comprehend = boto3.client('comprehend')\n        self.comprehend_med = boto3.client('comprehendmedical')\n\n    def extract_contact_info(self, contact_string):\n        ...\n```", "```py\n    def extract_contact_info(self, contact_string):\n        contact_info = defaultdict(list)\n\n        # extract info with comprehend\n        response = self.comprehend.detect_entities(\n            Text = contact_string,\n            LanguageCode = 'en'\n        )\n\n        for entity in response['Entities']:\n            if entity['Type'] == 'PERSON':\n                contact_info['name'].append(entity['Text'])\n            elif entity['Type'] == 'ORGANIZATION':\n                contact_info['organization'].append(entity['Text'])\n\n        # extract info with comprehend medical\n        response = self.comprehend_med.detect_phi(\n            Text = contact_string\n        )\n\n        for entity in response['Entities']:\n            if entity['Type'] == 'EMAIL':\n                contact_info['email'].append(entity['Text'])\n            elif entity['Type'] == 'PHONE_OR_FAX':\n                contact_info['phone'].append(entity['Text'])\n            elif entity['Type'] == 'PROFESSION':\n                contact_info['title'].append(entity['Text'])\n            elif entity['Type'] == 'ADDRESS':\n                contact_info['address'].append(entity['Text'])\n\n        # additional processing for address\n        address_string = ' '.join(contact_info['address'])\n        address_parts = usaddress.parse(address_string)\n\n        for part in address_parts:\n            if part[1] == 'PlaceName':\n                contact_info['city'].append(part[0])\n            elif part[1] == 'StateName':\n                contact_info['state'].append(part[0])\n            elif part[1] == 'ZipCode':\n                contact_info['zip'].append(part[0])\n\n        return dict(contact_info)\n```", "```py\nimport boto3\n\nclass ContactStore:\n    def __init__(self, store_location):\n        self.table = boto3.resource('dynamodb').Table(store_location)\n\n    def save_contact(self, contact_info):\n        response = self.table.put_item(\n            Item = contact_info\n        )\n        # should return values from dynamodb however,\n        # dynamodb does not support ReturnValues = ALL_NEW\n        return contact_info\n\n    def get_all_contacts(self):\n        response = self.table.scan()\n\n        contact_info_list = []\n        for item in response['Items']:\n            contact_info_list.append(item)\n\n        return contact_info_list\n```", "```py\nimport boto3\n\nclass StorageService:\n    def __init__(self, storage_location):\n        self.client = boto3.client('s3')\n        self.bucket_name = storage_location\n    def upload_file(self, file_bytes, file_name):\n        self.client.put_object(Bucket = self.bucket_name,\n                               Body = file_bytes,\n                               Key = file_name,\n                               ACL = 'public-read')\n\n        return {'fileId': file_name,\n                'fileUrl': \"http://\" + self.bucket_name + \".s3.amazonaws.com/\" + file_name}\n```", "```py\nfrom chalice import Chalice\nfrom chalicelib import storage_service\nfrom chalicelib import recognition_service\nfrom chalicelib import extraction_service\nfrom chalicelib import contact_store\n\nimport base64\nimport json\n\n#####\n# chalice app configuration\n#####\napp = Chalice(app_name='Capabilities')\napp.debug = True\n\n#####\n# services initialization\n#####\nstorage_location = 'contents.aws.ai'\nstorage_service = storage_service.StorageService(storage_location)\nrecognition_service = recognition_service.RecognitionService(storage_location)\nextraction_service = extraction_service.ExtractionService()\nstore_location = 'Contacts'\ncontact_store = contact_store.ContactStore(store_location)\n\n#####\n# RESTful endpoints\n#####\n...\n```", "```py\n@app.route('/images/{image_id}/extract-info', methods = ['POST'], cors = True)\ndef extract_image_info(image_id):\n    \"\"\"detects text in the specified image then extracts contact information from the text\"\"\"\n    MIN_CONFIDENCE = 70.0\n\n    text_lines = recognition_service.detect_text(image_id)\n\n    contact_lines = []\n    for line in text_lines:\n        # check confidence\n        if float(line['confidence']) >= MIN_CONFIDENCE:\n            contact_lines.append(line['text'])\n\n    contact_string = '   '.join(contact_lines)\n    contact_info = extraction_service.extract_contact_info(contact_string)\n\n    return contact_info\n```", "```py\nPOST <server url>/images/{image_id}/extracted-info\n```", "```py\ncurl -X POST http://127.0.0.1:8000/images/<uploaded image>/extract-info\n{\n    \"organization\":[\n        \"<organization>\"\n    ],\n    \"name\":[\n        \"<name>\"\n    ],\n    \"title\":[\n        \"<title>\"\n    ],\n    \"address\":[\n        \"<address>\"\n    ],\n    \"phone\":[\n        \"<phone>\"\n    ],\n    \"email\":[\n        \"<email>\"\n    ]\n}\n```", "```py\n@app.route('/contacts', methods = ['POST'], cors = True)\ndef save_contact():\n    \"\"\"saves contact information to the contact store service\"\"\"\n    request_data = json.loads(app.current_request.raw_body)\n\n    contact = contact_store.save_contact(request_data)\n\n    return contact\n\n@app.route('/contacts', methods = ['GET'], cors = True)\ndef get_all_contacts():\n    \"\"\"gets all saved contacts in the contact store service\"\"\"\n    contacts = contact_store.get_all_contacts()\n\n    return contacts\n```", "```py\nPOST <server url>/contacts\n{\n    \"name\": <NAME>,\n    \"organization\": <ORGANIZATION>,\n    \"title\": <TITLE>,\n    \"address\": <ADDRESS>,\n    \"city\": <CITY>,\n    \"state\": <STATE>,\n    \"zip\": <ZIP>,\n    \"phone\": <PHONE>,\n    \"email\": <EMAIL>\n}\n```", "```py\nGET <server url>/contacts\n```", "```py\n$ curl --header \"Content-Type: application/json\" --request POST --data '{\"name\": \"John Smith\", \"organization\": \"AI Enterprise Inc.\", \"title\": \"Senior Software Engineer\", \"address\": \"123 Main Street\", \"city\": \"Washington D.C.\", \"zip\": \"20001\", \"phone\": \"(202) 123-4567\", \"email\": \"john.smith@aienterprise.com\"}’ http://127.0.0.1:8000/contacts\n{\n \"name\":\"John Smith\",\n \"Organization\":\n ...\n\n$ curl http://127.0.0.1:8000/contacts\n[\n {\n \"city\":\"Washington D.C.\",\n \"zip\":\"20001\",\n \"organization\":\"AI Enterprise Inc.\",\n \"address\":\"123 Main Street\",\n \"email\":\"john.smith@aienterprise.com\",\n \"phone\":\"(202) 123-4567\",\n \"name\":\"John Smith\",\n \"title\":\"Senior Software Engineer\"\n }\n]\n```", "```py\n@app.route('/images', methods = ['POST'], cors = True)\ndef upload_image():\n    \"\"\"processes file upload and saves file to storage service\"\"\"\n    request_data = json.loads(app.current_request.raw_body)\n    file_name = request_data['filename']\n    file_bytes = base64.b64decode(request_data['filebytes'])\n\n    image_info = storage_service.upload_file(file_bytes, file_name)\n\n    return image_info\n```", "```py\n<!doctype html>\n<html lang=\"en\"/>\n\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n\n    <title>Contact Organizer</title>\n\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/lib/w3-theme-blue-grey.css\">\n</head>\n\n<body class=\"w3-theme-14\" onload=\"retrieveAndDisplayContacts()\">\n    <div style=\"min-width:400px\">\n        <div class=\"w3-bar w3-large w3-theme-d4\">\n            <span class=\"w3-bar-item\">Contact Organizer</span>\n        </div>\n\n        ...\n\n        <div class=\"w3-container w3-content\">\n            <p>\n                <b class=\"w3-opacity\">My Contacts</b>\n                <input class=\"w3-button w3-blue-grey\" type=\"submit\"\n                       value=\"Refresh\" onclick=\"retrieveAndDisplayContacts()\"/>\n            </p>\n            <div class=\"w3-panel w3-white w3-card w3-display-container w3-center\">\n                <div id=\"contacts\"/>\n            </div>\n        </div>\n\n    </div>\n\n    <script src=\"img/scripts.js\"></script>\n</body>\n\n</html>\n```", "```py\n...\n<div class=\"w3-container w3-content\">\n    <p class=\"w3-opacity\"><b>Add Contact</b></p>\n    <div class=\"w3-panel w3-white w3-card w3-display-container w3-center\">\n        <div>\n            <input id=\"file\" type=\"file\" name=\"file\" accept=\"image/*\"/>\n            <input class=\"w3-button w3-blue-grey\" type=\"submit\"\n                   value=\"Extract Info\" onclick=\"uploadAndExtract()\"/>\n            <hr>\n        </div>\n        <div id=\"view\" style=\"display: none;\">\n            <img id=\"image\" width=\"400\"/>\n            <hr>\n        </div>\n        <div class=\"w3-display-container w3-left\" style=\"width:45%\">\n            <fieldset>\n                <legend>Information</legend>\n                <p>\n                    <label for=\"name\">Name</label>\n                    <input id=\"name\" type=\"text\" name=\"name\"/>\n                </p>\n                <p>\n                    <label for=\"title\">Title</label>\n                    <input id=\"title\" type=\"text\" name=\"title\"/>\n                </p>\n                <p>\n                    <label for=\"email\">Email</label>\n                    <input id=\"email\" type=\"email\" name=\"email\"/>\n                </p>\n                <p>\n                    <label for=\"phone\">Phone</label>\n                    <input id=\"phone\" type=\"tel\" name=\"phone\"/>\n                </p>\n            </fieldset>\n        </div>\n        <div class=\"w3-display-container w3-right\" style=\"width:50%\">\n            <fieldset>\n                <legend>Address</legend>\n                <p>\n                    <label for=\"organization\">Organization</label>\n                    <input id=\"organization\" type=\"text\" \n                     name=\"organization\"/>\n                </p>\n                <p>\n                    <label for=\"address\">Address</label>\n                    <input id=\"address\" type=\"text\" name=\"address\" \n                     size=\"30\"/>\n                </p>\n                <p>\n                    <label for=\"city\">City</label>\n                    <input id=\"city\" type=\"text\" name=\"city\"/>\n                </p>\n                <p>\n                    <label for=\"state\">State</label>\n                    <input id=\"state\" type=\"text\" name=\"state\" size=\"3\"/>\n                    <label for=\"zip\">Zip</label>\n                    <input id=\"zip\" type=\"text\" name=\"zip\" size=\"6\"/>\n                </p>\n            </fieldset>\n            <br>\n            <input class=\"w3-button w3-blue-grey\" type=\"submit\" id=\"save\"\n                   value=\"Save Contact\" onclick=\"saveContact()\" disabled/>\n        </div>\n    </div>\n</div>\n... \n```", "```py\n\"use strict\";\n\nconst serverUrl = \"http://127.0.0.1:8000\";\n\nclass HttpError extends Error {\n    constructor(response) {\n        super(`${response.status} for ${response.url}`);\n        this.name = \"HttpError\";\n        this.response = response;\n    }\n}\n\nasync function uploadImage() {\n    // encode input file as base64 string for upload\n    let file = document.getElementById(\"file\").files[0];\n    let converter = new Promise(function(resolve, reject) {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result\n            .toString().replace(/^data:(.*,)?/, ''));\n        reader.onerror = (error) => reject(error);\n    });\n    let encodedString = await converter;\n\n    // clear file upload input field\n    document.getElementById(\"file\").value = \"\";\n\n    // make server call to upload image\n    // and return the server upload promise\n    return fetch(serverUrl + \"/images\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({filename: file.name, filebytes: encodedString})\n    }).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n\nfunction updateImage(image) {\n    document.getElementById(\"view\").style.display = \"block\";\n\n    let imageElem = document.getElementById(\"image\");\n    imageElem.src = image[\"fileUrl\"];\n    imageElem.alt = image[\"fileId\"];\n\n    return image;\n}\n```", "```py\nfunction extractInformation(image) {\n    // make server call to extract information\n    // and return the server upload promise\n    return fetch(serverUrl + \"/images/\" + image[\"fileId\"] + \"/extract-info\", {\n        method: \"POST\"\n    }).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n\nfunction populateFields(extractions) {\n    let fields = [\"name\", \"title\", \"email\", \"phone\", \"organization\", \"address\", \"city\", \"state\", \"zip\"];\n    fields.map(function(field) {\n        if (field in extractions) {\n            let element = document.getElementById(field);\n            element.value = extractions[field].join(\" \");\n        }\n        return field;\n    });\n    let saveBtn = document.getElementById(\"save\");\n    saveBtn.disabled = false;\n}\n\nfunction uploadAndExtract() {\n    uploadImage()\n        .then(image => updateImage(image))\n        .then(image => extractInformation(image))\n        .then(translations => populateFields(translations))\n        .catch(error => {\n            alert(\"Error: \" + error);\n        })\n}\n```", "```py\nfunction saveContact() {\n    let contactInfo = {};\n\n    let fields = [\"name\", \"title\", \"email\", \"phone\", \"organization\", \"address\", \"city\", \"state\", \"zip\"];\n    fields.map(function(field) {\n        let element = document.getElementById(field);\n        if (element && element.value) {\n            contactInfo[field] = element.value;\n        }\n        return field;\n    });\n    let imageElem = document.getElementById(\"image\");\n    contactInfo[\"image\"] = imageElem.src;\n\n    // make server call to save contact\n    return fetch(serverUrl + \"/contacts\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(contactInfo)\n    }).then(response => {\n        if (response.ok) {\n            clearContact();\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n```", "```py\nfunction clearContact() {\n    let fields = [\"name\", \"title\", \"email\", \"phone\", \"organization\", \"address\", \"city\", \"state\", \"zip\"];\n    fields.map(function(field) {\n        let element = document.getElementById(field);\n        element.value = \"\";\n        return field;\n    });\n\n    let imageElem = document.getElementById(\"image\");\n    imageElem.src = \"\";\n    imageElem.alt = \"\";\n\n    let saveBtn = document.getElementById(\"save\");\n    saveBtn.disabled = true;\n}\n```", "```py\nfunction retrieveContacts() {\n    // make server call to get all contacts\n    return fetch(serverUrl + \"/contacts\", {\n        method: \"GET\"\n    }).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new HttpError(response);\n        }\n    })\n}\n\nfunction displayContacts(contacts) {\n    ...\n}\n\nfunction retrieveAndDisplayContacts() {\n    retrieveContacts()\n        .then(contacts => displayContacts(contacts))\n        .catch(error => {\n            alert(\"Error: \" + error);\n        })\n}\n```", "```py\nfunction displayContacts(contacts) {\n    let contactsElem = document.getElementById(\"contacts\")\n    while (contactsElem.firstChild) {\n        contactsElem.removeChild(contactsElem.firstChild);\n    }\n\n    for (let i = 0; i < contacts.length; i++) {\n        let contactElem = document.createElement(\"div\");\n        contactElem.style = \"float: left; width: 50%\";\n        contactElem.appendChild(document.createTextNode(contacts[i][\"name\"]));\n        contactElem.appendChild(document.createElement(\"br\"));\n        contactElem.appendChild(document.createTextNode(contacts[i][\"title\"]));\n        contactElem.appendChild(document.createElement(\"br\"));\n        contactElem.appendChild(document.createTextNode(contacts[i][\"organization\"]));\n        contactElem.appendChild(document.createElement(\"br\"));\n        contactElem.appendChild(document.createTextNode(contacts[i][\"address\"]));\n        contactElem.appendChild(document.createElement(\"br\"));\n        contactElem.appendChild(document.createTextNode(\n             contacts[i][\"city\"] + \", \" + contacts[i][\"state\"] + \" \" + contacts[i][\"zip\"]\n        ));\n        contactElem.appendChild(document.createElement(\"br\"));\n        contactElem.appendChild(document.createTextNode(\"phone: \" + contacts[i][\"phone\"]));\n        contactElem.appendChild(document.createElement(\"br\"));\n        contactElem.appendChild(document.createTextNode(\"email: \" + contacts[i][\"email\"]));\n\n        let cardElem = document.createElement(\"div\");\n        cardElem.style = \"float: right; width: 50%\";\n        let imageElem = document.createElement(\"img\");\n        imageElem.src = contacts[i][\"image\"];\n        imageElem.height = \"150\";\n        cardElem.appendChild(imageElem);\n\n        contactsElem.appendChild(document.createElement(\"hr\"));\n        contactsElem.appendChild(contactElem);\n        contactsElem.appendChild(imageElem);\n        contactsElem.appendChild(document.createElement(\"hr\"));\n    }\n}\n```", "```py\nusaddress==0.5.10\nboto3==1.9.224\n```", "```py\n{\n  \"version\": \"2.0\",\n  \"app_name\": \"Capabilities\",\n  \"stages\": {\n    \"dev\": {\n      \"autogen_policy\": false,\n      \"api_gateway_stage\": \"api\"\n    }\n  }\n}\n```", "```py\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Effect\": \"Allow\",\n \"Action\": [\n \"logs:CreateLogGroup\",\n \"logs:CreateLogStream\",\n \"logs:PutLogEvents\",\n \"s3:*\",\n \"rekognition:*\",\n \"comprehend:*\",\n \"comprehendmedical:*\",\n \"dynamodb:*\"\n ],\n \"Resource\": \"*\"\n }\n ]\n}\n```", "```py\n$ chalice deploy\nCreating deployment package.\nCreating IAM role: Capabilities-dev\nCreating lambda function: Capabilities-dev\nCreating Rest API\nResources deployed:\n  - Lambda ARN: arn:aws:lambda:us-east-1:<UID>:function:Capabilities-dev\n  - Rest API URL: https://<UID>.execute-api.us-east-1.amazonaws.com/api/\n```", "```py\n\"use strict\";\n\nconst serverUrl = \"https://<UID>.execute-api.us-east-1.amazonaws.com/api\";\n\n...\n```"]