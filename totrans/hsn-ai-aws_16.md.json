["```py\n!pip install pyarrow\n!pip install joblib\n!pip install xgboost\n#Read the dataset from S3 bucket\ns3_bucket = 'ai-in-aws'\ns3_prefix = 'Click-Fraud'\n\ns3_train_prefix = os.path.join(s3_prefix, 'train')\ns3_val_prefix = os.path.join(s3_prefix, 'val')\ns3_output_prefix = os.path.join(s3_prefix, 'output')\n\ns3_train_fn = 'train_sample.csv.zip'\n```", "```py\nfile_name = 'ad_track_day' fn_ext = '.csv'\nnum_days = 4\ndict_of_ad_trk_df = {}\n\nfor i in range(1, num_days+1):\ndict_of_ad_trk_df[file_name+str(i)] = pd.read_csv(file_name+str(i)+fn_ext) \n```", "```py\ndf_ckFraud_exp1 = pd.concat([dict_of_ad_trk_df[key] for key in [\"ad_track_day1\"]], ignore_index=True)\n\ndf_ckFraud_exp2 = pd.concat([dict_of_ad_trk_df[key] for key in [\"ad_track_day1\", \"ad_track_day2\", \"ad_track_day3\"]], ignore_index=True)\n\ndf_ckFraud_exp3 = pd.concat([dict_of_ad_trk_df[key] for key in [\"ad_track_day1\", \"ad_track_day2\", \"ad_track_day3\", \"ad_track_day4\"]], ignore_index=True)\n```", "```py\n%matplotlib inline\nplot_clickcnt_ftr(df_ckFraud_exp1, 'app', '1') \n```", "```py\n%matplotlib inline\nplot_clickcnt_ftr(df_ckFraud_exp1, 'device', '1') \n```", "```py\ndef encode_cat_ftrs(df_ckFraud):\ncat_ftrs = ['app','device','os','channel']\n\nfor c in cat_ftrs:\ndf_ckFraud[c+'_freq'] = df_ckFraud[c].map(df_ckFraud.groupby(c).size() / df_ckFraud.shape[0])\nreturn df_ckFraud\n```", "```py\ndf_ckFraud_exp1 = encode_cat_ftrs(df_ckFraud_exp1)\ndf_ckFraud_exp2 = encode_cat_ftrs(df_ckFraud_exp2)\ndf_ckFraud_exp3 = encode_cat_ftrs(df_ckFraud_exp3)\n```", "```py\ndef create_date_ftrs(df_ckFraud, col_name):\n\"\"\"\ncreate day, hour, minute, second features\n\"\"\"\ndf_ckFraud = df_ckFraud.copy()\n\ndf_ckFraud['day'] = df_ckFraud[col_name].dt.day.astype('uint8') ## dt is accessor object for date like properties\ndf_ckFraud['hour'] = df_ckFraud[col_name].dt.hour.astype('uint8')\ndf_ckFraud['minute'] = df_ckFraud[col_name].dt.minute.astype('uint8')\ndf_ckFraud['second'] = df_ckFraud[col_name].dt.second.astype('uint8')\n\nreturn df_ckFraud\n```", "```py\n# Correlation\ndf_ckFraud_exp1.corr()\n```", "```py\n# Sort by hour, minute and second --> pick the last 5% of records\ntest_data = df_ckFraud_exp3.sort_values(['day', 'hour', 'minute', 'second'], ascending=False).head(n=120000)\n\n```", "```py\n# Rearrange test data so that is_downloaded is the first column\ntest_data = pd.concat([test_data['is_downloaded'], test_data.drop(['is_downloaded'], axis=1)], axis=1)\n```", "```py\ntrain_data, validation_data = np.split(current_experiment.sample(frac=1, random_state=4567), [int(0.7 * len(current_experiment))])\n```", "```py\nxgb.set_hyperparameters(max_depth=4,\n eta=0.3,\n gamma=0,\n min_child_weight=6, \n colsample_bylevel = 0.8,\n colsample_bytree = 0.8,\n subsample=0.8,\n silent=0,\n scale_pos_weight=scale_pos_weight,\n objective='binary:logistic',\n num_round=100)\n```", "```py\nxgb.fit({'train': s3_input_train, 'validation': s3_input_validation})\n```", "```py\nexp_lst = ['exp1', 'exp2', 'exp3']\nfor exp in exp_lst:\n   model_file = os.path.join(sm_output_loc, exp, s3_output_fn)\n    plot_ftr_imp(model_file)\n```", "```py\nmodel_loc = os.path.join(data_loc, s3_output_fn)\nxgb_model = Model(model_data=model_loc, image=container, role=role)\nxgb_model.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')\n```", "```py\n xgb_predictor = sagemaker.predictor.RealTimePredictor(endpoint, sagemaker_session=sess, serializer=csv_serializer, deserializer=None, content_type='text/csv', accept=None)\n```", "```py\npredictions[exp_lst[ind]] = xgb_predictor.predict(test_data.as_matrix()[:10000, 1:]).decode('utf-8')\n```"]