["```py\n    { \"Version\": \"2012-10-17\", \"Statement\": [ {\n      \"Action\": [\n          \"iam:PassRole\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"<IAM ARN of your current SageMaker notebook execution role>\"\n      }\n     ]\n    }\n    ```", "```py\n    { \"Version\": \"2012-10-17\", \"Statement\": [\n      { \"Effect\": \"Allow\", \n        \"Principal\": \n          { \"Service\": \n              [ \"sagemaker.amazonaws.com\", \n                \"s3.amazonaws.com\", \n                \"comprehend.amazonaws.com\" ] \n              }, \n              \"Action\": \"sts:AssumeRole\" } \n          ] \n      }\n    ```", "```py\n        s3 = boto3.client('s3')\n        ```", "```py\n        textract = boto3.client('textract')\n        ```", "```py\n    s3BucketName = \"<your amazon s3 bucket>\" \n    ```", "```py\n    documentName = \"sample-invoice.png\"\n    display(Image(filename=documentName))\n    ```", "```py\n    with open(documentName, 'rb') as document:\n        imageBytes = bytearray(document.read())\n    ```", "```py\n    response = textract.detect_document_text(Document={'Bytes': imageBytes})\n    ```", "```py\n    import json\n    print (json.dumps(response, indent=4, sort_keys=True))\n    ```", "```py\n    {\n                \"BlockType\": \"LINE\",\n                \"Confidence\": 99.96764373779297,\n                \"Geometry\": {\n                    \"BoundingBox\": {\n                        \"Height\": 0.013190358877182007,\n                        \"Left\": 0.5149770379066467,\n                        \"Top\": 0.16227620840072632,\n                        \"Width\": 0.06892169266939163\n                    },\n\n    ```", "```py\n    documentName = \"textract-samples/two-column-image.jpg\"\n    display(Image(url=s3.generate_presigned_url('get_object', Params={'Bucket': s3BucketName, 'Key': documentName})))\n    ```", "```py\n    Response = textract.detect_document_text(\n        Document={\n            'S3Object': {\n                'Bucket': s3BucketName,\n                'Name': documentName\n            }\n        })\n    print(response)\n    ```", "```py\n    python -m pip install amazon-textract-response-parser \n    ```", "```py\n    doc = Document(response)\n    for page in doc.pages:\n        for line in page.getLinesInReadingOrder():\n              print(line[1])\n    ```", "```py\n    response = textract.analyze_document(\n        Document={\n            'S3Object': {\n                'Bucket': s3BucketName,\n                'Name': documentName\n            }\n        },\n        FeatureTypes=[\"FORMS\",\"TABLES\"])\n    ```", "```py\n    doc = Document(response)\n    for page in doc.pages:\n        print(\"Fields:\")\n        for field in page.form.fields:\n            print(\"Key: {}, Value: {}\".format(field.key, field.value))\n    ```", "```py\n        print(\"\\nGet Field by Key:\")\n        key = \"Phone Number:\"\n        field = page.form.getFieldByKey(key)\n        if(field):\n            print(\"Key: {}, Value: {}\".format(field.key, field.value))\n    ```", "```py\n        print(\"\\nSearch Fields:\")\n        key = \"address\"\n        fields = page.form.searchFieldsByKey(key)\n        for field in fields:\n            print(\"Key: {}, Value: {}\".format(field.key, field.value))\n    ```", "```py\n    Fields:\n    Key: Phone:, Value: 206-555-1234\n    Key: Phone:, Value: None\n    Key: Phone:, Value: None\n    Key: COMMENTS OR SPECIAL INSTRUCTIONS:, Value: loading lack locatal in alley\n    Key: SALES TAX, Value: 41.21\n    Key: SHIPPING and HANDLING, Value: 50.00\n    Key: REQUISITIONER, Value: None\n    Key: SUBTOTAL, Value: 457.9n\n    Key: TOTAL DUE, Value: 549.15\n    Key: SALESPERSON, Value: John SMITH\n    Key: SHIP TO:, Value: Jane Doe Doe Street Press 987 Doe St. #800 Seattle, WA 98108 206-555-9876\n    Key: P.O. NUMBER, Value: 0000145678\n    Key: TO:, Value: Jane Doe Doe Street Press 987 Doe St. #800 Seattle, WA 98108 206-555-9876\n    Key: DATE:, Value: 01/10/2021\n    ```", "```py\n    doc = Document(response)\n    for page in doc.pages:\n         # Print tables\n        for table in page.tables:\n            for r, row in enumerate(table.rows):\n                for c, cell in enumerate(row.cells):\n                    print(\"Table[{}][{}] = {}\".format(r, c, cell.text))\n    ```", "```py\n    Table[0][0] = QUANTITY \n    Table[0][1] = DESCRIPTION \n    Table[0][2] = UNIT PRICE \n    Table[0][3] = TOTAL \n    Table[1][0] = 4 \n    Table[1][1] = OFFILE GARS \n    Table[1][2] = 64.99 \n    Table[1][3] = 25996 \n    Table[2][0] = 2 \n    Table[2][1] = OFFICE DESX \n    Table[2][2] = 98.99 \n    Table[2][3] = 197.98 \n    ```", "```py\n    jobID = startTextAnalysis(s3Bucket, docName)\n    print(\"Started text analysis for: {}\".format(jobID))\n    if(isAnalysisComplete(jobID)):\n        response = getAnalysisResults(jobID)\n    ```", "```py\n    def startTextAnalysis(s3Bucket, doc):\n        response = None\n        response = textract.start_document_text_detection(\n        DocumentLocation={\n            'S3Object': {\n                'Bucket': s3Bucket,\n                'Name': doc\n            }\n        })\n        return response[\"JobID\"]\n    ```", "```py\n    def isAnalysisComplete(jobID):\n        response = textract.get_document_text_detection(JobId=jobID)\n        status = response[\"JobStatus\"]\n        print(\"Text Analysis status: {}\".format(status))\n        while(status == \"IN_PROGRESS\"):\n            time.sleep(2)\n            response = textract.get_document_text_detection(JobId=jobID)\n            status = response[\"JobStatus\"]\n            print(\"Status of Text Analysis is: {}\".format(status))\n        return status\n    ```", "```py\n    def getAnalysisResults(jobID):\n        pages = []\n        response = textract.get_document_text_detection(JobId=jobID)\n        pages.append(response)\n        print(\"We received results for: {}\".format(len(pages)))\n        nextToken = None\n        if('NextToken' in response):\n            nextToken = response['NextToken']\n        while(nextToken):\n            response = textract.get_document_text_detection(JobId=jobId, NextToken=nextToken)\n            pages.append(response)\n            print(\"We got the results for: {}\".format(len(pages)))\n            nextToken = None\n            if('NextToken' in response):\n                nextToken = response['NextToken']\n        return pages\n    ```"]