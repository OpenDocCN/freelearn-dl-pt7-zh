["```py\ndocker pull tensorflow/serving\n```", "```py\n## Builds a docker container from the image\ndocker build --pull -t $USER/tensorflow-serving-devel -f tensorflow_serving/tools/docker/Dockerfile.devel .\n```", "```py\n## Run the container; we'll name it nn_container\ndocker run --name=nn_container -it $USER/tensorflow-serving-devel\n```", "```py\n git clone -b r1.6 https://github.com/tensorflow/serving\n cd serving\n```", "```py\nbazel build -c opt tensorflow_serving/model_servers:tensorflow_model_server\n```", "```py\nmkdir model_serving\n```", "```py\ndocker cp ./output_directory nn_container:/model_serving\n```", "```py\ntensorflow_model_server --port=9000 --model_name=nn --model_base_path=/model_serving/binaries &> nn_log &\n```", "```py\npip install git+ssh://git@github.com/PacktPublishing/hands-On-Artificial-Intelligence-for-Beginners/tf-client.git\n```", "```py\nfrom predict_client.prod_client import ProdClientclient = ProdClient('localhost:9000', 'simple', 1)req_data = [{'in_tensor_name': 'a', 'in_tensor_dtype': 'DT_INT32', 'data': 2}]client.predict(req_data)\n```", "```py\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n      '--job-dir',\n      help='GCS location to write checkpoints and export models'\n     )\n    parser.add_argument(\n      '--train-file',\n      help='GCS or local paths to training data'\n      )\n     args, unknown = parser.parse_known_args()\n     c = SimpleClassifier()\n     c.train_model(**args.__dict__)\n```", "```py\ngcloud ml-engine models create \"deployed_classifier\"\n```", "```py\nDEPLOYMENT_SOURCE=\"gs://classifier_bucket123/classifier_model/binaries\"\n```", "```py\ngcloud ml-engine versions create \"version1\"\\\n    --model \"deployed_classifier\" --origin $DEPLOYMENT_SOURCE --runtime-version 1.9\n```", "```py\nMODEL_NAME=\"deployed_classifier\"\nINPUT_DATA_FILE=\"test.json\"\nVERSION_NAME=\"version1\"\n```", "```py\ngcloud ml-engine predict --model $MODEL_NAME \\\n                   --version $VERSION_NAME \\\n                   --json-instances $INPUT_DATA_FILE\n```", "```py\nGOOGLE_APPLICATION_CREDENTIALS = your_key.json\n```"]