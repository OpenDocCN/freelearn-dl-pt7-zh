- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Querying From a Structured Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned about using ChatGPT to analyze customer conversations
    and get useful information. Now, let’s imagine we’ve stored all this valuable
    info in a SQL database. As you can imagine, this database is like a treasure chest
    filled with different and important details.
  prefs: []
  type: TYPE_NORMAL
- en: Meet Sarah, our awesome customer care manager. Her job is to uncover the stories
    hidden in this sea of data. In the past, finding these stories meant being a master
    of SQL queries, a kind of language not everyone understands. Crafting these queries
    was like solving a puzzle and took a lot of time even for experienced users.
  prefs: []
  type: TYPE_NORMAL
- en: But now, a new chapter begins—the birth of SQL GPT. No longer stuck with tricky
    SQL rules, Sarah now has a tool that understands simple language. Instead of writing
    complex queries, she talks to the database like she’s chatting with a friend.
  prefs: []
  type: TYPE_NORMAL
- en: Using SQL GPT, Sarah explores the database’s analytics using easy English prompts.
    Curious about last month’s satisfaction score or the number of audio conversations?
    Just ask!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we embark on a mission to simplify data for everyone. SQL GPT
    serves as a friendly bridge between the complex world of databases and users of
    all skill levels, transforming everyday questions into powerful SQL queries. Together,
    we’ll explore how this tool makes data accessible and empowers people, like Sarah,
    to uncover meaningful insights with ease. While SQL GPT is a great resource for
    beginners learning SQL, it also proves invaluable for experienced users, helping
    them craft even the most complex queries effortlessly. Let’s dive into this exciting
    journey to unlock the true potential of data!
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Architecture design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing an SQL GPT section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the practical exercises in this chapter, access the source
    code available in this chapter's GitHub repository at [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter6.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter6.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the requirements that are already configured in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059):'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.9, 3.10, or 3.11 - [https://www.python.org/downloads/](https://www.python.org/downloads/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Developer CLI - Azure developer CLI Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 14+ - [https://nodejs.org/en/download](https://nodejs.org/en/download)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git - [https://git-scm.com/downloads](https://git-scm.com/downloads)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Powershell 7+ (`pwsh`) - [https://github.com/powershell/powershell](https://github.com/powershell/powershell)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure account - If you’re new to Azure, get an Azure account for free and you’ll
    get some free Azure credits to get started.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure subscription with access enabled for the Azure OpenAI service. You can
    request access with this form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure OpenAI connection and model information:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI API key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI embedding model deployment name
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI API version
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An SQL Server with database connection strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, we only need an SQL Server with database connection strings in
    addition to the requirements specific in [*Chapter 5*](B21019_05.xhtml#_idTextAnchor067)
    and [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  prefs: []
  type: TYPE_NORMAL
- en: Architecture design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process behind developing our GPT solution begins when the user sends a
    text-based query. Azure OpenAI then processes this query, converting it into a
    SQL command, which is passed to the SQL server. The SQL server executes the command
    and returns the results, which are then sent back to the user. This is represented
    in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1: Solution architecture diagram](img/B21019_06_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Solution architecture diagram'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding architecture diagram, we see three key components: the User,
    Azure OpenAI, and a SQL server. The arrows illustrate the flow of data between
    these components.'
  prefs: []
  type: TYPE_NORMAL
- en: Developing an SQLGPT solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’re familiar with the architectural elements necessary for creating
    this solution, let’s proceed with the implementation of these components in the
    Azure portal. As mentioned in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059),
    it’s crucial to have an active Azure account for this section. Details for setting
    up the Azure account with an active subscription and the Azure OpenAI Service
    resource are provided in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look into the steps for creating an SQL sever in Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SQL Server in Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an SQL Server, we will use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open [portal.azure.com](http://portal.azure.com)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the search bar in the top navigation and search for “`SQL Database`”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it is not found in the search results, click on `SQL Database`”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2: Select SQL Database](img/B21019_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Select SQL Database'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `azure-openai-rg`) .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3: Enter Database details](img/B21019_06_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Enter Database details'
  prefs: []
  type: TYPE_NORMAL
- en: Now give your desired database name and server for database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Server, select Create new, and fill out the New server form with the following
    values - **Server name**, **Location**, **Authentication method**, **Server admin
    login**, **Password**, and click on **Ok**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4: Enter SQL Server details](img/B21019_06_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Enter SQL Server details'
  prefs: []
  type: TYPE_NORMAL
- en: Once the Server is created then we need to select the server for creating the
    SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Workload environment, Compute+storage and click on **Next**. For
    **Networking** tab, toggle **Add current client IP address** to **Yes**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5: Enter SQL database details](img/B21019_06_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Enter SQL database details'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Next** in the **Networking** page and leave the **Security**, **Additional**
    **Settings** **Tags** as defaults and go to **Review +** **create** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6: Review Page](img/B21019_06_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Review Page'
  prefs: []
  type: TYPE_NORMAL
- en: Review all the details and click on the **Create** button to create the SQL
    Server and database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have set up all the essential services in our Azure portal, we can
    begin constructing our solution.
  prefs: []
  type: TYPE_NORMAL
- en: Solution using Azure SQL and ChatGPT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To develop the code, I will be working within the Jupyter notebook and the remaining
    installations remain the same as in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
    You will find all the necessary items, including the Python notebook, in the chapter
    6 folder of this book’s GitHub repository at - [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter6.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter6.ipynb)
  prefs: []
  type: TYPE_NORMAL
- en: You will need to install one extra Python library for this code other than the
    one installed in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Jupyter Notebook and install the following package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Our code includes the following sections in which we are going to develop our
    solution
  prefs: []
  type: TYPE_NORMAL
- en: Importing packages
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting DB connection strings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sample Query testing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the ChatGPT deployed model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Pandas agent and ask questions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to import the required packages before we develop the solution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see a variety of libraries being used in the code above. Let’s delve
    into each of these libraries in the table here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Imported Packages** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `pyodbc` | A Python module for ODBC (Open Database Connectivity) database
    access. |'
  prefs: []
  type: TYPE_TB
- en: '| `pandas` | A powerful data manipulation and analysis library for Python.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `langchain.llms.AzureOpenAI` | A module from the “langchain” package for
    handling language models, specifically Azure OpenAI. |'
  prefs: []
  type: TYPE_TB
- en: '| `openai` | The OpenAI Python library, which provides access to OpenAI’s GPT
    models. |'
  prefs: []
  type: TYPE_TB
- en: '| `os` | Provides a way to interact with the operating system, including reading
    or setting environment variables. |'
  prefs: []
  type: TYPE_TB
- en: '| `dotenv.load_dotenv` | Loads environment variables from a .env file into
    the script’s environment. |'
  prefs: []
  type: TYPE_TB
- en: '| `langchain_experimental.agents.agent_toolkits.``create_spark_dataframe_agent`
    | A function to create a Spark DataFrame agent for experimental purposes. |'
  prefs: []
  type: TYPE_TB
- en: '| `langchain_experimental.agents.agent_toolkits.``create_pandas_dataframe_agent`
    | A function to create a Pandas DataFrame agent for experimental purposes. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 6.1: Explanation of the usage of the imported packages'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s initialize all the necessary constants using the keys provided in
    the `.env` file. We add “`DATABASESERVER`” ,” `DATABASE`” , “`DATABASEUSERNAME`”
    and “`DATABASEPASSWORD`” to our .`env` file from [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these to the `.env` file we created in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059)
    with the `connectionString` and `endpoints`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Follow these steps to add the SQL Server end point in the `.env` file. The required
    details can be found in your SQL server created in the azure portal in **Connection
    Strings** -> **ODBC** section
  prefs: []
  type: TYPE_NORMAL
- en: Update the **DATABASESERVER** value with the **Server Name** value found in
    your SQL Database page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, modify the values of `DATABASE` with the Database name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Similarly update the **DATABASEUSERNAME** and **DATABASEPASSWORD** you set
    while setting up the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7: Connection Strings](img/B21019_06_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: Connection Strings'
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Setting DB Connection Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This code is a common pattern for connecting to a SQL Server database in Python
    using `pyodbc`, specifying connection parameters in the `connectionString`. The
    resulting connection (`cnxn`) and cursor (`cursor`) can be used to interact with
    the database through SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve incorporated the connection strings into our SQL database, it’s
    time to validate them by executing a sample query. In my experience I have seen
    several instances where developers struggle with getting the right connection
    string, the best way is to copy that directly from the source like azure portal
    and paste. Incase if you are formatting on your own then please take care if there
    are any special characters in either the password or the username.
  prefs: []
  type: TYPE_NORMAL
- en: This code snippet facilitates fetching a subset of data from the designated
    SQL table and visualizing it in a Pandas DataFrame, a typical procedure when handling
    data in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8: An overview of the Output of SQL Query](img/B21019_06_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: An overview of the Output of SQL Query'
  prefs: []
  type: TYPE_NORMAL
- en: Use the ChatGPT deployed model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the previous output, we confirm that the SQL connection is established
    successfully, enabling us to execute database queries from our Python code.
  prefs: []
  type: TYPE_NORMAL
- en: The provided code snippet initializes an instance of the `AzureOpenAI` class,
    assuming that `OPENAI_DEPLOYMENT_NAME` and `OPENAI_MODEL_NAME` are variables storing
    the targeted deployment and model names, respectively, for utilization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Create Pandas agent and Ask Questions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In continuation from the previous step, the code initializes an experimental
    agent capable of natural language interaction with a Pandas DataFrame and a language
    model. It issues a query, “how many rows are there?”, anticipating the agent to
    interpret and respond accordingly based on the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9: Sample output of our agent creation](img/B21019_06_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: Sample output of our agent creation'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now assess the effectiveness of our agent by experimenting with various
    prompts to retrieve data from the SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: 'First Prompt: “What is the frequency of each country region”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10: SQL Output For our prompt](img/B21019_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: SQL Output For our prompt'
  prefs: []
  type: TYPE_NORMAL
- en: 'Second Prompt: “list the name of 10 unique cities”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11: SQl Output for our prompt](img/B21019_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: SQl Output for our prompt'
  prefs: []
  type: TYPE_NORMAL
- en: 'Third Prompt: “how many unique state provinces are there?”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12: SQL Output for our prompt](img/B21019_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: SQL Output for our prompt'
  prefs: []
  type: TYPE_NORMAL
- en: With this, we’ve successfully established the connection between SQL Server
    and ChatGPT. Now, instead of executing SQL queries directly, we can provide prompts
    to retrieve SQL data using Pandas DataFrame and ChatGPT LLM.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delved into the effortless world of interacting with an
    SQL database using straightforward English prompts. First, we set the stage by
    creating a SQL database and establishing a seamless connection to it through the
    PyODBC library. We ensured the connectivity by testing simple SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, we introduced a powerful ally in the form of a Pandas agent
    driven using ChatGPT. This dynamic duo allows us to effortlessly make queries
    using everyday English prompts. In essence, this SQL GPT tool opens up a realm
    where anyone, regardless of prior SQL knowledge, can effortlessly extract data
    from the database. This is a game-changer, making the world of databases more
    accessible and user-friendly for all.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look into how we can use Azure Open AI to generate
    code and documentation for the user prompts.
  prefs: []
  type: TYPE_NORMAL
