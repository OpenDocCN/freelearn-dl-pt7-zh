["```py\nFibRec <- function(n) {\n  if (n<=2)\n    return(1)\n  return (FibRec(n-1)+FibRec(n-2))\n}\n\nStartTime <- Sys.time()\npaste(\"20th Fibonacci number is: \",FibRec(20))\nEndTime <- Sys.time()\npaste(\"Computational time using Recursion is: \",EndTime - StartTime)\n```", "```py\n\"20th Fibonacci number is:  6765\"\nComputational time using Recursion is:  0.0400021076202393\n```", "```py\nRecTable <- c(1, 1, rep(NA, 100))\nFibMem <- function(x) {\n    if(!is.na(RecTable[x])) return(RecTable[x])\n    ans <- FibMem(x-2) + FibMem(x-1)\n    RecTable[x] <<- ans\n    ans\n  }\n\nStartTime <- Sys.time()\npaste(\"20th Fibonacci number is: \",FibMem(20))\nEndTime <- Sys.time()\n\npaste(\"Computational time using Memoization is: \",EndTime - StartTime)\n```", "```py\n20th Fibonacci number is:  6765\nComputational time using Memoization is:  0.0310020446777344\n```", "```py\nW = 10\nWeightArray = c(5,2,4,6)\nValueArray = c(18,9,12,25)\nDataKnap<-data.frame(WeightArray,ValueArray)\n\nBestValue = 0    \nItemsSelected = c()\nTempWeights<-c()\nTempValues<-c()\n\nfor(i in 1:4){\n  CombWeights<-as.data.frame(combn(DataKnap[,1], i))\n  CombValues<-as.data.frame(combn(DataKnap[,2], i))\n  SumWeights<-colSums(CombWeights)\n  SumValue<-colSums(CombValues)\n  TempWeights<-which(SumWeights<=W)\n    if(length(TempWeights) != 0){\n      TempValues<-SumValue[TempWeights]\n      BestValue<-max(TempValues)\n      Index<-which((TempValues)==BestValue)\n      MaxIndex<-TempWeights[Index]\n      MaxVW<-CombWeights[, MaxIndex]\n      j=1\n      while (j<=i){\n        ItemsSelected[j]<-which(DataKnap[,1]==MaxVW[j])\n        j=j+1\n      }\n    }\n  }\nlist(value=round(BestValue),elements=ItemsSelected) \n```", "```py\nW = 10\nWeightArray = c(5,2,4,6)\nValueArray = c(18,9,12,25)\nDataKnap<-data.frame(WeightArray,ValueArray)\n```", "```py\nBestValue = 0    \nItemsSelected = c()\nTempWeights<-c()\nTempValues<-c()\n```", "```py\nfor(i in 1:4){\n```", "```py\nCombWeights<-as.data.frame(combn(DataKnap[,1], i))\nCombValues<-as.data.frame(combn(DataKnap[,2], i))\n```", "```py\nSumWeights<-colSums(CombWeights)\nSumValue<-colSums(CombValues)\n```", "```py\nTempWeights<-which(SumWeights<=W)\n```", "```py\nif(length(TempWeights) != 0){\n      TempValues<-SumValue[TempWeights]\n      BestValue<-max(TempValues)\n      Index<-which((TempValues)==BestValue)\n      MaxIndex<-TempWeights[Index]\n      MaxVW<-CombWeights[, MaxIndex]\n      j=1\n      while (j<=i){\n        ItemsSelected[j]<-which(DataKnap[,1]==MaxVW[j])\n        j=j+1\n      }\n    }\n  }\n```", "```py\nlist(value=round(BestValue),elements=ItemsSelected) \n```", "```py\n$value\n[1] 37\n\n$elements\n[1] 3 4\n```", "```py\nK = 10\nw = c(5,2,4,6)\nv = c(18,9,12,25)\nDataKnap<-data.frame(w,v)\n\nDataKnap$rows_idx <- row(DataKnap)\nDataKnap <- DataKnap[DataKnap$w < K,]\nDataKnap$VWRatio <- DataKnap$v/DataKnap$w\nDescOrder <- order(DataKnap$VWRatio, decreasing = TRUE)\nDataKnap <- DataKnap[DescOrder,]\n\nKnapSol <- list(value = 0)\nSumWeights <- 0\ni <- 1\n\nwhile (i<=nrow(DataKnap) & SumWeights + DataKnap$w[i]<=K){\n    SumWeights <- SumWeights + DataKnap$w[i]\n    KnapSol$value <- KnapSol$value + DataKnap$v[i]\n    KnapSol$elements[i] <- DataKnap$row[i]\n    i <- i + 1\n}\n\nprint(KnapSol)\n```", "```py\nK = 10\nw = c(5,2,4,6)\nv = c(18,9,12,25)\nDataKnap<-data.frame(w,v)\n```", "```py\nDataKnap$rows_idx <- row(DataKnap)\nDataKnap <- DataKnap[DataKnap$w < K,]\nDataKnap$VWRatio <- DataKnap$v/DataKnap$w\nDescOrder <- order(DataKnap$VWRatio, decreasing = TRUE)\nDataKnap <- DataKnap[DescOrder,]\n```", "```py\nKnapSol <- list(value = 0)\nSumWeights <- 0\ni <- 1\n```", "```py\nwhile (i<=nrow(DataKnap) & SumWeights + DataKnap$w[i]<=K){\n    SumWeights <- SumWeights + DataKnap$w[i]\n    KnapSol$value <- KnapSol$value + DataKnap$v[i]\n    KnapSol$elements[i] <- DataKnap$row[i]\n    i <- i + 1\n}\n```", "```py\nprint(KnapSol)\n```", "```py\n$value\n[1] 34\n\n$elements\n[1] 2 4\n```", "```py\nv <- c(18,9,12,25)\nw <- c(5,2,4,6)\nW <- 10\n\nTabweights<-c(0,w)\nTabValues<-c(0,v)\nn<-length(w)\nTabMatrix<-matrix(NA,nrow =n+1,ncol = W+1)\n\nTabMatrix[,]<-0\n\nfor (j in 2:W+1){\n  for (i in 2:n+1){\n      if (Tabweights[i] > j) {\n        TabMatrix[i,j] = TabMatrix[i-1,j]\n      } \n      else\n      {\n        TabMatrix[i,j]<-max(TabMatrix[i-1,j], TabValues[i] + TabMatrix[i-1,j-Tabweights[i]])\n      }\n  }\n}\n\ncat(\"The best value is\",TabMatrix[i,j])\n\ni = n+1\nw = W+1\nItemSelected = c()\nwhile(i>1 & w>0)\n  {\n  if(TabMatrix[i,w]!=TabMatrix[i-1,w])\n    {\n    ItemSelected<-c(ItemSelected,(i)-1)\n    w = w - Tabweights[i]\n    i = i - 1\n   }\n  else\n  {\n    i = i - 1\n  }\n}\n\ncat(\"The items selected are\",ItemSelected)\n```", "```py\nv <- c(18,9,12,25)\nw <- c(5,2,4,6)\nW <- 10\n```", "```py\nTabweights<-c(0,w)\nTabValues<-c(0,v)\nn<-length(w)\nTabMatrix<-matrix(NA,nrow =n+1,ncol = W+1)\nTabMatrix[,]<-0\n```", "```py\nfor (j in 2:W+1){\n  for (i in 2:n+1){\n      if (Tabweights[i] > j) {\n        TabMatrix[i,j] = TabMatrix[i-1,j]\n      } \n      else\n      {\n        TabMatrix[i,j]<-max(TabMatrix[i-1,j], TabValues[i] + TabMatrix[i-1,j-Tabweights[i]])\n      }\n  }\n}\n```", "```py\nif (Tabweights[i] > j) {\n        TabMatrix[i,j] = TabMatrix[i-1,j]\n      } \n      else\n      {\n        TabMatrix[i,j]<-max(TabMatrix[i-1,j], TabValues[i] + TabMatrix[i-1,j-Tabweights[i]])\n```", "```py\ncat(\"The best value is\",TabMatrix[i,j])\n```", "```py\nThe best value is 37\n```", "```py\ni = n+1\nw = W+1\nItemSelected = c()\nwhile(i>1 & w>0)\n  {\n  if(TabMatrix[i,w]!=TabMatrix[i-1,w])\n    {\n    ItemSelected<-c(ItemSelected,(i)-1)\n    w = w - Tabweights[i]\n    i = i - 1\n   }\n  else\n  {\n    i = i - 1\n  }\n}\n```", "```py\n if(TabMatrix[i,w]!=TabMatrix[i-1,w])\n    {\n    ItemSelected<-c(ItemSelected,(i)-1)\n```", "```py\nw = w - Tabweights[i]\n```", "```py\ncat(\"The best value is\",TabMatrix[i,j])\n```", "```py\nThe items selected are 4 3\n```", "```py\nlibrary(MDPtoolbox)\n\nUpAct=matrix(c(0.3, 0.7, 0, 0,\n            0, 0.9, 0.1, 0,\n            0, 0.1, 0.9, 0,\n            0, 0, 0.7, 0.3),\n          nrow=4,ncol=4,byrow=TRUE)\n\nDownAct=matrix(c( 1, 0, 0, 0,\n               0.7, 0.2, 0.1, 0,\n               0, 0.1, 0.2, 0.7,\n               0, 0, 0, 1),\n            nrow=4,ncol=4,byrow=TRUE)\n\nLeftAct=matrix(c( 0.9, 0.1, 0, 0,\n               0.1, 0.9, 0, 0,\n               0, 0.7, 0.2, 0.1,\n               0, 0, 0.1, 0.9),\n            nrow=4,ncol=4,byrow=TRUE)\n\nRightAct=matrix(c( 0.9, 0.1, 0, 0,\n                0.1, 0.2, 0.7, 0,\n                0, 0, 0.9, 0.1,\n                0, 0, 0.1, 0.9),\n             nrow=4,ncol=4,byrow=TRUE)\n\nAllActions=list(up=UpAct, down=DownAct, left=LeftAct, right=RightAct)\n\nAllRewards=matrix(c( -2, -2, -2, -2,\n                  -2, -2, -2, -2,\n                  -2, -2, -2, -2,\n                  20, 20, 20, 20),\n               nrow=4,ncol=4,byrow=TRUE)\n\nmdp_check(AllActions, AllRewards)\nGridModel=mdp_policy_iteration(P=AllActions, R=AllRewards, discount = 0.1)\nGridModel$policy\nnames(AllActions)[GridModel$policy]\nGridModel$V\nGridModel$iter\nGridModel$time\n```", "```py\nlibrary(MDPtoolbox)\n```", "```py\nUpAct=matrix(c(0.3, 0.7, 0, 0,\n 0, 0.9, 0.1, 0,\n 0, 0.1, 0.9, 0,\n 0, 0, 0.7, 0.3),\n nrow=4,ncol=4,byrow=TRUE)\n\nDownAct=matrix(c( 1, 0, 0, 0,\n 0.7, 0.2, 0.1, 0,\n 0, 0.1, 0.2, 0.7,\n 0, 0, 0, 1),\n nrow=4,ncol=4,byrow=TRUE)\n\nLeftAct=matrix(c( 0.9, 0.1, 0, 0,\n 0.1, 0.9, 0, 0,\n 0, 0.7, 0.2, 0.1,\n 0, 0, 0.1, 0.9),\n nrow=4,ncol=4,byrow=TRUE)\n\nRightAct=matrix(c( 0.9, 0.1, 0, 0,\n 0.1, 0.2, 0.7, 0,\n 0, 0, 0.9, 0.1,\n 0, 0, 0.1, 0.9),\n nrow=4,ncol=4,byrow=TRUE)\n```", "```py\nAllActions=list(up=UpAct, down=DownAct, left=LeftAct, right=RightAct)\n```", "```py\nAllRewards=matrix(c( -2, -2, -2, -2,\n                  -2, -2, -2, -2,\n                  -2, -2, -2, -2,\n                  20, 20, 20, 20),\n               nrow=4,ncol=4,byrow=TRUE)\n```", "```py\nmdp_check(AllActions, AllRewards)\n```", "```py\nGridModel=mdp_policy_iteration(P=AllActions, R=AllRewards, discount = 0.1)\n```", "```py\nGridModel$policy\n```", "```py\n1 4 2 2\n```", "```py\nnames(AllActions)[GridModel$policy]\n```", "```py\n\"up\"    \"right\" \"down\"  \"down\"\n```", "```py\nGridModel$V\n```", "```py\n-2.213209 -2.097323 -0.474916 22.222222\n```", "```py\nGridModel$iter\n```", "```py\n3\n```", "```py\nGridModel$time\n```", "```py\nTime difference of 0.377022 secs\n```"]