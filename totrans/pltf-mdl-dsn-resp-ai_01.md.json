["```py\nfrom art.estimators.classification import KerasClassifier\nfrom art.attacks.inference.model_inversion.mi_face import MIFace\nfrom art.estimators.classification import KerasClassifier\nfrom art.attacks import evasion, extraction, inference, poisoning\nfrom art.attacks import Attack, EvasionAttack, PoisoningAttack, PosioningAttackBlackBox,\nPoisoningAttackWhiteBox\nfrom art.attacks import Attack, PoisoningAttackTransformer, ExtractionAttack, InferenceAttack, AttributeInferenceAttack, ReconstructionAttack\nfrom art.attacks.evasion import HopSkipJump\nfrom art.utils import to_categorical\nfrom art.utils import load_dataset\n```", "```py\n    art_classifier = XGBoostClassifier(model=model, nb_features=x_train.shape[1], nb_classes=10)\n    ```", "```py\n    zoo = ZooAttack(classifier=art_classifier, confidence=0.0, targeted=False, learning_rate=1e-1, max_iter=20,\n                        binary_search_steps=10, initial_const=1e-3, abort_early=True, use_resize=False,\n                        use_importance=False, nb_parallel=1, batch_size=1, variable_h=0.2)\n    ```", "```py\n    x_train_adv = zoo.generate(x_train)\n    ```", "```py\nattack_point, poisoned = get_adversarial_examples(train_data, train_labels, 0, test_data, test_labels, kernel)\nclean = SVC(kernel=kernel)\nart_clean = SklearnClassifier(clean, clip_values=(0, 10))\nart_clean.fit(x=train_data, y=train_labels)\nplot_results(art_clean._model, train_data, train_labels, [], \"SVM Before Attack\")\nplot_results(poisoned._model, train_data, train_labels, [attack_point], \"SVM After Poison\")\n```", "```py\n     model_stolen = get_model(num_classes=10, c1=32, c2=64, d1=128)\n     classifier_stolen = KerasClassifier(model_stolen, clip_values=(0, 1), use_logits=False)\n     classifier_stolen = attack.extract(x_steal, y_steal, thieved_classifier=classifier_stolen)\n     acc = classifier_stolen._model.evaluate(x_test, y_test)[1]\n```", "```py\nclients = [client_1, client_2]\noptimizers = [optimizer_1, optimizer_2]\ngenerator = Generator(nz, nc, ngf)\ngenerator.to(device)\noptimizer_g = optim.SGD(\n    generator.parameters(), lr=0.05, weight_decay=1e-7, momentum=0.0\n)\ngan_attacker = GAN_Attack(\n    client_2,\n    target_label,\n    generator,\n    optimizer_g,\n    criterion,\n    nz=nz,\n    device=device,\n)\nglobal_model = Net()\nglobal_model.to(device)\nserver = FedAvgServer(clients, global_model)\n```", "```py\nnum_epochs = 10\n# Construct and train a convolutional neural network\nclassifier = cnn_mnist(x_train.shape[1:], min_, max_)\nclassifier.fit(x_train, y_train, nb_epochs=num_epochs, batch_size=128)\nattack = MIFace(classifier, max_iter=10000, threshold=1.)\n```"]