["```py\n'''************************\nLoad Data\n'''\n#import relevant libraries\nimport quandl\nfrom datetime import date,timedelta\nimport pandas as pd\nimport os\n\n#load tickers universe and description field (scale)\n...\n\n#loop through investors\n...\n\nfor investor in investorNameList:\n   ...\n   #calculate the change in position by ticker on \n    Quarter-to-quarter basis\n   ...\n\n   #qualify investor's activities\n   print('classify investor decision')\n   ...\n   #output the tickerâ€™s activities of the investor\n```", "```py\n## Prepare investor Profile'''\n#load relevant libraries\nimport os\nimport pandas as pd\nimport numpy as np\nfrom time import time\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport pickle\n\n...\n\n#Summarize quarterly performance of investors per quarter\n...\nfor file in file_list:\n    ...\n    for index, row in tmp_pd.iterrows():\n        ...\n\n    #calculate return (realized, unrealized and new money)\n    ...\n```", "```py\n## Cluster investors\n#cleansed and transform data for clustering\n...\n\nsc_X = StandardScaler()\nX = sc_X.fit_transform(investor_pd)\n\n#define the k means function\ndef bench_k_means(estimator, name, data):\n    ...\n\n#try out different K means parameters and find out the best parameters\n...\n\nfor num_cluster in range(5, 500):\n    KMeans_model = KMeans(init='k-means++', \\\n                          n_clusters=num_cluster, n_init=10)\n    ...\n\n## Output the results\n#Output clusters\n```", "```py\n'''*************************************\ni. load industry, tickers and functions\n'''\n#import libraries\nimport quandl\nimport pandas as pd\nimport numpy as np\nimport os\nfrom time import time\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport pickle\n\n#KPI keys\n...\n\n...\n```", "```py\n#define important functions\n#download fundamental data of the ticker\ndef download_tkr(tkr):\n    ...\n```", "```py\n#kmean clustering function\ndef bench_k_means(estimator, name, data):\n    ...\n\n'''*************************************\n#2a. load data\n'''\n#parameters\n...\n\n'''*************************************\n#i. filter the industry in scope\n'''\n...\n\n#collect tkr in each industry\nfor index, row in df_tkr.iterrows():\n    ...\n```", "```py\n'''*************************************\n#ii. create a dataframe for each industry to do clustering\n'''\n...\n#loop through the industry\nfor ind, list_tkr in dict_ind_tkr.items():\n    ...\n    #Go through the ticker list to Download data from source\n    #loop through tickers from that industry\n    for tkr in list_tkr:\n        ...\n\n    '''*************************************\n    2b. prepare features for clustering for the industry\n    '''\n    #convert to float and calc the difference across rows\n    ...\n    '''*************************************\n    2C. Perform K means clustering for the industry\n    '''\n    #clustering        \n    sc_X = StandardScaler()\n    X = sc_X.fit_transform(df_fs_filter)\n\n    ...\n    for num_cluster in range(5, max_clsuter):\n        KMeans_model = KMeans(init='k-means++', \\\n                              n_clusters=num_cluster, n_init=10)\n        ...\n```", "```py\n    '''*************************************\n    2D. Output the clustering model and scaler for the industry\n    '''    \n    #Output clusters\n    ...\n```", "```py\n#import relevant libraries\nimport os\nimport pickle\nimport math\nimport numpy as np\nimport pandas as pd\nimport quandl\n\n...\n```", "```py\n#perform financial projection\n#reuse the function developed for WACC optimization\ndef cal_F_financials(record_db_f, logreg, logreg_sc, new_debt_pct, price_offering, levered_beta, sales_growth, coefs, r_free):\n    ...\n\n'''*****************************\nStep 2: Simulate financial of the new stock\n'''\n...\n\n#load credit model built previously\n...\n\n#reuse the parameters developed from WACC example\n...\n\n#assume that we are raising equity for the same client\n...\n\n#run simulation / projection of financial data\n...\n```", "```py\n#Step 2 and 3\\. Perform clustering to find out the similar investors whose sharing the similar stocks\n\n'''*****************************\nStep 3: Run the similarity models to find out holders of the similar stocks\n'''\n#check if we need any model - if industry has too few stocks, no model needed to find out the similar stocks\n...\n\n#retrieve the list of tickers that are similar\n...\n\n#find list of investors looking at the similar size and more\n#check which investors have it...\n...\n\n#loop through investors holding name by name to find out investor that is holding the similar stocks\nfor filename in investorNameList:\n    ...\n\n#Load the investor clustering model\n...\n#extract the investors' cluster id\n...\n\n#find out who else share the same cluster id\n...\n\n#print out the investor list\n...\n```", "```py\n'''*************************************\n#1\\. Import libraries and define key variables\n'''\nimport pandas as pd\nimport numpy as np\nimport quandl\nimport matplotlib.pyplot as plt \nfrom sklearn.metrics import classification_report,roc_curve, auc,confusion_matrix,f1_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import StandardScaler\nimport pickle\nimport graphviz\n\n#KPI keys\nquandl.ApiConfig.api_key = '[API Key for Quandl]'\n```", "```py\n'''*************************************\n#2\\. Definition of functions\n'''\n#2a.Download tickers\ndef download_tkr(tkr):\n...\n#2b.Train tree\ndef train_tree(X,Y,ind):\n...\n##2C Neural Network\n#2Ci. Grid search that simulate the performance of different neural network design\ndef grid_search(X_train,X_test, Y_train,Y_test,num_training_sample):\n...\n#2Cii. Train Neural Network\ndef train_NN(X,Y,ind):\n...\n```", "```py\ndef filterIndustriesByTickets(ind):\n```", "```py\ndef displayCurveChart(type, ind):\n```", "```py\n'''*************************************\n3\\. Execute the program\n#3a. filter the industry in scope\n'''\ngroupby_fld = 'sicsector'\nmin_size = 30\ndf_tkr = pd.read_csv('industry_tickers_list.csv')\n...\n#collect ticker in each industry\nfor index, row in df_tkr.iterrows():\n    ind = row[groupby_fld]\n    tkr = row['ticker']\n    if ind in list_scope:\n        if ind in dict_ind_tkr:\n            dict_ind_tkr[ind].append(tkr)\n        else:\n            dict_ind_tkr[ind] = [tkr\n```", "```py\n#loop through the dictionary - one industry at a time\nfor ind, list_tkr in dict_ind_tkr.items():\n    df_X = pd.DataFrame({})\n    df_Y = pd.DataFrame({})\n    print(ind)\n    #Go through the ticker list to Download data from source\n    #loop through tickers from that industry\n    for tkr in list_tkr:\n        print(tkr)\n        try:\n            df_tmp,X_tmp,Y_tmp = download_tkr(tkr)\n        ...\n```", "```py\n    #neural network\n    nn_clf,f1_score_temp = train_NN(df_X,df_Y,ind)\n    f1_list.append(f1_score_temp)\n    nn_clf.get_params()\n\n    #decision tree\n    try:\n        tree_clf,f1_score_temp = train_tree(df_X,df_Y,ind)\n    except Exception:\n        continue\n\n    f1_list.append(f1_score_temp)\n    tree_clf.get_params()\n```"]