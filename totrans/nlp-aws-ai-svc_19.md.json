["```py\n    { \"Version\": \"2012-10-17\", \"Statement\": [ {\n      \"Action\": [\n          \"iam:PassRole\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"<your sagemaker notebook execution role ARN\">\n      }\n     ]\n    }\n    ```", "```py\n    WORKTEAM_ARN= '<your-private-workteam-arn>'\n    ```", "```py\n    bucket = \"<S3-bucket-name>\"\n    ```", "```py\n    s3_client = boto3.client('s3')\n    for secfile in os.listdir():\n        if secfile.endswith('pdf'):\n            response = s3_client.upload_file(secfile, bucket, prefix+'/'+secfile)\n            print(\"Uploaded {} to S3 bucket {} in folder {}\".format(secfile, bucket, prefix))\n    ```", "```py\n    input_bucket = s3.Bucket(bucket)\n    jobids = {}\n    ```", "```py\n    for j in jobids:\n        print(\"Textract detection Job ID for {} is {}\".format(j,str(jobids[j])))\n    ```", "```py\n    text_extractor = TextExtractor()\n    indoc = {}\n    df_indoc = pd.DataFrame(columns = ['DocName','LineNr','DetectedText','Confidence', 'CorrectedText', 'Comments'])\n    for x in jobids:\n        pages = text_extractor.extract_text(jobids[x])\n        contdict =pages[1]['Content']\n        for row in range(1,(int(len(contdict)/2))+1):\n            df_indoc.loc[len(df_indoc.index)] = [x, row, contdict['Text'+str(row)], round(contdict['Confidence'+str(row)],1),'','']\n    ```", "```py\n    df_newdoc = pd.DataFrame(columns = ['DocName','LineNr','DetectedText','Confidence','CorrectedText','Comments'])\n    for idx, row in df_indoc.iterrows():\n        if str(row['LineNr']) in bounding_dict['lines'].split(':'):\n            df_newdoc.loc[len(df_newdoc.index)] = [row['DocName'],row['LineNr'], row['DetectedText'], row['Confidence'], row['CorrectedText'],row['Comments']]\n    df_newdoc\n    ```", "```py\n    def create_task_ui():\n            response = sagemaker.create_human_task_ui(\n            HumanTaskUiName=taskUIName,\n            UiTemplate={'Content': template})\n        return response\n    # Create task UI\n    humanTaskUiResponse = create_task_ui()\n    humanTaskUiArn = humanTaskUiResponse['HumanTaskUiArn']\n    print(humanTaskUiArn)\n    ```", "```py\n    arn:aws:sagemaker:us-east-1:<aws-account-nr>:human-task-ui /ui-pdf-docs-<timestamp>\n    ```", "```py\n    create_workflow_definition_response = sagemaker_client.create_flow_definition(\n            FlowDefinitionName=flowDefinitionName,\n            RoleArn=role,\n            HumanLoopConfig= {\n                \"WorkteamArn\": WORKTEAM_ARN,\n                \"HumanTaskUiArn\": humanTaskUiArn,\n                \"TaskCount\": 1,\n                \"TaskDescription\": \"Review the contents and correct values as indicated\",\n                \"TaskTitle\": \"SEC Registration Form Review\"\n            },\n            OutputConfig={\n                \"S3OutputPath\" : OUTPUT_PATH\n            }\n        )\n    flowDefinitionArn = create_workflow_definition_response['FlowDefinitionArn'] # let's save this ARN for future use\n    ```", "```py\n    for x in range(60):\n        describeFlowDefinitionResponse = sagemaker_client.describe_flow_definition(FlowDefinitionName=flowDefinitionName)\n        print(describeFlowDefinitionResponse ['FlowDefinitionStatus'])\n        if (describeFlowDefinitionResponse ['FlowDefinitionStatus'] == 'Active'):\n            print(\"Flow Definition is active\")\n            break\n        time.sleep(2)\n    ```", "```py\n    Initializing\n    Active\n    Flow Definition is active\n    ```", "```py\n    reg_images = {}\n    for image in os.listdir():\n        if image.endswith('png'):\n            reg_images[image.split('_')[0]] = S3Uploader.upload(image, 's3://{}/{}'.format(bucket, prefix))\n    ```", "```py\n    humanLoopName = {}\n    docs = df_newdoc.DocName.unique()\n    # confidence threshold\n    confidence_threshold = 95\n    for doc in docs:\n        doc_list = []\n        humanLoopName[doc] = str(uuid.uuid4())\n        for idx, line in df_newdoc.iterrows():\n            # Send only those lines whose confidence score is less than threshold\n            if line['DocName'] == doc and line['Confidence'] <= confidence_threshold:\n                doc_list.append({'linenr': line['LineNr'], 'detectedtext': line['DetectedText'], 'confidence':line['Confidence']})\n        ip_content = {\"document\": doc_list,\n                  'image': reg_images[doc.split('.')[0]]\n                 }                \n        start_loop_response = a2i.start_human_loop(\n                HumanLoopName=humanLoopName[doc],\n                FlowDefinitionArn=flowDefinitionArn,\n                HumanLoopInput={\n                    \"InputContent\": json.dumps(ip_content)\n                }\n            )\n    ```", "```py\n    completed_human_loops = []\n    for doc in humanLoopName:\n        resp = a2i.describe_human_loop(HumanLoopName=humanLoopName[doc])\n        print(f'HumanLoop Name: {humanLoopName[doc]}')\n        print(f'HumanLoop Status: {resp[\"HumanLoopStatus\"]}')\n        print(f'HumanLoop Output Destination: {resp[\"HumanLoopOutput\"]}')\n        print('\\n')\n    ```", "```py\n    workteamName = WORKTEAM_ARN[WORKTEAM_ARN.rfind('/') + 1:]\n    print(\"Navigate to the private worker portal and do the tasks. Make sure you've invited yourself to your workteam!\")\n    print('https://' + sagemaker.describe_workteam(WorkteamName=workteamName)['Workteam']['SubDomain'])\n    ```", "```py\n    for idx, row in df_newdoc.iterrows():\n        table.put_item(\n           Item={\n            'row_nr': idx,\n            'doc_name': str(row['DocName']) ,\n            'line_nr': str(row['LineNr']),\n            'detected_line': str(row['DetectedText']),\n            'confidence': str(row['Confidence']),   \n            'corrected_line': str(row['CorrectedText']),\n            'change_comments': str(row['Comments'])   \n            }\n        )\n    print(\"Items were successfully created in DynamoDB table\")\n    ```"]