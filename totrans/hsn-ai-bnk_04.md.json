["```py\nfile_path_out\nif select_fld:\n    list_flds = ['consumption_ng','avg_cost_ng']\n    tuple_shape_list = [(8,0,3),(12,1,3)]\nelse:\n    list_flds = preprocess_data(f_name,list_flds)\n```", "```py\nstart = time.time()\nlowest_MSE=99999999999\nlowest_order = (0,0,0)\nfor p_para in range(13):\n  for d_para in range(3):\n    for q_para in range(4):\n      order = (p_para,d_para,q_para)\n      ...\n      ...\n      error,temp_data,temp_model = forecasting(dta_df, fld, False, \\\n                                               order, 0.7, fld)\n\nif error<lowest_MSE:\n  lowest_MSE=error\n  lowest_order = order\n  lowest_data = temp_data\n  lowest_model = temp_model\n  end = time.time()\n  ...\n```", "```py\n'''*************************************\n2\\. import all the libraries required\n'''\nimport pandas as pd\n\nfrom keras.models import Model\nfrom keras.layers import Dense, Input\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt\n\nimport pickle\n\ndemand_model_path = 'demand_model.h5'\nf_in_name = 'consumption_ng_exp.csv'\n```", "```py\n'''*************************************\n#Read in data\n'''\npd_trade_history = pd.read_csv(f_in_name,header=0)\npd_trade_history = pd_trade_history.drop('date_d',1)  \n```", "```py\n'''*************************************\n4\\. Pre-processing data\n'''\n#4.A: select features and target\ndf_X = pd_trade_history.iloc[:,:-5]\ndf_Y = pd_trade_history.iloc[:,-4:]\n\nnp_X = df_X.values\nnp_Y = df_Y.values\n\n#4.B: Prepare training and testing set\nX_train, X_test, Y_train, Y_test = train_test_split(np_X, np_Y, \\\n                                                    test_size = 0.2)\n\n#4.C: scaling the inputted features\nsc_X = StandardScaler()\nX_train_t = sc_X.fit_transform(X_train)\nX_test_t = sc_X.fit_transform(X_test)\n```", "```py\n'''*************************************\n#5\\. Build the model\n'''\ninputs = Input(shape=(14,))\nx = Dense(7, activation='relu')(inputs)\nx = Dense(7, activation='relu')(x)\nx = Dense(7, activation='relu')(x)\nx = Dense(4, activation='relu')(x)\nx = Dense(4, activation='relu')(x)\nx = Dense(4, activation='relu')(x)\nx = Dense(4, activation='relu')(x)\npredictions = Dense(units=4, activation='linear')(x)\ndemand_model= Model(inputs=inputs,outputs=predictions)\ndemand_model.compile(loss='mse', optimizer='adam', metrics=['mae'])\n\ndemand_model.fit(X_train_t,Y_train, epochs=7000, validation_split=0.2)\n\nY_pred = demand_model.predict(X_test_t)\n\n#conver numpy as dataframe for visualization\npd_Y_test = pd.DataFrame(Y_test)\npd_Y_pred = pd.DataFrame(Y_pred)\n```", "```py\n'''*************************************\n##6\\. Test model: Measure the model accuracy\ncombine both actual and prediction of test data into data\n'''\ndata = pd.concat([pd_Y_test,pd_Y_pred], axis=1)\ndata_name = list(data)[0]\ndata.columns=['actual1','actual2','actual3','actual4','predicted1', \\\n              'predicted2','predicted3','predicted4']\n\nerror1 = mean_squared_error(data['actual1'],data['predicted1'])\nprint('Test MSE 1: %.3f' % error1)\nerror2 = mean_squared_error(data['actual2'],data['predicted2'])\nprint('Test MSE 1: %.3f' % error2)\nerror3 = mean_squared_error(data['actual3'],data['predicted3'])\nprint('Test MSE 1: %.3f' % error3)\nerror4 = mean_squared_error(data['actual4'],data['predicted4'])\n```", "```py\n'''*************************************\n#7\\. Visualize the prediction accuracy\n'''\n\ndata.actual1.plot(color='blue',grid=True,label='actual1',title=data_name)\ndata.predicted1.plot(color='red',grid=True,label='predicted1')\nplt.legend()\nplt.show()\nplt.close()\n\n...\n```", "```py\n'''*************************************\n#8\\. Output the models\n'''\ndemand_model.summary()\ndemand_model.save(demand_model_path)\nf_scaler=open('x_scaler.pkl',\"wb+\")\npickle.dump(sc_X, f_scaler)\n```"]