- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a Multimodal Multi-Agent Framework with the Azure OpenAI Assistants
    API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore how to build a system using the Azure OpenAI
    Assistants API that allows multiple intelligent agents to work together. These
    agents use advanced language models to understand and generate natural language,
    making them capable of performing tasks independently and making decisions on
    their own.
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine a team of AI agents collaborating to create and enhance
    images based on user input. One agent could generate an initial image, another
    agent could refine the details, and a third agent could adjust the colors and
    textures. This collaborative process results in high-quality and intricate outputs
    that a single agent might struggle to achieve alone. This example serves as a
    comprehensive guide for developers looking to harness the capabilities of multiple
    AI agents working in concert. It shows how agents can communicate and collaborate
    to process complex tasks, particularly focusing on generative AI applications.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft recently introduced **Azure AI Agent Service**, a fully managed platform
    designed to help developers efficiently build, deploy, and scale high-quality
    AI agents. This service eliminates the complexity of managing compute and storage
    resources, allowing developers to focus on creating intelligent and extensible
    AI solutions. Traditionally, implementing client-side function-calling required
    writing hundreds of lines of code. With **Azure AI Agent Service**, this process
    is now streamlined to just a few lines, significantly reducing development time
    and effort. Since Azure AI Agent Service follows the same wire protocol as **Azure
    OpenAI Assistants**, developers can seamlessly create and run agents using either
    **OpenAI SDKs** or **Azure AI** **Foundry SDKs**.
  prefs: []
  type: TYPE_NORMAL
- en: While the service is optimized for **single-agent** implementations, orchestrating
    multiple agents as a **multi-agent system** requires additional tooling. For research
    and proof-of-concept projects, **AutoGen** is a good choice. However, for production-grade
    multi-agent systems, **Semantic Kernel** offers a better and more scalable multi-agent
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is especially relevant for developers and tech enthusiasts interested
    in exploring the frontiers of generative AI and multi-agent systems using the
    Azure OpenAI Assistants API. Specifically, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The problem statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multimodal multi-agent framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As AI technology advances, we need smarter systems to handle complicated tasks
    in areas such as robotics, gaming, and self-driving cars. Single-agent systems
    often struggle with these complex problems because they can’t manage everything
    on their own. To solve this, we aim to create a system where multiple intelligent
    agents work together. Using the Azure OpenAI Assistants API, we’ll build a framework
    that combines the language skills of advanced AI models with the decision-making
    abilities of smart agents.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in robotics, a team of robots could work together to clean up a
    large park. One robot might pick up trash, another might mow the grass, and a
    third might water the plants. These robots need to communicate and coordinate
    their tasks to ensure the park is cleaned efficiently and thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is in gaming, where multiple AI characters can collaborate to
    create more dynamic and challenging gameplay. One character could be a strategist,
    planning the next moves, while another could be a scout, gathering information
    about the environment. Similarly, in self-driving cars, multiple autonomous vehicles
    need to communicate to avoid collisions and optimize traffic flow. By working
    together, they can make better decisions than a single car acting on its own.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will guide you through the process of building a multi-agent
    framework using the Azure OpenAI Assistants API. We will start with an overview
    of the key concepts and technologies involved, including intelligent agents and
    LLMs. Next, we will walk you through practical examples and case studies to demonstrate
    how to implement and integrate these agents. You will learn how to set up communication
    between agents, enable them to collaborate on tasks, and leverage the capabilities
    of LLMs for enhanced decision-making and problem-solving.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand how to create and use a multi-agent
    system that combines the strengths of language models and autonomous agents. This
    system will be capable of handling a wide range of tasks, showcasing its potential
    applications in various fields such as robotics, gaming, and autonomous systems.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the practical exercises in this chapter, access the source
    code available in this chapter’s GitHub repository at [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter10.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter10.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need the following tools on your local machine to start working on
    the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python 3.9, 3.10, or 3.11: [https://www.python.org/downloads/](https://www.python.org/downloads/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An Azure account: If you’re new to Azure, get an Azure account for free and
    you’ll get some free Azure credits to get started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Azure subscription with access enabled for the Azure OpenAI service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure OpenAI** (**AOAI**) connection and model information: Create an Azure
    OpenAI using Sweden Central as the region'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assistants models with GPT-4o
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DALL-E 3 model with version 3.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the system requirements just mentioned, it is crucial to have
    a solid foundation in fundamental Azure services and a basic proficiency in the
    Python programming language, equivalent to a beginner level (Python 100). These
    skills are vital for efficiently harnessing and leveraging Azure services in the
    context of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Rest assured that even if you are new to the Azure environment, we have designed
    this chapter to be beginner-friendly. It offers clear explanations and includes
    detailed screenshots to facilitate your learning and get you started on the right
    track.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using a multi-agent system where the User Proxy Assistant acts as
    the main orchestrator, facilitating communication between the user and specialized
    agents. The DALL-E Assistant is responsible for generating images based on user
    queries, while the Vision Assistant analyzes these images using the GPT-4o model.
    The system maintains ongoing communication through persistent threads and utilizes
    function calls to perform specific tasks, such as image generation and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical workflow, the user sends a query to the User Proxy Assistant, which
    forwards it to the DALL-E Assistant to create an image. This image is then analyzed
    by the Vision Assistant, which provides feedback that can be used to refine the
    image further. This coordinated effort between specialized agents ensures efficient
    handling of complex tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This is just one way to implement multi-agent systems. You could also use other
    frameworks such as AutoGen, Semantic Kernel, CrewAI, and LangGraph.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1: Architecture diagram](img/B21019_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: Architecture diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10**.1* illustrates an example of the overall architectural framework.
    In this scenario, the User Proxy Assistant acts as the central coordinator, facilitating
    communication between the DALL-E Assistant and the Vision Assistant.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a multimodal multi-agent framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll walk through a practical example of building a multi-agent
    framework using the AOAI Assistants API. We’ll focus on how these agents can interact
    and collaborate to handle complex tasks, such as generating and refining images
    through iterative improvements based on user input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each assistant is structured as illustrated in *Figure 10**.2*, showcasing
    their respective roles and interactions within the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Proxy Assistant**: This assistant is initialized as the primary orchestrator,
    enabling seamless communication between the user and specialized agents in the
    group chat. It ensures messages are properly routed and maintains an ongoing conversation
    to guarantee that user tasks are successfully executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DALL·E Assistant**: This assistant is set up to handle image generation tasks.
    It connects with the DALL·E model to create visual content based on user prompts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vision Assistant**: This assistant is configured to perform image analysis.
    It utilizes the GPT-4 Vision model to process and interpret visual inputs, extracting
    meaningful insights for the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Together, these assistants form a cohesive system where the User Proxy Assistant
    coordinates interactions, the DALL·E Assistant generates images, and the Vision
    Assistant analyzes them, ensuring an efficient and responsive AI-driven workflow.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2: Assistant details](img/B21019_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: Assistant details'
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin, ensure that the Azure OpenAI service is set up and that both
    the DALL·E 3 and GPT-4o models are deployed, as illustrated in *Figure 10**.3*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3: Model deployment](img/B21019_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.3: Model deployment'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Details for setting up the Azure account with an active subscription and the
    Azure OpenAI Service resource are provided in [*Chapter 2*](B21019_02.xhtml#_idTextAnchor023)*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, set up all three Assistants using the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set up the `user_proxy` agent using the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, set up the `dalle_assistant` agent using the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, set up the `vision_assistant` agent using the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The User Proxy Assistant thread functions as the primary communication channel,
    facilitating message exchanges between agents to fulfill the user’s request, as
    illustrated in *Figure 10**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4: User Proxy Agent thread](img/B21019_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.4: User Proxy Agent thread'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize the User Proxy Assistant thread using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The only input necessary is the user’s query, which drives the overall task
    execution across the assistants. This query is transmitted to the User Proxy Assistant
    thread via the `dispatch_message` function shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The User Proxy Assistant is designed to route messages to the appropriate agents
    to ensure task completion. The `send_message` function facilitates this process
    by leveraging the `agents_threads` structure, which maintains a record of agents
    and their respective threads throughout the entire conversation, ensuring seamless
    communication and task execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If a thread does not already exist between the User Proxy Assistant and the
    other agents, a new one is created to initiate the conversation, ensuring smooth
    communication and task execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, when the User Proxy Assistant needs to interact with the DALL·E
    Assistant, it establishes a new thread between the two agents to facilitate communication,
    as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5: User Proxy and DALL-E Assistant communication](img/B21019_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: User Proxy and DALL-E Assistant communication'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `send_message` function invokes another function responsible for creating
    and dispatching a message to the appropriate agent, ensuring the task is executed
    efficiently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dispatch_message` function identifies and retrieves all available functions
    for the specified assistant. It utilizes the `agent.tool` function to register
    these capabilities and adds them to the assistant’s available function dictionary
    for execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dispatch_message` function then directs a message to the appropriate assistant
    to carry out the task by generating a new message within the thread and invoking
    the assistant’s `create` function. This same process is applied when handling
    the user’s query within the User Proxy Assistant thread:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The assistant thread’s `run` function assesses whether a specific tool or function
    is needed for the given task. If a requirement is identified, it assigns the relevant
    function to the assistant for execution. Once invoked, the function processes
    the task and returns the output, which is then stored in the `tool_response` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The output is sent back to the User Proxy Assistant as a message via the `submit_tool_outputs`
    function, ensuring seamless communication and task completion.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, as illustrated in *Figure 10**.6*, the DALL·E Assistant returns
    the generated image to the User Proxy Assistant thread, ensuring the output is
    relayed back for further processing or user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6: The message and output between assistants](img/B21019_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: The message and output between assistants'
  prefs: []
  type: TYPE_NORMAL
- en: 'The User Proxy Assistant then initiates a request to the Vision Assistant to
    analyze the generated image and provide feedback. It follows the same process
    as before but now directs the request to the Vision Assistant, creating a new
    thread linked to the existing User Proxy Assistant thread. This cycle can be repeated
    iteratively, calling different assistants as needed, until the overall task is
    fully completed, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7: Multi-agent architecture](img/B21019_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.7: Multi-agent architecture'
  prefs: []
  type: TYPE_NORMAL
- en: Example output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s conduct end-to-end testing with all three assistants working together
    to complete the task by deploying the full solution from this chapter’s GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: '*User Agent*: Generate an image of a boat drifting in the water and analyze
    it and enhance the image.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Dalle Assistant*: Creating the image...'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21019_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Vision Assistant*: Analyzing the image...'
  prefs: []
  type: TYPE_NORMAL
- en: '*Vision Assistant*: The image presents a serene and minimalistic composition
    featuring a solitary wooden boat floating on calm waters. The overall tone is
    muted and ethereal, conveying a sense of peace and tranquility. The boat, capped
    with a small canopy and a flag, is perfectly positioned to catch the viewer’s
    focus. The reflection in the water is a nice touch that adds depth to the scene.
    The light is beautifully managed, likely depicting either dawn or dusk, which
    gives the scene a dreamy, soft glow.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Critique**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lack of Detail**: While simplicity is part of the image’s charm, the boat
    itself lacks detailed texture or distinctive features. Adding some details or
    ornaments on the boat could enhance visual interest without disturbing the tranquility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foreground Wave**: The wave in the foreground is slightly distracting. It
    draws attention away from the boat and seems inconsistent with the otherwise calm
    setting. A more uniform water surface would emphasize the stillness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sky Gradient**: The sky lacks a gradient typical of dawn or dusk scenes,
    which could add to the atmosphere significantly. Introducing some color transitions
    in the sky might enhance the ethereal effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background Content**: The background is very plain, and while this focuses
    attention on the boat, incorporating subtle elements such as distant landmasses
    or birds might create a more dynamic and contextually rich composition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Enhanced prompt for DALL-E*: Generate an ethereal image of a wooden boat with
    detailed texture, floating on calm waters at dawn. The boat should feature a small
    canopy and a decorative flag. The water should appear still, with no waves interrupting
    the serene atmosphere. Capture a soft and colorful gradient in the sky to reflect
    an early morning or evening time, possibly including distant, faint silhouettes
    of land or birds to add subtle complexity and depth to the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Dalle Assistant*: Creating the image...'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21019_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Vision Assistant*: Analyzing the image...'
  prefs: []
  type: TYPE_NORMAL
- en: '*Vision Assistant*: The image showcases a beautiful and serene landscape capturing
    a traditional wooden boat on a calm body of water during a picturesque sunrise
    or sunset. The water is so still that the boat and distant silhouettes of other
    boats and some kind of structures stand reflected perfectly, enhancing the image’s
    overall tranquility. The warm color palette of the sky with hues of orange and
    pink transitioning into the blues gives the scene a dreamy and peaceful atmosphere.
    The thin line of birds flying across the sky adds a dynamic element and conveys
    a sense of journey and freedom.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Critique**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Details and Texture**: While the overall composition is compelling, the boat’s
    texture could be enhanced for more realism. Currently, it appears a bit smooth,
    which could detract from potential wood grain detailing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lighting**: The ambient lighting is well done, but more contrast could be
    applied to make the boat’s features pop and increase the scene’s depth, especially
    for the structure in the background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background Elements**: The structures present in the background are intriguing
    and add depth but lack clarity. Offering more details or suggesting a specific
    type of structure could enhance the scene’s storytelling aspect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foreground Interest**: Perhaps including additional elements in the foreground,
    like subtle ripples in the water or nearby wildlife, might add more interest and
    life to the scene without detracting from its simplicity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Enhanced prompt for DALL-E*: Create a serene scene of a traditional wooden
    boat with detailed wood grain textures on a calm lake during a vivid sunset. The
    sky should be a gradient of warm oranges and pinks blending into cool blues, casting
    a soft reflective glow on the still water. In the background, faint structures
    on stilts suggest a mysterious setting, with enough clarity to hint at their cultural
    significance. Introduce gentle ripples in the water around the boat to imply movement
    and perhaps integrate a few wildlife figures subtly in the foreground to add lively
    elements without compromising the tranquility of the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Dalle Assistant*: Creating the image...'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21019_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With just one user input, you can see how DALL·E and the Vision Assistant collaborate
    to enhance image quality—demonstrating the power of a multi-agent system.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored building a multi-agent system using the Azure OpenAI
    Assistants API. Multi-agent framework with the Azure AI Assistants API offers
    valuable insights into the evolving landscape of AI-driven collaboration. By harnessing
    the capabilities of LLM-based agents within the Azure ecosystem, we can build
    a network of specialized agents that enhance system intelligence, enabling them
    to tackle complex tasks and make informed decisions dynamically. By establishing
    assistants, managing communication threads, sending messages, and executing functions,
    we have outlined a structured approach that developers can adopt.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will shift our focus to the crucial topics of privacy
    and security as related to AOAI. Having explored the development and implementation
    of practical solutions using AOAI alongside various Azure AI services in previous
    chapters, we will now delve into essential considerations for safeguarding data
    and ensuring compliance. This chapter will cover topics such as Azure OpenAI Service
    compliance, data privacy, content filtering, managed identity, virtual network
    configurations, private endpoint configurations, data encryption, and responsible
    AI practices for Azure OpenAI. These areas are critical for building secure and
    trustworthy AI solutions in enterprise environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Mastering Governance, Operations, and AI Optimization with Azure OpenAI'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final part, we shift focus from creating solutions to mastering the
    critical elements of governance, deployment, and advanced optimization strategies
    for Azure OpenAI. This part equips you with the knowledge to safeguard their implementations,
    operationalize their AI solutions effectively, and maximize the potential of generative
    AI through advanced prompt engineering techniques.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll explore essential privacy and security practices to ensure compliance
    and data protection, dive into operational best practices for managing resources
    efficiently, and gain insights into crafting precise and impactful prompts. Whether
    you’re deploying AI at scale or refining its behavior for specific use cases,
    this section provides the tools to transform your Azure OpenAI solutions into
    robust, reliable, and innovative systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21019_11.xhtml#_idTextAnchor119), *Privacy and Security*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21019_12.xhtml#_idTextAnchor150), *Operationalizing Azure OpenAI*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21019_13.xhtml#_idTextAnchor164), *Advanced Prompt Engineering*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
